var laya = (function () {
	'use strict';

	var Loader = Laya.Loader;
	class ResPredef {
	    static getInitResList() {
	        var arr = [
	            { url: "ui/common.atlas", type: Loader.ATLAS, size: 100 },
	            { url: "texture/share/caidai.atlas", type: Loader.ATLAS, size: 100 }
	        ];
	        for (var i = 1; i <= 11; i++) {
	            var atlas = {};
	            atlas["url"] = "texture/role_model_" + i + ".atlas";
	            atlas["type"] = Loader.ATLAS;
	            atlas["size"] = 100;
	            arr.push(atlas);
	            var ani = {};
	            ani["url"] = "animations/role_model_" + i + ".ani";
	            ani["type"] = Loader.JSON;
	            ani["size"] = 100;
	            arr.push(ani);
	        }
	        return arr;
	    }
	}

	var Loader$1 = Laya.Loader;
	class ConfigManager {
	    static init() {
	        ConfigManager.loadConfig();
	    }
	    static loadConfig() {
	        var JSZip = window["JSZip"];
	        var dataBuffer = Loader$1.getRes("client.data");
	        var zip = new JSZip(dataBuffer);
	        var files = zip.files;
	        for (var key in files) {
	            var fileData = files[key];
	            var arr = fileData.name.split("/");
	            var tableName = arr[arr.length - 1];
	            tableName = tableName.split(".")[0];
	            if (tableName) {
	                var zipFile = zip.file(fileData.name);
	                if (zipFile) {
	                    ConfigManager.configDic[tableName] = zipFile.asText();
	                }
	            }
	        }
	    }
	    static analyzeConfig(tableName, analyzer) {
	        var configJson = ConfigManager.configDic[tableName];
	        if (configJson) {
	            analyzer.analyze(JSON.parse(configJson));
	        }
	    }
	}
	ConfigManager.configDic = {};

	var Text = Laya.Text;
	var Loader$2 = Laya.Loader;
	class FontManager {
	    static getFontNames() {
	        return [FontManager.uiNum1];
	    }
	    static getFontUrls() {
	        var fontNames = FontManager.getFontNames();
	        var urls = new Array();
	        var len = fontNames.length;
	        for (var i = 0; i < len; i++) {
	            urls.push({ url: "font/" + fontNames[i] + ".fnt", type: Loader$2.FONT, size: 1 });
	        }
	        return urls;
	    }
	    static init() {
	        var fontNames = FontManager.getFontNames();
	        var len = fontNames.length;
	        for (var i = 0; i < len; i++) {
	            var fontName = fontNames[i];
	            var url = "font/" + fontName + ".fnt";
	            var font = Laya.loader.getRes(url);
	            if (font) {
	                var spaceWidth;
	                switch (fontName) {
	                    case "uiNum1":
	                        spaceWidth = 0;
	                        break;
	                }
	                if (spaceWidth != null) {
	                    font.setSpaceWidth(spaceWidth);
	                }
	                Text.registerBitmapFont(fontNames[i], font);
	            }
	        }
	    }
	}
	FontManager.uiNum1 = "uiNum1";

	class PanelKey {
	}
	PanelKey.GMPanel = "GMPanel";
	PanelKey.RegisterPanel = "RegisterPanel";
	PanelKey.LoginPanel = "LoginPanel";
	PanelKey.ServerSelectPanel = "ServerSelectPanel";
	PanelKey.AlertPanel = "AlertPanel";
	PanelKey.CreateRolePanel = "CreateRolePanel";
	PanelKey.RewardPanel = "RewardPanel";

	class PanelEvent {
	}
	PanelEvent.OPEN_PANEL = "OPEN_PANEL";
	PanelEvent.CLOSE_PANEL = "CLOSE_PANEL";

	class ObjectUtils {
	    static clone(source, deep = false) {
	        if (typeof (source) != 'object') {
	            return source;
	        }
	        if (deep) {
	            return JSON.parse(JSON.stringify(source));
	        }
	        else {
	            var target;
	            if (source instanceof Array) {
	                target = [];
	            }
	            else {
	                target = {};
	            }
	            for (var key in source) {
	                target[key] = source[key];
	            }
	            return target;
	        }
	    }
	    static getKeys(obj) {
	        var keys = [];
	        for (var key in obj) {
	            keys.push(key);
	        }
	        return keys;
	    }
	    static getValues(obj) {
	        var arr = [];
	        for (var key in obj) {
	            arr.push(obj[key]);
	        }
	        return arr;
	    }
	    static cover(sources, target, needContainsKey) {
	        if (!target || !sources)
	            return;
	        for (var key in target) {
	            if (needContainsKey) {
	                if (!sources.hasOwnProperty(key)) {
	                    continue;
	                }
	            }
	            sources[key] = target[key];
	        }
	    }
	    static getKeyLen(obj) {
	        return ObjectUtils.getKeys(obj).length;
	    }
	    static getMaxKeyValue(obj) {
	        var value = 0;
	        for (var key in obj) {
	            if (value < Number(key)) {
	                value = Number(key);
	            }
	        }
	        return value;
	    }
	}

	class GlobalVars {
	    static get throwError() {
	        return GlobalVars.isTest;
	    }
	    static get uploadError() {
	        return !GlobalVars.isTest;
	    }
	    static syncParams(launchConfig) {
	        ObjectUtils.cover(GlobalVars, launchConfig, true);
	    }
	}
	GlobalVars.sdkLogic = "";
	GlobalVars.openGM = false;
	GlobalVars.isTest = false;
	GlobalVars.isWebGame = false;
	GlobalVars.showLog = false;

	class Logger {
	    static log(str) {
	        if (!Logger.canOut) {
	            return;
	        }
	        console.log(str);
	    }
	    static error(str) {
	        if (!Logger.canOut) {
	            return;
	        }
	        console.error(str);
	    }
	    static warn(str) {
	        if (!Logger.canOut) {
	            return;
	        }
	        console.warn(str);
	    }
	    static get canOut() {
	        return GlobalVars.showLog;
	    }
	}

	var LangType;
	(function (LangType) {
	    LangType["cn"] = "cn";
	    LangType["en"] = "en";
	})(LangType || (LangType = {}));
	var ItemID;
	(function (ItemID) {
	})(ItemID || (ItemID = {}));
	var WordCheckType;
	(function (WordCheckType) {
	    WordCheckType[WordCheckType["RoleName"] = 0] = "RoleName";
	})(WordCheckType || (WordCheckType = {}));
	var ItemType;
	(function (ItemType) {
	    ItemType[ItemType["All"] = 0] = "All";
	})(ItemType || (ItemType = {}));
	var MaterialType;
	(function (MaterialType) {
	    MaterialType["Unknown"] = "unknown";
	    MaterialType["Item"] = "item";
	})(MaterialType || (MaterialType = {}));
	var RoleDir;
	(function (RoleDir) {
	    RoleDir[RoleDir["None"] = -1] = "None";
	    RoleDir[RoleDir["Up"] = 0] = "Up";
	    RoleDir[RoleDir["Right"] = 1] = "Right";
	    RoleDir[RoleDir["Down"] = 2] = "Down";
	    RoleDir[RoleDir["Left"] = 3] = "Left";
	})(RoleDir || (RoleDir = {}));
	var InteractType;
	(function (InteractType) {
	    InteractType[InteractType["SendMsg"] = 1] = "SendMsg";
	    InteractType[InteractType["DoAction"] = 2] = "DoAction";
	})(InteractType || (InteractType = {}));
	var BehaviorType;
	(function (BehaviorType) {
	    BehaviorType[BehaviorType["Perform"] = 1] = "Perform";
	    BehaviorType[BehaviorType["SendFace"] = 2] = "SendFace";
	    BehaviorType[BehaviorType["ClearFace"] = 3] = "ClearFace";
	})(BehaviorType || (BehaviorType = {}));
	var GameZOrder;
	(function (GameZOrder) {
	    GameZOrder[GameZOrder["GameLayer"] = 1000] = "GameLayer";
	    GameZOrder[GameZOrder["Loading"] = 2000] = "Loading";
	    GameZOrder[GameZOrder["FadeBlack"] = 3000] = "FadeBlack";
	    GameZOrder[GameZOrder["BuildLayer"] = 3500] = "BuildLayer";
	    GameZOrder[GameZOrder["MouseCursor"] = 4000] = "MouseCursor";
	})(GameZOrder || (GameZOrder = {}));

	var Sprite = Laya.Sprite;
	var EventDispatcher = Laya.EventDispatcher;
	class LayerManager extends EventDispatcher {
	    constructor() {
	        super();
	    }
	    init() {
	        this.gameLayer = new Sprite();
	        this.gameLayer.zOrder = GameZOrder.GameLayer;
	        Laya.stage.addChild(this.gameLayer);
	        this.sceneLayer = new Sprite();
	        this.gameLayer.addChild(this.sceneLayer);
	        this.mainUILayer = new Sprite();
	        this.gameLayer.addChild(this.mainUILayer);
	        this.popupPanelLayer = new Sprite();
	        this.gameLayer.addChild(this.popupPanelLayer);
	        this.topUILayer = new Sprite();
	        this.gameLayer.addChild(this.topUILayer);
	        this.effectLayer = new Sprite();
	        this.gameLayer.addChild(this.effectLayer);
	        this.guideLayer = new Sprite();
	        this.guideLayer.mouseThrough = true;
	        this.gameLayer.addChild(this.guideLayer);
	        this.lockLayer = new Sprite();
	        this.lockLayer.mouseEnabled = true;
	        this.gameLayer.addChild(this.lockLayer);
	        this.onStageResize();
	    }
	    onStageResize() {
	    }
	    static get ins() {
	        return LayerManager._ins = LayerManager._ins || new LayerManager();
	    }
	}
	LayerManager._ins = null;

	var Event = Laya.Event;
	var Browser = Laya.Browser;
	class ErrorCatcher {
	    static init() {
	        Browser.window.onerror = onerror;
	    }
	    static onerror(msg, url, l, c, e) {
	        ErrorCatcher.handleError(msg, url, l, c, e);
	        return false;
	    }
	    static handleError(msg, url, l, c, e, appendInfo = null) {
	        var errorinfo = "";
	        errorinfo += "Error: " + msg + "\n";
	        errorinfo += "URL: " + url + "\n";
	        errorinfo += "Line: " + l + "\n";
	        errorinfo += "Column:" + c + "\n";
	        if (e) {
	            errorinfo += "ErrorStack:" + e.stack + "\n";
	        }
	        if (appendInfo) {
	            errorinfo += "AppendInfo:" + appendInfo + "\n";
	        }
	        ErrorCatcher.postError(errorinfo);
	    }
	    static postError(errorinfo) {
	        var xhr = new Laya.HttpRequest();
	        xhr.http.timeout = 10000;
	        xhr.once(Event.COMPLETE, null, ErrorCatcher.completeHandler);
	        xhr.once(Event.ERROR, null, ErrorCatcher.errorHandler);
	        xhr.on(Event.PROGRESS, null, ErrorCatcher.processHandler);
	    }
	    static processHandler(data) {
	    }
	    static errorHandler(data) {
	        Logger.log("errorCatch Post Error!");
	    }
	    static completeHandler(data) {
	        Logger.log("errorCatch Post Success!");
	    }
	}

	class ErrorUtils {
	    constructor() {
	    }
	    static throwError(str, ...params) {
	        if (GlobalVars.throwError) {
	            throw new Error(str);
	        }
	    }
	    static catchError(error, appendInfo = "") {
	        if (GlobalVars.uploadError) {
	            ErrorCatcher.handleError("上传手动捕获异常", "", 0, 0, error, appendInfo);
	        }
	        if (GlobalVars.throwError) {
	            throw error;
	        }
	    }
	}

	var REG = Laya.ClassUtils.regClass;
	var editor;
	(function (editor) {
	    var alert;
	    (function (alert) {
	        class AlertPanelUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(AlertPanelUI.uiView);
	            }
	        }
	        AlertPanelUI.uiView = { "type": "View", "props": { "width": 610, "height": 408 }, "compId": 1, "child": [{ "type": "PopupPanelBack", "props": { "y": 0, "x": 0, "var": "panelBg", "name": "", "runtime": "editor.share.PopupPanelBackUI" }, "compId": 24 }, { "type": "Label", "props": { "y": 76, "x": 45, "wordWrap": true, "width": 520, "var": "labelDesc", "text": "描述", "name": "", "leading": 5, "height": 194, "fontSize": 20, "font": "SimHei", "color": "#cecead", "align": "left" }, "compId": 26 }, { "type": "Button", "props": { "y": 347, "x": 451, "width": 184, "var": "btnYes", "stateNum": 1, "skin": "ui/common/anniu_yes.png", "sizeGrid": "0,34,0,34", "labelSize": 28, "labelPadding": "-2,0,0,0", "labelFont": "SimHei", "labelColors": "#fff3d9", "label": "确定", "height": 64, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6 }, { "type": "Button", "props": { "y": 347, "x": 167, "width": 184, "var": "btnCancel", "stateNum": 1, "skin": "ui/common/anniu_bu2.png", "sizeGrid": "0,34,0,34", "labelSize": 28, "labelPadding": "-2,0,0,0", "labelFont": "SimHei", "labelColors": "#fff3d9", "label": "取消", "height": 64, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 7 }], "loadList": ["ui/common/anniu_yes.png", "ui/common/anniu_bu2.png"], "loadList3D": [] };
	        alert.AlertPanelUI = AlertPanelUI;
	        REG("editor.alert.AlertPanelUI", AlertPanelUI);
	    })(alert = editor.alert || (editor.alert = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var loading;
	    (function (loading) {
	        class InitLoadingUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(InitLoadingUI.uiView);
	            }
	        }
	        InitLoadingUI.uiView = { "type": "View", "props": {}, "compId": 1, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "background" }, "compId": 57 }, { "type": "Box", "props": { "width": 275, "height": 326, "centerY": 0, "centerX": 0 }, "compId": 47, "child": [{ "type": "ProgressBar", "props": { "y": 272, "x": 48, "width": 178, "var": "progressBar", "skin": "ui/loading/loading_jindutiao.png", "height": 6 }, "compId": 48 }, { "type": "Image", "props": { "y": 61, "x": 51, "skin": "ui/loading/jiazai_bj.png" }, "compId": 50 }, { "type": "Image", "props": { "y": 62, "x": 104.5, "var": "imgRole", "skin": "icon/role_icon_1.png", "scaleY": 0.4, "scaleX": 0.4 }, "compId": 51 }, { "type": "Label", "props": { "y": 312, "x": 82.5, "text": "正在载入...", "fontSize": 14, "font": "SimHei", "color": "#ffffff" }, "compId": 52 }, { "type": "Label", "props": { "y": 312, "x": 161.5, "width": 72, "var": "labProgress", "text": "0%", "fontSize": 14, "font": "SimHei", "color": "#cccccc" }, "compId": 53 }, { "type": "Label", "props": { "y": 173.5, "x": 79.5, "width": 113, "var": "labName", "text": "玩家名称", "height": 15, "fontSize": 14, "font": "Microsoft YaHei", "color": "#ffffff", "align": "center" }, "compId": 54 }] }], "loadList": ["ui/loading/loading_jindutiao.png", "ui/loading/jiazai_bj.png", "icon/role_icon_1.png"], "loadList3D": [] };
	        loading.InitLoadingUI = InitLoadingUI;
	        REG("editor.loading.InitLoadingUI", InitLoadingUI);
	    })(loading = editor.loading || (editor.loading = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var main;
	    (function (main) {
	        class BuildEntityItemUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(BuildEntityItemUI.uiView);
	            }
	        }
	        BuildEntityItemUI.uiView = { "type": "View", "props": { "width": 56, "height": 56 }, "compId": 2, "child": [{ "type": "Image", "props": { "skin": "ui/common/moren.png" }, "compId": 3 }, { "type": "Image", "props": { "y": 0, "x": 0, "var": "imgOver", "skin": "ui/common/xuanzhong.png" }, "compId": 4 }, { "type": "Sprite", "props": { "y": 48, "x": 28, "var": "spAni" }, "compId": 5 }], "loadList": ["ui/common/moren.png", "ui/common/xuanzhong.png"], "loadList3D": [] };
	        main.BuildEntityItemUI = BuildEntityItemUI;
	        REG("editor.main.BuildEntityItemUI", BuildEntityItemUI);
	        class MainPanelUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(MainPanelUI.uiView);
	            }
	        }
	        MainPanelUI.uiView = { "type": "View", "props": { "width": 640, "height": 1138 }, "compId": 2, "child": [{ "type": "Box", "props": { "width": 258, "height": 50, "centerX": 0, "bottom": 20 }, "compId": 52, "child": [{ "type": "Image", "props": { "width": 258, "skin": "ui/common/geren_bj.png", "sizeGrid": "20,20,20,20", "height": 50 }, "compId": 53 }, { "type": "Image", "props": { "y": 11, "x": 14, "skin": "ui/common/touxiang.png" }, "compId": 56 }, { "type": "Image", "props": { "y": 31, "x": 31, "skin": "ui/common/lvdian.png" }, "compId": 57 }, { "type": "Button", "props": { "y": 13, "x": 219, "var": "btnFace", "stateNum": 2, "skin": "ui/common/biaoqing.png" }, "compId": 58 }, { "type": "Label", "props": { "y": 9, "x": 54, "var": "labName", "text": "玩家名称", "overflow": "scroll", "fontSize": 15, "font": "Microsoft YaHei", "color": "#ffffff" }, "compId": 59 }, { "type": "Label", "props": { "y": 29, "x": 54, "text": "在线", "overflow": "scroll", "fontSize": 14, "font": "Microsoft YaHei", "color": "#28f40d" }, "compId": 60 }, { "type": "Image", "props": { "y": 0, "x": 13, "width": 30, "var": "imgRole", "skin": "icon/role_icon_1.png", "height": 40 }, "compId": 63, "child": [{ "type": "Image", "props": { "y": 13, "x": 2, "skin": "ui/common/touxiang.png", "renderType": "mask" }, "compId": 64 }] }] }, { "type": "Button", "props": { "var": "btnShowBuild", "top": 20, "stateNum": 2, "skin": "ui/common/jianzao.png", "right": 20 }, "compId": 61 }, { "type": "Box", "props": { "width": 230, "top": 0, "right": -230, "bottom": 0 }, "compId": 77, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "width": 230, "var": "boxBuild", "top": 0, "bottom": 0 }, "compId": 65, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ui/common/jianzao_bj.png", "sizeGrid": "10,10,10,10", "right": 0, "left": 0, "bottom": 0 }, "compId": 66 }, { "type": "Image", "props": { "y": 46, "width": 230, "skin": "ui/common/fengexian.png" }, "compId": 67 }, { "type": "Button", "props": { "y": 15, "x": 58, "width": 50, "var": "btnBuild", "skin": "ui/common/empty.png", "sizeGrid": "5,5,5,5", "labelSize": 18, "labelFont": "Microsoft YaHei", "labelColors": "#929292,#ffffff,#ffffff", "labelAlign": "center", "label": "建造", "height": 22 }, "compId": 68 }, { "type": "Button", "props": { "y": 16, "x": 134, "width": 50, "var": "btnDel", "skin": "ui/common/empty.png", "sizeGrid": "5,5,5,5", "labelSize": 18, "labelFont": "Microsoft YaHei", "labelColors": "#929292,#ffffff,#ffffff", "labelAlign": "center", "label": "擦除", "height": 20 }, "compId": 69 }, { "type": "Button", "props": { "y": 17, "x": 21, "var": "btnCloseBuild", "stateNum": 2, "skin": "ui/common/guanbi.png" }, "compId": 71 }, { "type": "List", "props": { "var": "listBuild", "top": 60, "spaceY": 20, "spaceX": 20, "right": 10, "repeatX": 3, "left": 10, "bottom": 20 }, "compId": 72, "child": [{ "type": "BuildEntityItem", "props": { "name": "render", "runtime": "editor.main.BuildEntityItemUI" }, "compId": 73 }] }] }] }], "loadList": ["ui/common/geren_bj.png", "ui/common/touxiang.png", "ui/common/lvdian.png", "ui/common/biaoqing.png", "icon/role_icon_1.png", "ui/common/jianzao.png", "ui/common/jianzao_bj.png", "ui/common/fengexian.png", "ui/common/empty.png", "ui/common/guanbi.png"], "loadList3D": [] };
	        main.MainPanelUI = MainPanelUI;
	        REG("editor.main.MainPanelUI", MainPanelUI);
	        class SendFaceTipUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(SendFaceTipUI.uiView);
	            }
	        }
	        SendFaceTipUI.uiView = { "type": "View", "props": { "width": 410, "height": 80 }, "compId": 2, "child": [{ "type": "Image", "props": { "width": 410, "top": 0, "skin": "ui/common/biaoqing_mianban.png", "sizeGrid": "20,20,20,20", "left": 0, "height": 80 }, "compId": 4 }, { "type": "List", "props": { "y": 3, "x": 5, "width": 353, "var": "list", "spaceX": 5, "repeatY": 1, "repeatX": 6, "height": 78 }, "compId": 5, "child": [{ "type": "SendItem", "props": { "name": "render", "runtime": "editor.share.SendItemUI" }, "compId": 6 }] }, { "type": "Button", "props": { "y": 6, "x": 362, "var": "btnClear", "stateNum": 1, "skin": "ui/common/qingchu.png" }, "compId": 7 }, { "type": "Image", "props": { "y": 79, "x": 196, "skin": "ui/common/duihua_sanjiao.png" }, "compId": 8 }, { "type": "Label", "props": { "y": 57, "x": 366, "width": 32, "var": "labNumber", "text": "清除", "height": 12, "font": "Microsoft YaHei", "color": "#ffffff", "align": "center" }, "compId": 9 }], "loadList": ["ui/common/biaoqing_mianban.png", "ui/common/qingchu.png", "ui/common/duihua_sanjiao.png"], "loadList3D": [] };
	        main.SendFaceTipUI = SendFaceTipUI;
	        REG("editor.main.SendFaceTipUI", SendFaceTipUI);
	    })(main = editor.main || (editor.main = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var map;
	    (function (map) {
	        class HeadTextInputUI extends Laya.Scene {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(HeadTextInputUI.uiView);
	            }
	        }
	        HeadTextInputUI.uiView = { "type": "Scene", "props": { "width": 300, "height": 50 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 3.5, "x": 0, "width": 301, "skin": "ui/common/shurukuang_bj.png", "sizeGrid": "20,20,20,20", "height": 43 }, "compId": 5, "child": [{ "type": "TextInput", "props": { "y": 12, "x": 14, "width": 247, "var": "mainText", "text": "你想对Ta说什么...", "prompt": "你想对Ta说什么...", "maxChars": 20, "height": 22, "fontSize": 18, "font": "Microsoft YaHei", "color": "#b9b9b9" }, "compId": 7 }, { "type": "Button", "props": { "y": 11, "x": 273, "var": "closeBtn", "stateNum": 2, "skin": "ui/common/dh_guanbi.png" }, "compId": 9 }] }], "loadList": ["ui/common/shurukuang_bj.png", "ui/common/dh_guanbi.png"], "loadList3D": [] };
	        map.HeadTextInputUI = HeadTextInputUI;
	        REG("editor.map.HeadTextInputUI", HeadTextInputUI);
	        class InteractTipUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(InteractTipUI.uiView);
	            }
	        }
	        InteractTipUI.uiView = { "type": "View", "props": { "width": 240, "height": 80 }, "compId": 2, "child": [{ "type": "Image", "props": { "width": 240, "top": 0, "skin": "ui/common/biaoqing_mianban.png", "sizeGrid": "20,20,20,20", "left": 0, "height": 80, "bottom": 0 }, "compId": 4 }, { "type": "List", "props": { "y": 3, "x": 5, "width": 235, "var": "list", "spaceX": 5, "repeatY": 1, "repeatX": 4, "height": 76 }, "compId": 5, "child": [{ "type": "SendItem", "props": { "name": "render", "runtime": "editor.share.SendItemUI" }, "compId": 10 }] }, { "type": "Image", "props": { "y": 0, "x": 106.5, "skin": "ui/common/duihua_sanjiao.png", "scaleY": -1 }, "compId": 8 }], "loadList": ["ui/common/biaoqing_mianban.png", "ui/common/duihua_sanjiao.png"], "loadList3D": [] };
	        map.InteractTipUI = InteractTipUI;
	        REG("editor.map.InteractTipUI", InteractTipUI);
	        class PerformTipUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(PerformTipUI.uiView);
	            }
	        }
	        PerformTipUI.uiView = { "type": "View", "props": { "width": 182, "height": 80 }, "compId": 2, "child": [{ "type": "Image", "props": { "width": 182, "top": 0, "skin": "ui/common/biaoqing_mianban.png", "sizeGrid": "20,20,20,20", "left": 0, "height": 80, "bottom": 0 }, "compId": 4 }, { "type": "List", "props": { "y": 3, "x": 5, "width": 178, "var": "list", "spaceX": 5, "repeatY": 1, "repeatX": 3, "height": 77 }, "compId": 5, "child": [{ "type": "SendItem", "props": { "name": "render", "runtime": "editor.share.SendItemUI" }, "compId": 10 }] }, { "type": "Image", "props": { "y": 0.5, "x": 77, "skin": "ui/common/duihua_sanjiao.png", "scaleY": -1 }, "compId": 8 }], "loadList": ["ui/common/biaoqing_mianban.png", "ui/common/duihua_sanjiao.png"], "loadList3D": [] };
	        map.PerformTipUI = PerformTipUI;
	        REG("editor.map.PerformTipUI", PerformTipUI);
	        class PlayerHeadUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(PlayerHeadUI.uiView);
	            }
	        }
	        PlayerHeadUI.uiView = { "type": "View", "props": { "width": 100, "height": 100 }, "compId": 2, "child": [{ "type": "Box", "props": { "width": 100, "var": "boxName", "height": 100 }, "compId": 5, "child": [{ "type": "Image", "props": { "y": 85, "x": 50, "width": 100, "var": "namebg", "skin": "ui/common/mingzi_bj.png", "sizeGrid": "10,20,10,20", "height": 28, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 13 }, { "type": "HBox", "props": { "y": 85, "x": 50, "height": 28, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 14, "child": [{ "type": "Label", "props": { "y": 14, "x": 12, "var": "labName", "text": "玩家名字", "fontSize": 14, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5 }, "compId": 4 }, { "type": "Image", "props": { "y": 14, "x": 0, "skin": "ui/common/lvdian.png", "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6 }] }] }, { "type": "Box", "props": { "y": -1, "x": 0, "width": 100, "var": "boxBehavior", "height": 50 }, "compId": 7, "child": [{ "type": "Image", "props": { "y": 3.5, "x": 18.5, "var": "imgSp", "skin": "ui/common/qipao.png" }, "compId": 10, "child": [{ "type": "Image", "props": { "y": 0, "x": 12, "var": "imgFace", "skin": "ui/dynamic/face_1.png" }, "compId": 3 }] }, { "type": "Sprite", "props": { "y": 21, "x": 50, "var": "labelSp" }, "compId": 11, "child": [{ "type": "Image", "props": { "width": 100, "var": "labelBg", "skin": "ui/common/duihua.png", "sizeGrid": "10,10,10,10", "height": 35, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 9 }, { "type": "Image", "props": { "y": 17, "x": 0, "var": "bgsanjiao", "skin": "ui/common/sanjiao.png", "anchorY": 0, "anchorX": 0.5 }, "compId": 12 }, { "type": "Label", "props": { "y": 1, "x": 1, "wordWrap": true, "width": 181, "var": "labelText", "valign": "middle", "text": "你好啊你好", "fontSize": 18, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5, "align": "center" }, "compId": 8 }] }] }, { "type": "Box", "props": { "y": 19, "x": 1, "width": 101, "visible": false, "var": "tipBox", "height": 37 }, "compId": 16, "child": [{ "type": "Image", "props": { "y": 18, "x": 45, "width": 211, "skin": "ui/common/mingzi_bj.png", "sizeGrid": "10,20,10,20", "height": 28, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 17 }, { "type": "Label", "props": { "y": 19, "x": 48, "text": "按E键可以和Ta互动哦~", "fontSize": 18, "font": "Microsoft YaHei", "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 }, "compId": 18 }] }], "loadList": ["ui/common/mingzi_bj.png", "ui/common/lvdian.png", "ui/common/qipao.png", "ui/dynamic/face_1.png", "ui/common/duihua.png", "ui/common/sanjiao.png"], "loadList3D": [] };
	        map.PlayerHeadUI = PlayerHeadUI;
	        REG("editor.map.PlayerHeadUI", PlayerHeadUI);
	    })(map = editor.map || (editor.map = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var miscell;
	    (function (miscell) {
	        class FloatMessageUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(FloatMessageUI.uiView);
	            }
	        }
	        FloatMessageUI.uiView = { "type": "View", "props": { "y": 20, "x": 140, "width": 280, "height": 40, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 1, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 280, "var": "imgBg", "skin": "ui/common/tishi_bj.png", "sizeGrid": "10,10,10,10", "height": 40 }, "compId": 5 }, { "type": "Image", "props": { "y": 10, "x": 19, "skin": "ui/common/tishi_ic.png" }, "compId": 6 }, { "type": "Label", "props": { "y": 12, "x": 50, "var": "label", "text": "标题", "name": "label", "height": 20, "fontSize": 18, "font": "Microsoft YaHei", "color": "#ffffff", "align": "left" }, "compId": 3 }], "loadList": ["ui/common/tishi_bj.png", "ui/common/tishi_ic.png"], "loadList3D": [] };
	        miscell.FloatMessageUI = FloatMessageUI;
	        REG("editor.miscell.FloatMessageUI", FloatMessageUI);
	        class HepTipUI extends Laya.Scene {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(HepTipUI.uiView);
	            }
	        }
	        HepTipUI.uiView = { "type": "Scene", "props": { "width": 500, "height": 800 }, "compId": 2, "child": [{ "type": "Image", "props": { "top": 0, "skin": "comp/image.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 4 }, { "type": "Label", "props": { "y": 430, "x": 200, "text": "帮助文本", "fontSize": 30, "color": "#000000" }, "compId": 3 }], "loadList": ["comp/image.png"], "loadList3D": [] };
	        miscell.HepTipUI = HepTipUI;
	        REG("editor.miscell.HepTipUI", HepTipUI);
	        class MaterialAddUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(MaterialAddUI.uiView);
	            }
	        }
	        MaterialAddUI.uiView = { "type": "View", "props": { "width": 60, "height": 30 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 5, "x": 2, "width": 20, "var": "imgIcon", "skin": "comp/image.png", "height": 20 }, "compId": 3 }, { "type": "Label", "props": { "y": 9, "x": 27, "var": "labValue", "text": "+200", "color": "#ffffff" }, "compId": 4 }], "loadList": ["comp/image.png"], "loadList3D": [] };
	        miscell.MaterialAddUI = MaterialAddUI;
	        REG("editor.miscell.MaterialAddUI", MaterialAddUI);
	        class PlayerMessageUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(PlayerMessageUI.uiView);
	            }
	        }
	        PlayerMessageUI.uiView = { "type": "View", "props": { "y": 20, "x": 146, "width": 292, "height": 40, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 292, "var": "imgBg", "skin": "ui/common/likaitishi_bj.png", "sizeGrid": "0,20,0,20", "height": 40 }, "compId": 4 }, { "type": "Image", "props": { "y": 6, "x": 12, "skin": "ui/common/touxiang.png", "name": "" }, "compId": 5 }, { "type": "Label", "props": { "y": 13, "x": 46, "var": "labMsg", "text": "玩家名称八个汉字离开了房间", "name": "", "fontSize": 18, "font": "Microsoft YaHei", "color": "#ffffff" }, "compId": 8 }, { "type": "Image", "props": { "y": -5, "x": 11, "width": 30, "var": "imgIcon", "skin": "icon/role_icon_1.png", "name": "", "height": 40 }, "compId": 10, "child": [{ "type": "Image", "props": { "y": 13, "x": 2, "skin": "ui/common/touxiang.png", "renderType": "mask" }, "compId": 11 }] }], "loadList": ["ui/common/likaitishi_bj.png", "ui/common/touxiang.png", "icon/role_icon_1.png"], "loadList3D": [] };
	        miscell.PlayerMessageUI = PlayerMessageUI;
	        REG("editor.miscell.PlayerMessageUI", PlayerMessageUI);
	    })(miscell = editor.miscell || (editor.miscell = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var set;
	    (function (set) {
	        class SetPanelUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(SetPanelUI.uiView);
	            }
	        }
	        SetPanelUI.uiView = { "type": "View", "props": { "width": 610, "height": 900 }, "compId": 2, "child": [{ "type": "PopupPanelBack", "props": { "y": 0, "x": 0, "runtime": "editor.share.PopupPanelBackUI" }, "compId": 31 }, { "type": "Label", "props": { "y": 92, "x": 15, "text": "账号信息", "styleSkin": "comp/label.png", "fontSize": 28, "font": "SimHei", "color": "#ffffff" }, "compId": 5 }, { "type": "Label", "props": { "y": 173, "x": 91, "var": "labUId", "text": "1234567890", "styleSkin": "comp/label.png", "fontSize": 26, "font": "SimHei", "color": "#ffffff", "align": "left" }, "compId": 6 }, { "type": "Button", "props": { "y": 163, "x": 269, "var": "btnCopy", "skin": "comp/button.png", "labelSize": 26, "labelFont": "SimHei", "label": "复制" }, "compId": 7 }, { "type": "Button", "props": { "y": 107, "x": 456, "var": "btnBlack", "skin": "comp/button.png", "labelSize": 25, "labelFont": "SimHei", "label": "黑名单" }, "compId": 8 }, { "type": "Label", "props": { "y": 215, "x": 85, "var": "labQu", "text": "发家致富22服", "styleSkin": "comp/label.png", "fontSize": 26, "font": "SimHei", "color": "#ffffff", "align": "left" }, "compId": 9 }, { "type": "Label", "props": { "y": 324, "x": 15, "text": "游戏设置", "styleSkin": "comp/label.png", "fontSize": 28, "color": "#ffffff" }, "compId": 10 }, { "type": "Box", "props": { "y": 363, "x": 45, "var": "soundBox" }, "compId": 17, "child": [{ "type": "Image", "props": { "y": 0, "x": 55, "skin": "comp/img_bg2.png", "sizeGrid": "10,28,10,21" }, "compId": 11 }, { "type": "Button", "props": { "y": 0, "x": 119, "width": 64, "var": "btnOpenSound", "skin": "comp/button.png", "labelSize": 22, "labelFont": "SimHei", "label": "关", "height": 32 }, "compId": 12 }, { "type": "Button", "props": { "y": 0, "x": 55, "width": 64, "var": "btnGuanSound", "skin": "comp/button.png", "labelSize": 22, "labelFont": "SimHei", "label": "开", "height": 32 }, "compId": 13 }, { "type": "Label", "props": { "y": 3, "var": "labSound", "text": "音效", "styleSkin": "comp/label.png", "fontSize": 26, "font": "SimHei", "color": "#ffffff" }, "compId": 15 }] }, { "type": "TextInput", "props": { "y": 505, "x": 136, "var": "inputDuiHuanMa", "skin": "comp/textinput.png", "scaleY": 2, "scaleX": 2, "prompt": "请输入兑换码", "fontSize": 20, "font": "SimHei" }, "compId": 19 }, { "type": "Button", "props": { "y": 503, "x": 407, "var": "btnDuihuan", "skin": "comp/button.png", "labelSize": 28, "labelFont": "SimHei", "label": "兑换" }, "compId": 20 }, { "type": "Button", "props": { "y": 586, "x": 241, "var": "btnSwitchAccount", "skin": "comp/button.png", "labelSize": 26, "labelFont": "SimHei", "label": "切换账号" }, "compId": 22 }, { "type": "Box", "props": { "y": 361, "x": 352, "var": "musicBox" }, "compId": 25, "child": [{ "type": "Image", "props": { "y": 0, "x": 55, "skin": "comp/img_bg2.png", "sizeGrid": "10,28,10,21" }, "compId": 27 }, { "type": "Button", "props": { "y": 0, "x": 119, "width": 64, "var": "btnOpenMusic", "skin": "comp/button.png", "labelSize": 22, "labelFont": "SimHei", "label": "关", "height": 32 }, "compId": 28 }, { "type": "Button", "props": { "y": 0, "x": 55, "width": 64, "var": "btnGuanMusic", "skin": "comp/button.png", "labelSize": 22, "labelFont": "SimHei", "label": "开", "height": 32 }, "compId": 29 }, { "type": "Label", "props": { "y": 3, "var": "labMusic", "text": "音乐", "styleSkin": "comp/label.png", "fontSize": 26, "font": "SimHei", "color": "#ffffff" }, "compId": 30 }] }, { "type": "Label", "props": { "y": 173, "x": 15, "text": "编号：", "styleSkin": "comp/label.png", "fontSize": 26, "font": "SimHei", "color": "#ffffff", "align": "right" }, "compId": 36 }, { "type": "Label", "props": { "y": 215, "x": 15, "text": "区服：", "styleSkin": "comp/label.png", "fontSize": 26, "font": "SimHei", "color": "#ffffff", "align": "right" }, "compId": 37 }], "loadList": ["comp/label.png", "comp/button.png", "comp/img_bg2.png", "comp/textinput.png"], "loadList3D": [] };
	        set.SetPanelUI = SetPanelUI;
	        REG("editor.set.SetPanelUI", SetPanelUI);
	    })(set = editor.set || (editor.set = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var share;
	    (function (share) {
	        class GameIconUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(GameIconUI.uiView);
	            }
	        }
	        GameIconUI.uiView = { "type": "View", "props": { "width": 100, "runtime": "views/com/GameIcon.ts", "height": 100 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": -3, "x": -2, "var": "imgSelected", "skin": "comp/image.png" }, "compId": 7 }, { "type": "Image", "props": { "y": -1, "x": -2, "width": 110, "var": "imgQuality", "skin": "ui/dynamic/quality_0.png", "height": 110 }, "compId": 6 }, { "type": "Image", "props": { "y": 2, "x": 3, "width": 100, "var": "imgIcon", "skin": "icon/item001.png", "height": 100 }, "compId": 3 }, { "type": "Label", "props": { "y": 107, "x": 8, "width": 97, "var": "labelName", "text": "道具名称", "height": 12, "color": "#ffffff", "align": "center" }, "compId": 4 }, { "type": "Label", "props": { "y": 85, "x": 5, "width": 97, "var": "labelNum", "text": "200", "height": 12, "color": "#fd0051", "borderColor": "#0d0000", "align": "right" }, "compId": 5 }], "loadList": ["comp/image.png", "ui/dynamic/quality_0.png", "icon/item001.png"], "loadList3D": [] };
	        share.GameIconUI = GameIconUI;
	        REG("editor.share.GameIconUI", GameIconUI);
	        class PopupPanelBackUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(PopupPanelBackUI.uiView);
	            }
	        }
	        PopupPanelBackUI.uiView = { "type": "View", "props": { "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 1, "child": [{ "type": "Image", "props": { "var": "image_bg", "top": 0, "skin": "ui/common/ditu_3.png", "sizeGrid": "58,0,13,0", "right": 0, "name": "image_bg", "left": 0, "bottom": 0 }, "compId": 2 }, { "type": "Button", "props": { "var": "btn_close", "top": 3, "stateNum": 1, "skin": "ui/common/anniu_guanclose.png", "right": 3, "name": "btn_close" }, "compId": 3 }, { "type": "PopupPanelTitle", "props": { "var": "panel_title", "top": 8, "name": "panel_title", "centerX": 0, "runtime": "editor.share.PopupPanelTitleUI" }, "compId": 5 }], "loadList": ["ui/common/ditu_3.png", "ui/common/anniu_guanclose.png"], "loadList3D": [] };
	        share.PopupPanelBackUI = PopupPanelBackUI;
	        REG("editor.share.PopupPanelBackUI", PopupPanelBackUI);
	        class PopupPanelTitleUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(PopupPanelTitleUI.uiView);
	            }
	        }
	        PopupPanelTitleUI.uiView = { "type": "View", "props": { "width": 200, "height": 36 }, "compId": 1, "child": [{ "type": "Label", "props": { "y": 6, "var": "label_title", "text": "标题", "fontSize": 24, "font": "SimHei", "color": "#efdba4", "centerX": 0, "align": "center" }, "compId": 3 }, { "type": "Image", "props": { "visible": true, "var": "img_title", "centerY": 0, "centerX": 0 }, "compId": 4 }], "loadList": [], "loadList3D": [] };
	        share.PopupPanelTitleUI = PopupPanelTitleUI;
	        REG("editor.share.PopupPanelTitleUI", PopupPanelTitleUI);
	        class SendItemUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(SendItemUI.uiView);
	            }
	        }
	        SendItemUI.uiView = { "type": "View", "props": { "width": 54, "height": 72 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": -2, "x": 0, "var": "imgOver", "skin": "ui/common/biaoqing_bj.png" }, "compId": 3 }, { "type": "Image", "props": { "y": 4, "x": 7, "skin": "ui/common/biaoqing_bjy.png" }, "compId": 5 }, { "type": "Image", "props": { "y": 3, "x": 7, "var": "img", "skin": "ui/dynamic/face_1.png" }, "compId": 6 }, { "type": "Label", "props": { "y": 54, "x": 12, "width": 32, "var": "labNumber", "text": "0", "height": 12, "font": "Microsoft YaHei", "color": "#ffffff", "align": "center" }, "compId": 7 }], "loadList": ["ui/common/biaoqing_bj.png", "ui/common/biaoqing_bjy.png", "ui/dynamic/face_1.png"], "loadList3D": [] };
	        share.SendItemUI = SendItemUI;
	        REG("editor.share.SendItemUI", SendItemUI);
	    })(share = editor.share || (editor.share = {}));
	})(editor || (editor = {}));
	(function (editor) {
	    var test;
	    (function (test) {
	        class GMPanelUI extends Laya.View {
	            constructor() { super(); }
	            createChildren() {
	                super.createChildren();
	                this.createView(GMPanelUI.uiView);
	            }
	        }
	        GMPanelUI.uiView = { "type": "View", "props": { "width": 520, "height": 800 }, "compId": 1, "child": [{ "type": "PopupPanelBack", "props": { "y": 0, "x": 0, "top": 0, "bottom": 0, "runtime": "editor.share.PopupPanelBackUI" }, "compId": 23 }, { "type": "Button", "props": { "y": 741, "x": 127, "width": 212, "var": "send", "stateNum": 1, "skin": "ui/common/anniu_yes.png", "sizeGrid": "0,24,0,24", "scaleY": 1, "scaleX": 1, "labelSize": 28, "labelPadding": "-1", "labelColors": "#fff3d9,#fff3d9", "label": "发送", "height": 59, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 10 }, { "type": "TextArea", "props": { "y": 61, "x": 21, "wordWrap": true, "width": 479, "var": "inputText", "valign": "top", "skin": "ui/common/comp_img_shuzhikuang.png", "sizeGrid": "10,10,10,10", "scaleY": 1, "scaleX": 1, "prompt": "请输入账号", "height": 627, "fontSize": 26, "color": "#b5c1df", "align": "left" }, "compId": 16 }, { "type": "Button", "props": { "y": 741, "x": 393, "width": 212, "var": "btnBack", "stateNum": 1, "skin": "ui/common/anniu_bu2.png", "sizeGrid": "0,24,0,24", "scaleY": 1, "scaleX": 1, "labelSize": 28, "labelPadding": "-1", "labelColors": "#fff3d9,#fff3d9", "label": "返回", "height": 59, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 19 }], "loadList": ["ui/common/anniu_yes.png", "ui/common/comp_img_shuzhikuang.png", "ui/common/anniu_bu2.png"], "loadList3D": [] };
	        test.GMPanelUI = GMPanelUI;
	        REG("editor.test.GMPanelUI", GMPanelUI);
	    })(test = editor.test || (editor.test = {}));
	})(editor || (editor = {}));

	var UIComponent = Laya.UIComponent;
	var Event$1 = Laya.Event;
	class Container extends UIComponent {
	    constructor() {
	        super();
	        this.on(Event$1.UNDISPLAY, this, this.onUnDisplay);
	        this.on(Event$1.DISPLAY, this, this.onDisplay);
	    }
	    onUnDisplay() {
	        this.$onRemove();
	        this.onRemove();
	        this.$onRemoved();
	        this.onRemoved();
	    }
	    onDisplay() {
	        this.$onAdd();
	        this.onAdd();
	        this.$onAdded();
	        this.onAdded();
	    }
	    $onAdd() {
	    }
	    onAdd() {
	    }
	    onRemove() {
	    }
	    $onAdded() {
	    }
	    onAdded() {
	    }
	    $onRemove() {
	    }
	    $onRemoved() {
	    }
	    onRemoved() {
	    }
	}

	class UIBase extends Container {
	    constructor() {
	        super();
	        this.created = false;
	    }
	    onStageResize() {
	        if (!this.created)
	            return;
	        this.layoutUI();
	        this.$onStageResized();
	        this.onStageResized();
	    }
	    onStageResized() {
	    }
	    $onStageResized() {
	    }
	    layoutUI() {
	    }
	    init(params = null) {
	        this.params = params;
	        if (!this.created) {
	            this.$onCreate();
	            this.onCreate();
	            this.$onCreated();
	            this.onCreated();
	            this.created = true;
	        }
	    }
	    $onCreated() {
	    }
	    onCreated() {
	    }
	    $onCreate() {
	        if (this.viewClass) {
	            this.view = new this.viewClass();
	            this.addChild(this.view);
	        }
	    }
	    onCreate() {
	    }
	    $onAdded() {
	        this.onStageResize();
	    }
	    get opened() {
	        return this.parent != null;
	    }
	}

	var Sprite$1 = Laya.Sprite;
	var List = Laya.List;
	var Tab = Laya.Tab;
	class PanelBase extends UIBase {
	    constructor() {
	        super();
	        this.id = "";
	    }
	    getSpriteByName(name) {
	        var reg = /(.+)_(\d+)/;
	        if (reg.test(name)) {
	            var result = name.match(reg);
	            var sp = this[result[1]];
	            var item = null;
	            var index = parseFloat(result[2]);
	            if (sp instanceof List) {
	                item = sp.getCell(index);
	            }
	            else if (sp instanceof Tab) {
	                item = sp.items[index];
	            }
	            if (item) {
	                return item;
	            }
	        }
	        if (this[name] instanceof Sprite$1) {
	            return this[name];
	        }
	        if (this.getChildByName(name) instanceof Sprite$1) {
	            return this.getChildByName(name);
	        }
	        return null;
	    }
	}

	var Loader$3 = Laya.Loader;
	class PathManager {
	    static getCompPath(name) {
	        return "comp/" + name + ".png";
	    }
	    static getCommonPath(name) {
	        return "ui/common/" + name + ".png";
	    }
	    static getIconsPath(name) {
	        return "icon/" + name + ".png";
	    }
	    static getDynamicPath(name) {
	        return "ui/dynamic/" + name + ".png";
	    }
	    static getAnimationTexturePath(name) {
	        return "texture/" + name + ".atlas";
	    }
	    static getAnimiationDataPath(name) {
	        return "animations/" + name + ".ani";
	    }
	    static getLiZiEffectPath(name) {
	        return "particle/" + name + ".part";
	    }
	    static getSpinePath(name) {
	        return "spines/" + name + ".sk";
	    }
	    static getSoundPath(name) {
	        return "sound/" + name + ".mp3";
	    }
	    static getMusicPath(name) {
	        return "music/" + name + ".mp3";
	    }
	    static getMapPath(name) {
	        return "map/" + name + ".json";
	    }
	    static getUIPath(folder, name) {
	        return "ui/" + folder + "/" + name + ".png";
	    }
	    static getLoadUrls(arr, type) {
	        var list = [];
	        for (var i = 0; i < arr.length; i++) {
	            list.push({ url: arr[i], type: type });
	        }
	        return list;
	    }
	    static getAnimationLoadUrls(resID) {
	        var list = [];
	        list.push({ url: PathManager.getAnimiationDataPath(resID), type: Loader$3.JSON });
	        list.push({ url: PathManager.getAnimationTexturePath(resID), type: Loader$3.ATLAS });
	        return list;
	    }
	}

	var Byte = Laya.Byte;
	var Point = Laya.Point;
	class StringUtils {
	    static format(str, params = null, check = null) {
	        if (params) {
	            for (var i = 0; i < params.length; i++) {
	                var value = params[i];
	                if (check) {
	                    str = check(str, i, value);
	                }
	                var pattern = "\\{" + i + "\\}";
	                var reg = new RegExp(pattern, "g");
	                str = str.replace(reg, params[i]);
	            }
	        }
	        return str;
	    }
	    static splitToNumber(str, split_cha) {
	        str = String(str);
	        var list = [];
	        if (!str)
	            return list;
	        var arr = str.split(split_cha);
	        for (var i = 0; i < arr.length; i++) {
	            list[i] = Number(arr[i]);
	        }
	        return list;
	    }
	    static getByteLen(str) {
	        if (str == null)
	            return 0;
	        var len = 0;
	        for (var i = 0; i < str.length; i++) {
	            var char = str.charAt(i);
	            var byte = new Byte();
	            byte.writeUTFBytes(char);
	            if (byte.length > 1) {
	                len += 2;
	            }
	            else {
	                len += 1;
	            }
	        }
	        return len;
	    }
	    static repeat(str, times) {
	        var result = "";
	        for (var i = 0; i < times; i++) {
	            result += str;
	        }
	        return result;
	    }
	    static trim(str) {
	        return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
	    }
	    static fill(str, len, sign, fillEnd = true) {
	        if (str.length >= len) {
	            return str;
	        }
	        var appendLen = len - str.length;
	        var repeatTimes = Math.ceil(appendLen / sign.length);
	        var appendStr = StringUtils.repeat(sign, repeatTimes);
	        appendStr = appendStr.slice(0, appendLen);
	        if (fillEnd) {
	            return str + appendStr;
	        }
	        else {
	            return appendStr + str;
	        }
	    }
	    static transformCoord(coord) {
	        var point = new Point();
	        if (!coord) {
	            return point;
	        }
	        var arr = StringUtils.splitToNumber(coord, ",");
	        point.x = arr[0];
	        point.y = arr[1];
	        return point;
	    }
	}

	class ConfigKey {
	}
	ConfigKey.item = "item";
	ConfigKey.dictionary = "dictionary";
	ConfigKey.shielded = "shielded";
	ConfigKey.system = "system";
	ConfigKey.func_open = "func_open";
	ConfigKey.map = "map";
	ConfigKey.role = "role";
	ConfigKey.entity = "entity";
	ConfigKey.face = "face";
	ConfigKey.interact = "interact";
	ConfigKey.perform = "perform";

	class ConfigBase {
	    analyze(data) {
	    }
	}

	class HashConfig extends ConfigBase {
	    constructor() {
	        super();
	        this._dic = {};
	    }
	    analyze(data) {
	        for (var key in data) {
	            this._dic[key] = data[key];
	        }
	    }
	    getDic() {
	        return this._dic;
	    }
	    getConfig(key) {
	        return this._dic[key];
	    }
	}

	class DictionaryTable extends HashConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.dictionary, this);
	    }
	    static get ins() {
	        return DictionaryTable._ins = DictionaryTable._ins || new DictionaryTable();
	    }
	}

	class LangUtils {
	    static getLabel(key, appendSign = true) {
	        return LangUtils.getLang(key) + (appendSign ? ":" : "");
	    }
	    static getLang(key, params = null) {
	        var check = function (str, index, value) {
	            return str;
	        };
	        var lang = DictionaryTable.ins.getConfig(key);
	        if (!lang) {
	            lang = key;
	        }
	        return StringUtils.format(lang, params, check);
	    }
	    static getListLang(keys) {
	        var list = [];
	        for (var i = 0; i < keys.length; i++) {
	            list.push(LangUtils.getLang(keys[i]));
	        }
	        return list;
	    }
	    static getTabLabels(keys) {
	        return LangUtils.getListLang(keys).join(",");
	    }
	}

	var Image = Laya.Image;
	var Event$2 = Laya.Event;
	var Tween = Laya.Tween;
	var Ease = Laya.Ease;
	class PopupPanel extends PanelBase {
	    constructor() {
	        super();
	        this.viewIsFull = false;
	        this.tweenFlag = true;
	        this.clickMaskClose = true;
	        this.createMask();
	    }
	    createMask() {
	        this.uiMask = new Image();
	        this.uiMask.name = "#mask#";
	        this.addChild(this.uiMask);
	        this.uiMask.alpha = 0.7;
	        this.uiMask.mouseEnabled = true;
	        this.uiMask.hitTestPrior = true;
	    }
	    setTitle(str, isImg = false) {
	        var title = this.findTitle(this.view);
	        if (title) {
	            if (isImg) {
	                title.img_title.visible = true;
	                title.label_title.visible = false;
	                title.img_title.skin = PathManager.getDynamicPath(str);
	            }
	            else {
	                title.img_title.visible = false;
	                title.label_title.visible = true;
	                title.label_title.text = str;
	            }
	        }
	    }
	    findTitle(container) {
	        for (var i = 0; i < container.numChildren; i++) {
	            var child = container.getChildAt(i);
	            if (child) {
	                if (child.name == "panel_title") {
	                    return child;
	                }
	                else if (child.numChildren > 0) {
	                    return this.findTitle(child);
	                }
	            }
	        }
	        return null;
	    }
	    layoutUI() {
	        this.width = Laya.stage.width;
	        this.height = Laya.stage.height;
	        this.view.anchorX = 0.5;
	        this.view.anchorY = 0.5;
	        this.view.x = this.width / 2;
	        this.view.y = this.height / 2;
	        if (this.viewIsFull) {
	            this.view.width = this.width;
	            this.view.height = this.height;
	        }
	        this.uiMask.graphics.clear();
	        this.uiMask.graphics.drawRect(0, 0, this.width, this.height, "#000000");
	        this.uiMask.width = this.width;
	        this.uiMask.height = this.height;
	    }
	    $onAdded() {
	        super.$onAdded();
	        this.on(Event$2.CLICK, this, this.onClick_bg);
	        this.setTitle(LangUtils.getLang(this.id + "_title"));
	        this.playTween();
	    }
	    playTween() {
	        if (!this.tweenFlag)
	            return;
	        this.view.scaleX = 0.95;
	        this.view.scaleY = 0.95;
	        Tween.to(this.view, { scaleX: 1, scaleY: 1 }, 100, Ease.backOut);
	    }
	    $onRemove() {
	        super.$onRemove();
	        this.off(Event$2.CLICK, this, this.onClick_bg);
	    }
	    onClick_bg(e) {
	        if (e.target.name == "btn_close") {
	            this.btnClickClose();
	        }
	        else {
	            if (e.target == this.uiMask && this.clickMaskClose) {
	                this.btnClickClose();
	            }
	        }
	    }
	    btnClickClose() {
	        this.closeSelf();
	    }
	    closeSelf() {
	        PanelManager.ins.closePanel(this);
	    }
	    getSpriteByName(name) {
	        if (name === 'btn_close') {
	            var sp = this._getPanelBgBtn(this);
	            if (sp) {
	                return sp.getChildByName(name);
	            }
	        }
	        return super.getSpriteByName(name);
	    }
	    _getPanelBgBtn(sp) {
	        if (/PopupPanelBack/.test(sp['__className'])) {
	            return sp;
	        }
	        var len = sp["_childs"].length;
	        if (len) {
	            for (var i = 0; i < len; ++i) {
	                var child = sp["_childs"][i];
	                var target = this._getPanelBgBtn(child);
	                if (target) {
	                    return target;
	                }
	            }
	        }
	        return null;
	    }
	}

	class ShieldedTable extends HashConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.shielded, this);
	    }
	    static get ins() {
	        return ShieldedTable._ins = ShieldedTable._ins || new ShieldedTable();
	    }
	}

	class LangKey {
	}
	LangKey.network_error = "network_error";
	LangKey.alert_title = "alert_title";
	LangKey.cancelText = "cancelText";
	LangKey.yesText = "yesText";
	LangKey.copy_success = "copy_success";
	LangKey.copy_failed = "copy_failed";
	LangKey.number_y = "number_y";
	LangKey.number_kw = "number_kw";
	LangKey.number_w = "number_w";
	LangKey.uname_canot_empty = "uname_canot_empty";
	LangKey.has_filter_words = "has_filter_words";
	LangKey.uname_length_canot_pass = "uname_length_canot_pass";

	var Browser$1 = Laya.Browser;
	var Handler = Laya.Handler;
	class GameUtils {
	    static stringIsEmpty(str) {
	        var b = false;
	        if (GameUtils.objectIsEmpty(str) || str == "" || str == "undefined" || str == "null") {
	            b = true;
	        }
	        return b;
	    }
	    static objectIsEmpty(obj) {
	        if (!obj || obj == undefined || obj == null) {
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    static runCallBack(callBack, ...params) {
	        if (callBack instanceof Handler) {
	            return callBack.runWith(params);
	        }
	        else {
	            return callBack.apply(null, params);
	        }
	    }
	    static doCopy(str) {
	        try {
	            var text = Browser$1.document.createElement("textarea");
	            text.value = str;
	            Browser$1.document.body.appendChild(text);
	            text.select();
	            var success = Browser$1.document.execCommand('copy');
	            Browser$1.document.body.removeChild(text);
	            if (success) {
	                FloatMessage.showMessage(LangUtils.getLang(LangKey.copy_success));
	            }
	            else {
	                FloatMessage.showMessage(LangUtils.getLang(LangKey.copy_failed));
	            }
	        }
	        catch (e) {
	            FloatMessage.showMessage(LangUtils.getLang(LangKey.copy_failed));
	        }
	    }
	    static replaceFilterWords(str, replaceChar = "*") {
	        if (!str)
	            return "";
	        var words = ShieldedTable.ins.getDic();
	        for (var key in words) {
	            var word = words[key];
	            if (!GameUtils.stringIsEmpty(word)) {
	                var n = StringUtils.getByteLen(word);
	                var newWord = StringUtils.repeat(replaceChar, n);
	                while (str.indexOf(word) >= 0) {
	                    str = str.replace(word, newWord);
	                }
	            }
	        }
	        return str;
	    }
	    static getUrlVars() {
	        var dic = {};
	        var location = Browser$1.window.location;
	        if (location && location.search) {
	            var search = location.search;
	            search = search.replace("?", "");
	            var arr = search.split("&");
	            for (var i = 0; i < arr.length; i++) {
	                var item = arr[i];
	                var temp = item.split("=");
	                var key = temp[0];
	                var value = temp[1];
	                value = value == "true" ? true : value;
	                value = value == "false" ? false : value;
	                dic[key] = value;
	            }
	        }
	        return dic;
	    }
	    static getClientNowTime() {
	        return Browser$1.now();
	    }
	    static checkMaterialType(id) {
	        if (id.indexOf(MaterialType.Item) >= 0) {
	            return MaterialType.Item;
	        }
	        else {
	            return MaterialType.Unknown;
	        }
	    }
	    static checkValueInEnum(enumClass, value) {
	        for (var key in enumClass) {
	            if (enumClass[key] === value) {
	                return true;
	            }
	        }
	        return false;
	    }
	    static formatNum(value, sign = false) {
	        var format = "";
	        var num = Math.abs(value);
	        var wan = Math.pow(10, 4);
	        var qian_wan = Math.pow(10, 7);
	        var yi = Math.pow(10, 8);
	        if (num >= yi) {
	            format = Math.floor(num / yi) + LangUtils.getLang(LangKey.number_y);
	        }
	        else if (num >= qian_wan) {
	            format = Math.floor(num / qian_wan) + LangUtils.getLang(LangKey.number_kw);
	        }
	        else if (num >= wan * 10) {
	            format = Math.floor(num / wan) + LangUtils.getLang(LangKey.number_w);
	        }
	        else {
	            format = num + "";
	        }
	        if (sign) {
	            format = (value >= 0 ? "+" : "-") + format;
	        }
	        else {
	            if (value < 0) {
	                format = "-" + format;
	            }
	        }
	        return format;
	    }
	    static formatPercent(value, sign = false, decimal = 0, round = false, align = false) {
	        var format = "";
	        if (round) {
	            value = Math.round(value * Math.pow(10, 2 + decimal)) / Math.pow(10, decimal);
	        }
	        else {
	            value = Math.floor(value * Math.pow(10, 2 + decimal)) / Math.pow(10, decimal);
	        }
	        if (align) {
	            format = value.toFixed(decimal);
	        }
	        else {
	            format = value + "";
	        }
	        if (sign) {
	            if (value >= 0) {
	                format = "+" + format;
	            }
	        }
	        format += "%";
	        return format;
	    }
	    static checkKeyCodeMatch(keyCode, keyCodes) {
	        if (!keyCodes) {
	            return false;
	        }
	        var arr = StringUtils.splitToNumber(keyCodes, ",");
	        return arr.indexOf(keyCode) >= 0;
	    }
	}

	var Ease$1 = Laya.Ease;
	var Handler$1 = Laya.Handler;
	var Tween$1 = Laya.Tween;
	var FloatMessageUI = editor.miscell.FloatMessageUI;
	class FloatMsgVo {
	    constructor() {
	        this.msg = "";
	        this.liveTime = 0;
	        this.time = 0;
	    }
	}
	class FloatMessage {
	    static clearAll() {
	        if (FloatMessage.messageUI) {
	            FloatMessage.messageUI.removeSelf();
	        }
	        FloatMessage.list.length = 0;
	        FloatMessage.playing = false;
	    }
	    static findSameMsg(msg) {
	        for (var i = 0; i < FloatMessage.list.length; i++) {
	            var floatMsgVo = FloatMessage.list[i];
	            if (floatMsgVo.msg == msg) {
	                return true;
	            }
	        }
	        return false;
	    }
	    static floatNext() {
	        if (FloatMessage.list.length == 0) {
	            FloatMessage.clearAll();
	            return;
	        }
	        FloatMessage.playing = true;
	        var floatMsgVo = FloatMessage.list.shift();
	        if (!FloatMessage.messageUI) {
	            FloatMessage.messageUI = new FloatMessageUI();
	        }
	        if (!FloatMessage.messageUI.parent) {
	            LayerManager.ins.topUILayer.addChild(FloatMessage.messageUI);
	        }
	        FloatMessage.messageUI.label.text = floatMsgVo.msg;
	        FloatMessage.messageUI.width = FloatMessage.messageUI.imgBg.width = FloatMessage.messageUI.label.textField.textWidth + 70;
	        FloatMessage.messageUI.x = Laya.stage.width / 2;
	        FloatMessage.messageUI.y = 180;
	        FloatMessage.messageUI.alpha = 0;
	        var showComplete = function () {
	            Tween$1.to(FloatMessage.messageUI, { alpha: 0, y: FloatMessage.messageUI.y - 50 }, 200, Ease$1.sineOut, Handler$1.create(FloatMessage, hideComplete), floatMsgVo.liveTime);
	        };
	        var hideComplete = function () {
	            FloatMessage.floatNext();
	        };
	        Tween$1.to(FloatMessage.messageUI, { alpha: 1, y: FloatMessage.messageUI.y - 50 }, 200, Ease$1.sineOut, Handler$1.create(FloatMessage, showComplete));
	    }
	    static showMessage(msg, liveTime = 1500) {
	        if (GameUtils.stringIsEmpty(msg)) {
	            return;
	        }
	        if (FloatMessage.findSameMsg(msg)) {
	            return;
	        }
	        var floatMsgVo = new FloatMsgVo();
	        floatMsgVo.msg = msg;
	        floatMsgVo.liveTime = liveTime;
	        floatMsgVo.time = Laya.Browser.now();
	        FloatMessage.list.push(floatMsgVo);
	        if (!FloatMessage.playing) {
	            FloatMessage.floatNext();
	        }
	    }
	}
	FloatMessage.list = [];
	FloatMessage.playing = false;

	var Event$3 = Laya.Event;
	class GMPanel extends PopupPanel {
	    constructor() {
	        super();
	        this.viewClass = editor.test.GMPanelUI;
	        this.keyMap = {};
	        this.keyMap = {};
	        this.addKey(13, this.keyEnter);
	    }
	    onBack() {
	        this.closeSelf();
	    }
	    onAdd() {
	        this.view.btnBack.on(Event$3.CLICK, this, this.onBack);
	        this.view.send.on(Event$3.CLICK, this, this.onBtnSend);
	        Laya.stage.on(Event$3.KEY_PRESS, this, this.keyPress);
	    }
	    onRemove() {
	        this.view.btnBack.off(Event$3.CLICK, this, this.onBack);
	        this.view.send.off(Event$3.CLICK, this, this.onBtnSend);
	        Laya.stage.off(Event$3.KEY_PRESS, this, this.keyPress);
	    }
	    addKey(keyCode, callback) {
	        if (this.keyMap[keyCode] != null) {
	            Logger.log("use the same key:" + keyCode);
	        }
	        this.keyMap[keyCode] = callback;
	    }
	    keyPress(e) {
	        console.log("键盘事件=keyCode=" + e.keyCode);
	        var func = this.keyMap[e.keyCode];
	        if (func) {
	            func.call(this);
	            this.view.inputText.focus = false;
	        }
	    }
	    onBtnSend() {
	        var text = this.view.inputText.text;
	        if (!text) {
	            FloatMessage.showMessage("命令不能为空");
	            return;
	        }
	    }
	    keyEnter() {
	        this.onBtnSend();
	    }
	}

	var Event$4 = Laya.Event;
	class AlertPanel extends PopupPanel {
	    constructor() {
	        super();
	        this.viewClass = editor.alert.AlertPanelUI;
	    }
	    onCreate() {
	        this.btnCancellX = this.view.btnCancel.x;
	        this.btnYesX = this.view.btnYes.x;
	    }
	    onAdd() {
	        this.alertVo = this.params;
	        this.setTitle(this.alertVo.title);
	        this.view.btnCancel.label = this.alertVo.cancelText;
	        this.view.btnYes.label = this.alertVo.yesText;
	        this.view.labelDesc.text = this.alertVo.desc;
	        if (this.alertVo.onlyYes) {
	            this.view.btnCancel.visible = false;
	            this.view.btnYes.visible = true;
	            this.view.btnYes.x = (this.btnYesX - this.btnCancellX) / 2 + this.btnCancellX;
	        }
	        else {
	            this.view.btnCancel.visible = true;
	            this.view.btnYes.visible = true;
	            this.view.btnCancel.x = this.btnCancellX;
	            this.view.btnYes.x = this.btnYesX;
	        }
	        var btnClose = this.view.panelBg.btn_close;
	        if (this.alertVo.canClose) {
	            btnClose.visible = true;
	        }
	        else {
	            btnClose.visible = false;
	        }
	        this.view.btnCancel.on(Event$4.CLICK, this, this.onCancelClick);
	        this.view.btnYes.on(Event$4.CLICK, this, this.onYesClick);
	    }
	    onClick_bg(e) {
	        if (!this.alertVo.canClose) {
	            return;
	        }
	        super.onClick_bg(e);
	    }
	    onRemove() {
	        if (this.alertVo.closeCallBack) {
	            GameUtils.runCallBack(this.alertVo.closeCallBack);
	        }
	        this.alertVo = null;
	        this.view.btnCancel.off(Event$4.CLICK, this, this.onCancelClick);
	        this.view.btnYes.off(Event$4.CLICK, this, this.onYesClick);
	    }
	    onCancelClick() {
	        if (this.alertVo.cancelCallBack) {
	            GameUtils.runCallBack(this.alertVo.cancelCallBack);
	        }
	        this.closeSelf();
	    }
	    onYesClick() {
	        if (this.alertVo.yesCallBack) {
	            GameUtils.runCallBack(this.alertVo.yesCallBack);
	        }
	        this.closeSelf();
	    }
	}

	class TipUIKey {
	}
	TipUIKey.HelpTip = "HelpTip";
	TipUIKey.SendFaceTip = "SendFaceTip";
	TipUIKey.PerformTip = "PerformTip";
	TipUIKey.InteractTip = "InteractTip";
	TipUIKey.HeadTextInputTip = "HeadTextInputTip";

	var Point$1 = Laya.Point;
	var Rectangle = Laya.Rectangle;
	class DisplayUtils {
	    static getGlobalCoord(sprite) {
	        if (!sprite.displayedInStage) {
	            return new Point$1(0, 0);
	        }
	        var localCoord = new Point$1();
	        var globalCoord = sprite.localToGlobal(localCoord);
	        globalCoord.x += sprite.pivotX * sprite.scaleX;
	        globalCoord.y += sprite.pivotY * sprite.scaleY;
	        return globalCoord;
	    }
	    static getGlobalBounds(sprite) {
	        var bounds = new Rectangle();
	        if (!sprite.displayedInStage) {
	            return bounds;
	        }
	        var globalCoord = DisplayUtils.getGlobalCoord(sprite);
	        bounds.x = globalCoord.x - sprite.pivotX * sprite.scaleX;
	        bounds.y = globalCoord.y - sprite.pivotY * sprite.scaleY;
	        bounds.width = sprite.width * sprite.scaleX;
	        bounds.height = sprite.height * sprite.scaleY;
	        return bounds;
	    }
	    static getGlobalCenter(sprite) {
	        if (!sprite.displayedInStage) {
	            return new Point$1(0, 0);
	        }
	        var globalBounds = DisplayUtils.getGlobalBounds(sprite);
	        var center = new Point$1();
	        center.x = globalBounds.x + globalBounds.width / 2;
	        center.y = globalBounds.y + globalBounds.height / 2;
	        return center;
	    }
	}

	var Event$5 = Laya.Event;
	var Point$2 = Laya.Point;
	var Image$1 = Laya.Image;
	class LocationVo {
	    constructor(referObj, handleRefer = null, handleTipUI = null) {
	        this.handleRefer = handleRefer ? handleRefer : new Point$2();
	        this.handleTipUI = handleTipUI ? handleTipUI : new Point$2();
	        this.referObj = referObj;
	    }
	}
	class TipUIBase extends UIBase {
	    constructor() {
	        super();
	        this.createMask();
	    }
	    createMask() {
	        this.uiMask = new Image$1();
	        this.uiMask.name = "#mask#";
	        this.addChild(this.uiMask);
	        this.uiMask.alpha = 0;
	        this.uiMask.mouseEnabled = true;
	        this.uiMask.hitTestPrior = true;
	    }
	    layoutUI() {
	        this.width = Laya.stage.width;
	        this.height = Laya.stage.height;
	        this.uiMask.graphics.clear();
	        this.uiMask.graphics.drawRect(0, 0, this.width, this.height, "#000000");
	        this.uiMask.width = this.width;
	        this.uiMask.height = this.height;
	        if (!this.locationVo) {
	            this.view.x = this.width / 2 - this.view.width / 2;
	            this.view.y = this.height / 2 - this.view.height / 2;
	        }
	        else {
	            var bounds = DisplayUtils.getGlobalBounds(this.locationVo.referObj);
	            this.view.pivotX = this.view.width * this.locationVo.handleTipUI.x;
	            this.view.pivotY = this.view.height * this.locationVo.handleTipUI.y;
	            this.view.x = bounds.x + bounds.width * this.locationVo.handleRefer.x;
	            this.view.y = bounds.y + bounds.height * this.locationVo.handleRefer.y;
	        }
	    }
	    $onAdd() {
	        super.$onAdd();
	        this.uiMask.on(Event$5.CLICK, this, this.onMaskClick);
	    }
	    $onRemove() {
	        super.$onRemove();
	        this.uiMask.off(Event$5.CLICK, this, this.onMaskClick);
	    }
	    onMaskClick() {
	        if (this.view.hitTestPoint(Laya.stage.mouseX, Laya.stage.mouseY)) {
	            return;
	        }
	        this.closeSelf();
	    }
	    closeSelf() {
	        this.removeSelf();
	    }
	}

	class HelpVo {
	    constructor(title, content) {
	        this.title = title;
	        this.content = content;
	    }
	}
	class HelpTip extends TipUIBase {
	    constructor() {
	        super(...arguments);
	        this.viewClass = editor.miscell.HepTipUI;
	    }
	}

	class SheetConfig extends ConfigBase {
	    constructor() {
	        super();
	        this._dic = {};
	    }
	    analyze(data) {
	        for (var id in data) {
	            var record = data[id];
	            var cls = this.recordCls;
	            var item = new cls();
	            item.analyze(record);
	            this._dic[id] = item;
	        }
	    }
	    getDic() {
	        return this._dic;
	    }
	    getConfig(id) {
	        return this._dic[id];
	    }
	    get recordCls() {
	        return null;
	    }
	}

	class StructConfig extends ConfigBase {
	    analyze(data) {
	        for (var key in data) {
	            this[key] = data[key];
	        }
	    }
	}

	class FaceConfig extends StructConfig {
	    set img(value) {
	        this._img = value;
	    }
	    get img() {
	        return PathManager.getDynamicPath(this._img);
	    }
	}
	class FaceTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.face, this);
	    }
	    static get ins() {
	        return FaceTable._ins = FaceTable._ins || new FaceTable();
	    }
	    get recordCls() {
	        return FaceConfig;
	    }
	}

	class FaceUtils {
	    static getFaceConfigList() {
	        var list = [];
	        var dic = FaceTable.ins.getDic();
	        for (var key in dic) {
	            list.push(dic[key]);
	        }
	        return list;
	    }
	}

	class GamePredef {
	}
	GamePredef.ROLE_NAME_MIN_NUM = 4;
	GamePredef.Role_Name_MAX_NUM = 10;

	class SdkBase {
	    init() {
	    }
	    sendMessage(action, data) {
	    }
	    getNeedCheckBodyClick() {
	        return true;
	    }
	    bodyClickCallBack(buttonClickType) {
	        switch (buttonClickType) {
	            case "copy":
	                {
	                    GameUtils.doCopy(GameManager.ins.clipboardData);
	                    break;
	                }
	        }
	    }
	    checkWords(words, callBack, type = null) {
	        var hasFilterWords = false;
	        for (var i = 0; i < words.length; i++) {
	            var oldWord = words[i];
	            var newWord = GameUtils.replaceFilterWords(oldWord);
	            words[i] = newWord;
	            if (newWord != oldWord) {
	                hasFilterWords = true;
	            }
	        }
	        if (callBack) {
	            GameUtils.runCallBack(callBack, words, hasFilterWords);
	        }
	    }
	    checkNameInput(name) {
	        if (!name)
	            return false;
	        name = StringUtils.trim(name);
	        var nameLen = StringUtils.getByteLen(name);
	        if (nameLen < GamePredef.ROLE_NAME_MIN_NUM || nameLen > GamePredef.Role_Name_MAX_NUM) {
	            return false;
	        }
	        var reg = /^[a-zA-Z0-9\u4e00-\u9fa5]+$/g;
	        return reg.test(name);
	    }
	}

	var os = conchConfig.getOS();
	var bridge;
	if (os == "Conch-ios") {
	    bridge = PlatformClass.createClass("JSBridge");//创建脚步代理
	} else if (os == "Conch-android") {
	  //需要完整的类路径，注意与iOS的不同
	  bridge = PlatformClass.createClass("demo.JSBridge");//创建脚步代理
	} 

	function notifyLaunchComplete() {
	  bridge.call('launchComplete');
	}

	function sendMessageToApp(msg) {
	  bridge.call('sendMessage', msg);
	}

	class GameBridge {
	    static setupBridge() {
	        notifyLaunchComplete();
	    }
	    static sendMessageToApp(message) {
	        sendMessageToApp(JSON.stringify(message));
	    }
	}

	class PC extends SdkBase {
	    constructor() {
	        super();
	    }
	    init() {
	        var onMessage = function (res) {
	            var action = res.action;
	            var data = res.data;
	            GameProtocol.ins.onMessage(action, data);
	        };
	        var handlerDic = GameProtocol.ins.handlerDic;
	        this.ZMSdk = window["ZM"];
	        for (var key in handlerDic) {
	            this.ZMSdk.onMessage(key, onMessage);
	        }
	    }
	    sendMessage(action, data) {
	        var msg = {};
	        msg.action = action;
	        msg.data = data;
	        this.ZMSdk.sendMessage(msg);
	        GameBridge.sendMessageToApp(msg);
	    }
	    doLoginGame() {
	        PanelManager.ins.openPanel(PanelKey.RegisterPanel);
	    }
	    pay(payId, goodsId = "", activityId = 0) {
	    }
	}

	class SdkManager {
	    static init() {
	        SdkManager.SDK_CLASS["PC"] = PC;
	        if (SdkManager.inited) {
	            return;
	        }
	        var cls = SdkManager.SDK_CLASS[GlobalVars.sdkLogic];
	        if (!cls) {
	            return;
	        }
	        SdkManager.sdk = new cls();
	        SdkManager.sdk.init();
	        SdkManager.inited = true;
	    }
	    static getNeedCheckBodyClick() {
	        return SdkManager.sdk.getNeedCheckBodyClick();
	    }
	    static sendMessage(action, data) {
	        SdkManager.sdk.sendMessage(action, data);
	    }
	    static bodyClickCallBack(buttonClickType) {
	        SdkManager.sdk.bodyClickCallBack(buttonClickType);
	    }
	    static checkWords(words, callBack, type = null) {
	        SdkManager.sdk.checkWords(words, callBack, type);
	    }
	    static checkNameInput(name) {
	        return SdkManager.sdk.checkNameInput(name);
	    }
	}
	SdkManager.SDK_CLASS = {};
	SdkManager.inited = false;
	SdkManager.sdk = null;

	class GameProtocol {
	    constructor() {
	        this._handlerDic = {};
	    }
	    registerHandler(action, handler) {
	        this._handlerDic[action] = handler;
	    }
	    get handlerDic() {
	        return this._handlerDic;
	    }
	    sendMessage(action, data) {
	        Logger.log("sendMessage: " + " action:" + action + " data:" + JSON.stringify(data));
	        SdkManager.sendMessage(action, data);
	    }
	    onMessage(action, data) {
	        Logger.log("onMessage: " + " action:" + action + " data:" + JSON.stringify(data));
	        var handler = this._handlerDic[action];
	        if (handler) {
	            GameUtils.runCallBack(handler, data);
	        }
	    }
	    static get ins() {
	        return GameProtocol._ins = GameProtocol._ins || new GameProtocol();
	    }
	}
	GameProtocol._ins = null;

	class MapConfig extends StructConfig {
	    get path() {
	        return PathManager.getMapPath(this.res);
	    }
	}
	class MapTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.map, this);
	    }
	    static get ins() {
	        return MapTable._ins = MapTable._ins || new MapTable();
	    }
	    get recordCls() {
	        return MapConfig;
	    }
	}

	class RoleConfig extends StructConfig {
	    set icon(value) {
	        this._icon = value;
	    }
	    get icon() {
	        return PathManager.getIconsPath(this._icon);
	    }
	}
	class RoleTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.role, this);
	    }
	    static get ins() {
	        return RoleTable._ins = RoleTable._ins || new RoleTable();
	    }
	    get recordCls() {
	        return RoleConfig;
	    }
	}

	var EventDispatcher$1 = Laya.EventDispatcher;
	class ModelUser extends EventDispatcher$1 {
	    constructor() {
	        super();
	        this.roomid = "";
	        this.mapid = 0;
	        this.game_uid = "";
	        this.nickname = "";
	        this.role_id = 0;
	        this.oprate_entity = false;
	        this.color = "#FFFFFF";
	        this.x = 0;
	        this.y = 0;
	        this.direction = 0;
	        this.back_img = "";
	    }
	    get mapConfig() {
	        return MapTable.ins.getConfig(this.mapid);
	    }
	    get roleConfig() {
	        return RoleTable.ins.getConfig(this.role_id);
	    }
	    static get ins() {
	        return ModelUser._ins = ModelUser._ins || new ModelUser();
	    }
	}

	var Sprite$2 = Laya.Sprite;
	var Event$6 = Laya.Event;
	class GameSprite extends Sprite$2 {
	    constructor() {
	        super();
	        this.on(Event$6.UNDISPLAY, this, this.onUnDisplay);
	        this.on(Event$6.DISPLAY, this, this.onDisplay);
	    }
	    onUnDisplay() {
	        this.$onRemove();
	        this.onRemove();
	        this.$onRemoved();
	        this.onRemoved();
	    }
	    onDisplay() {
	        this.$onAdd();
	        this.onAdd();
	        this.$onAdded();
	        this.onAdded();
	    }
	    $onAdd() {
	    }
	    onAdd() {
	    }
	    onRemove() {
	    }
	    $onAdded() {
	    }
	    onAdded() {
	    }
	    $onRemove() {
	    }
	    $onRemoved() {
	    }
	    onRemoved() {
	    }
	}

	var Event$7 = Laya.Event;
	class MapUnit extends GameSprite {
	    constructor(mapScene) {
	        super();
	        this._virtualX = 0;
	        this._virtualY = 0;
	        this.mapScene = mapScene;
	    }
	    $onAdd() {
	        this.on(Event$7.CLICK, this, this.onClick);
	        this.on(Event$7.MOUSE_OVER, this, this.onMouseOver);
	        this.on(Event$7.MOUSE_OUT, this, this.onMouseOut);
	    }
	    $onRemove() {
	        this.off(Event$7.CLICK, this, this.onClick);
	    }
	    onClick() {
	    }
	    onMouseOver(e) {
	    }
	    onMouseOut(e) {
	    }
	    get virtualX() {
	        return this._virtualX;
	    }
	    get virtualY() {
	        return this._virtualY;
	    }
	    tick(time) {
	        this.x = this._virtualX - this.mapScene.camera.x;
	        this.y = this._virtualY - this.mapScene.camera.y;
	    }
	    setTilePos(tileX, tileY) {
	        var pos = this.mapScene.getTilePos(tileX, tileY);
	        this._virtualX = pos.x;
	        this._virtualY = pos.y;
	    }
	    setVirtualPos(posX, posY) {
	        this._virtualX = posX;
	        this._virtualY = posY;
	        this.x = this._virtualX - this.mapScene.camera.x;
	        this.y = this._virtualY - this.mapScene.camera.y;
	    }
	    getStandTile() {
	        return this.mapScene.getPosTile(this.virtualX, this.virtualY);
	    }
	}

	class AniEvent {
	}
	AniEvent.PLAY_END = "PLAY_END";
	AniEvent.LOAD_COMPLETE = "LOAD_COMPLETE";
	AniEvent.LABEL = "LABEL";

	class AnimationResVo {
	    constructor() {
	        this.status = 0;
	        this.path = "";
	        this.resList = [];
	    }
	}

	var Browser$2 = Laya.Browser;
	var Handler$2 = Laya.Handler;
	class AniControl {
	    static init() {
	        var checkAnimation = function () {
	            var osTime = Browser$2.now();
	            var len = AniControl.animationPool.length;
	            for (var i = len - 1; i >= 0; i--) {
	                var info = AniControl.animationPool[i];
	                var time = info["time"];
	                var animation = info["animation"];
	                if (osTime - time >= AniControl.SKELETON_INVALID_DURATION) {
	                    animation.destroy();
	                    AniControl.animationPool.splice(i, 1);
	                }
	            }
	        };
	        Laya.timer.loop(60 * 1000, AniControl, checkAnimation);
	    }
	    static fetch(res) {
	        var path = res.path;
	        var resInfo = AniControl.map[path];
	        if (resInfo == null) {
	            resInfo = new AnimationResVo();
	            resInfo.path = path;
	            resInfo.status = AniControl.IN_LOADING;
	            resInfo.resList.push(res);
	            AniControl.map[path] = resInfo;
	            var urls = PathManager.getAnimationLoadUrls(res.resID);
	            Laya.loader.load(urls, Handler$2.create(AniControl, AniControl.onLoadComplete, [resInfo]));
	        }
	        else {
	            if (resInfo.status == AniControl.IN_LOADING) {
	                if (resInfo.resList.indexOf(res) < 0) {
	                    resInfo.resList.push(res);
	                }
	            }
	            else if (resInfo.status == AniControl.LOAD_COMPLETE) {
	                res.loadResComplete(resInfo);
	            }
	        }
	    }
	    static onLoadComplete(resInfo, success) {
	        if (success) {
	            AniControl.onAnimationLoadComplete(resInfo);
	        }
	        else {
	            AniControl.onAnimationLoadError(resInfo);
	        }
	    }
	    static onAnimationLoadComplete(resInfo) {
	        resInfo.status = AniControl.LOAD_COMPLETE;
	        for (var i = 0; i < resInfo.resList.length; i++) {
	            var res = resInfo.resList[i];
	            if (res && !res.destroyed) {
	                res.loadResComplete(resInfo);
	            }
	        }
	        resInfo.resList.length = 0;
	    }
	    static onAnimationLoadError(resInfo) {
	        resInfo.status = AniControl.LOAD_ERROR;
	        for (var i = 0; i < resInfo.resList.length; i++) {
	            var res = resInfo.resList[i];
	            if (res && !res.destroyed) {
	                res.loadResError(resInfo);
	            }
	        }
	        resInfo.resList.length = 0;
	    }
	    static clearRes(res) {
	        for (var path in AniControl.map) {
	            var resInfo = AniControl.map[path];
	            var len = resInfo.resList.length;
	            for (var i = len - 1; i >= 0; i--) {
	                if (resInfo.resList[i] == res) {
	                    resInfo.resList.splice(i, 1);
	                }
	            }
	        }
	    }
	    static disposeAllRes() {
	        for (var path in AniControl.map) {
	            var resInfo = AniControl.map[path];
	            resInfo.resList = null;
	        }
	        AniControl.map = {};
	        for (var i = 0; i < AniControl.animationPool.length; i++) {
	            var info = AniControl.animationPool[i];
	            var animation = info["animation"];
	            animation.destroy();
	        }
	        AniControl.animationPool.length = 0;
	    }
	    static popSkeleton() {
	        if (AniControl.animationPool.length > 0) {
	            var info = AniControl.animationPool.shift();
	            return info["animation"];
	        }
	        return new CAnimation();
	    }
	    static recoverAnimation(animation) {
	        var info = {};
	        info["time"] = Browser$2.now();
	        info["animation"] = animation;
	        AniControl.animationPool.push(info);
	    }
	}
	AniControl.NOSTART_LOAD = 0;
	AniControl.IN_LOADING = 1;
	AniControl.LOAD_COMPLETE = 2;
	AniControl.LOAD_ERROR = 3;
	AniControl.SKELETON_INVALID_DURATION = 10 * 60;
	AniControl.map = {};
	AniControl.animationPool = [];

	var AniAction;
	(function (AniAction) {
	    AniAction["Idle"] = "idle";
	    AniAction["Walk"] = "walk";
	    AniAction["Beckon"] = "beckon";
	    AniAction["Applaud"] = "applaud";
	    AniAction["Ease"] = "ease";
	    AniAction["Cheer"] = "cheer";
	    AniAction["Celebrate"] = "celebrate";
	    AniAction["Embrace"] = "embrace";
	    AniAction["Throw"] = "throw";
	})(AniAction || (AniAction = {}));

	var Sprite$3 = Laya.Sprite;
	var Event$8 = Laya.Event;
	var Animation = Laya.Animation;
	class CAnimation extends Animation {
	    changeFrames(value) {
	        this._frames = value;
	        this._count = value.length;
	        this.play(0, this.loop);
	    }
	}
	class GameAni extends Sprite$3 {
	    constructor() {
	        super();
	        this.on(Event$8.DISPLAY, this, this.onDisplay);
	        this.on(Event$8.UNDISPLAY, this, this.unDisplay);
	        this._resID = "";
	        this._animation = null;
	        this._action = "";
	        this._loop = true;
	        this._force = false;
	        this._start = 0;
	        this._playing = false;
	        this._paused = false;
	        this._autoDestroy = false;
	        this._extraScale = 1;
	        this._interval = Config.animationInterval;
	        this._dirNum = 0;
	        this._currentDir = 0;
	    }
	    onDisplay() {
	        this.updatePauseStatus();
	    }
	    unDisplay() {
	        this.updatePauseStatus();
	    }
	    get action() {
	        return this._action;
	    }
	    get currentDir() {
	        return this._currentDir;
	    }
	    set autoDestroy(value) {
	        this._autoDestroy = value;
	    }
	    init(resID, autoPlay = true, dirNum = 0) {
	        if (this._resID == resID)
	            return;
	        this.disposeAnimation();
	        this._resID = resID;
	        this._dirNum = dirNum;
	        if (autoPlay) {
	            this.play(AniAction.Idle, true, true, 0);
	        }
	        AniControl.fetch(this);
	    }
	    get path() {
	        return PathManager.getAnimiationDataPath(this._resID);
	    }
	    set extraScale(value) {
	        this._extraScale = value * GameAni.DEFAULT_SCALE;
	        if (this._animation) {
	            this._animation.scale(this._extraScale, this._extraScale);
	        }
	    }
	    get extraScale() {
	        return this._extraScale;
	    }
	    get resID() {
	        return this._resID;
	    }
	    stop() {
	        this._playing = false;
	        if (this._animation) {
	            this._animation.stop();
	        }
	    }
	    play(actionID, loop = true, force = false, start = 0, dir = 0) {
	        if (!force) {
	            if (this._action == actionID && this._currentDir == dir) {
	                return;
	            }
	        }
	        this._playing = true;
	        this._action = actionID;
	        this._loop = loop;
	        this._force = force;
	        this._start = start;
	        this._currentDir = dir;
	        this.playAnimation();
	    }
	    set interval(value) {
	        this._interval = value;
	        if (this._animation) {
	            this._animation.interval = this._interval;
	        }
	    }
	    loadResComplete(resInfo) {
	        if (this.destroyed)
	            return;
	        if (resInfo.path.indexOf(this._resID) == -1) {
	            return;
	        }
	        this.initAnimation();
	        if (this._animation != null) {
	            this._animation.interval = this._interval;
	            this._animation.scale(this._extraScale, this._extraScale);
	            this.updatePauseStatus();
	        }
	        this.event(AniEvent.LOAD_COMPLETE);
	    }
	    loadResError(resInfo) {
	        Logger.log("动画加载失败,url=" + resInfo.path);
	    }
	    initAnimation() {
	        this.disposeAnimation();
	        this._animation = AniControl.popSkeleton();
	        this._animation.loadAnimation(this.path);
	        this._animation.on(Event$8.COMPLETE, this, this.onEndEvent);
	        this._animation.on(Event$8.LABEL, this, this.onLabelEvent);
	        this.addChildAt(this._animation, 0);
	    }
	    onEndEvent() {
	        if (this._autoDestroy) {
	            this.destroy();
	        }
	        this.event(AniEvent.PLAY_END);
	    }
	    onLabelEvent(label) {
	        if (label.indexOf("play_") >= 0) {
	            var info = label.split("_");
	            var action = info[1];
	            var loop = 1;
	            if (info[2] != null) {
	                loop = info[2];
	            }
	            if (action) {
	                this.play(action, loop == 1);
	            }
	        }
	        this.event(AniEvent.LABEL, label);
	    }
	    set paused(value) {
	        this._paused = value;
	        this.updatePauseStatus();
	    }
	    updatePauseStatus() {
	        if (this._animation != null && this._playing) {
	            var flag = this._paused || !this.displayedInStage;
	            if (flag) {
	                this._animation.stop();
	            }
	            else {
	                this.playAnimation();
	            }
	        }
	    }
	    playAnimation() {
	        if (this._animation) {
	            this._animation.play(this._start, this._loop, this._action);
	            if (this._dirNum > 0) {
	                var dirFrameNum = this._animation.frames.length / this._dirNum;
	                var dirStartFrame = this._currentDir * dirFrameNum;
	                var dirEndFrame = dirStartFrame + dirFrameNum;
	                var frames = this._animation.frames.slice(dirStartFrame, dirEndFrame);
	                this._animation.changeFrames(frames);
	            }
	        }
	    }
	    get puased() {
	        return this._paused;
	    }
	    disposeAnimation() {
	        if (this._animation) {
	            this._animation.removeSelf();
	            this._animation.off(Event$8.COMPLETE, this, this.onEndEvent);
	            this._animation.off(Event$8.LABEL, this, this.onLabelEvent);
	            this._animation.clear();
	            AniControl.recoverAnimation(this._animation);
	            this._animation = null;
	        }
	    }
	}
	GameAni.DEFAULT_SCALE = 1;

	class TimeFormat {
	}
	TimeFormat.date_ymd = "yyyy:MM:dd";
	TimeFormat.date_hms = "HH:mm:ss";
	TimeFormat.date_ymdhms = "yyyy:MM:dd-HH:mm:ss";
	TimeFormat.date_mdhm = "MM:dd-HH:mm";
	TimeFormat.time_s = "s";
	TimeFormat.time_ms = "m:s";
	TimeFormat.time_hms = "H:m:s";
	TimeFormat.time_dhms = "d:H:m:s";
	TimeFormat.time_h = "H";
	TimeFormat.time_d = "d";

	var TimeFormatMode;
	(function (TimeFormatMode) {
	    TimeFormatMode[TimeFormatMode["CN"] = 0] = "CN";
	    TimeFormatMode[TimeFormatMode["EN"] = 1] = "EN";
	})(TimeFormatMode || (TimeFormatMode = {}));
	class TimeUtils {
	    static dateFormat(time, format, mode = TimeFormatMode.CN) {
	        var date = new Date(time);
	        var params = [
	            ["y", date.getFullYear(), TimeUtils.appendDateExtra("y", mode)],
	            ["M", date.getMonth() + 1, TimeUtils.appendDateExtra("M", mode)],
	            ["d", date.getDate(), TimeUtils.appendDateExtra("d", mode)],
	            ["H", date.getHours(), TimeUtils.appendDateExtra("H", mode)],
	            ["m", date.getMinutes(), TimeUtils.appendDateExtra("m", mode)],
	            ["s", date.getSeconds(), TimeUtils.appendDateExtra("s", mode)],
	        ];
	        return TimeUtils.formatByParams(format, params, mode);
	    }
	    static timeFormat(time, format, mode = TimeFormatMode.CN) {
	        var d_num = Math.floor(time / TimeUtils.oneDayMs);
	        if (format.indexOf('d') >= 0) {
	            time = time % TimeUtils.oneDayMs;
	        }
	        var h_num = Math.floor(time / TimeUtils.oneHourMs);
	        if (format.indexOf('H') >= 0) {
	            time = time % TimeUtils.oneHourMs;
	        }
	        var m_num = Math.floor(time / TimeUtils.oneMinuteMs);
	        if (format.indexOf('m') >= 0) {
	            time = time % TimeUtils.oneMinuteMs;
	        }
	        var s_num = Math.floor(time / TimeUtils.oneSecondMs);
	        var params = [
	            ["d", d_num, TimeUtils.appendTimeExtra("d", mode)],
	            ["H", h_num, TimeUtils.appendTimeExtra("H", mode)],
	            ["m", m_num, TimeUtils.appendTimeExtra("m", mode)],
	            ["s", s_num, TimeUtils.appendTimeExtra("s", mode)],
	        ];
	        return TimeUtils.formatByParams(format, params, mode);
	    }
	    static appendTimeExtra(key, mode) {
	        var extra = "";
	        if (mode == TimeFormatMode.CN) {
	            extra = LangUtils.getLang("time_" + key);
	        }
	        else {
	            extra = "";
	        }
	        return extra;
	    }
	    static appendDateExtra(key, mode) {
	        var extra = "";
	        if (mode == TimeFormatMode.CN) {
	            extra = LangUtils.getLang("date_" + key);
	        }
	        else {
	            extra = "";
	        }
	        return extra;
	    }
	    static formatRemainTime(time, mode = TimeFormatMode.CN) {
	        if (mode == TimeFormatMode.CN) {
	            var format = "";
	            if (time > TimeUtils.oneDayMs) {
	                format = TimeFormat.time_dhms;
	            }
	            else if (time > TimeUtils.oneHourMs) {
	                format = TimeFormat.time_hms;
	            }
	            else if (time > TimeUtils.oneMinuteMs) {
	                format = TimeFormat.time_ms;
	            }
	            else {
	                format = TimeFormat.time_s;
	            }
	            return TimeUtils.timeFormat(time, format, mode);
	        }
	        else {
	            return TimeUtils.timeFormat(time, TimeFormat.time_hms, mode);
	        }
	    }
	    static formatByParams(format, params, mode) {
	        for (var i = 0; i < params.length; i++) {
	            var key = params[i][0];
	            var newStr = params[i][1];
	            var appendStr = params[i][2];
	            var result = new RegExp("(" + key + "+" + ")").exec(format);
	            if (result) {
	                var matchStr = result[1];
	                if (matchStr.length > 1) {
	                    newStr = StringUtils.fill(newStr, matchStr.length, '0', false);
	                }
	                format = format.replace(matchStr, newStr + appendStr);
	            }
	        }
	        if (mode == TimeFormatMode.CN) {
	            format = format.replace(/:/g, "");
	            format = format.replace(/-/g, "");
	        }
	        return format;
	    }
	    static getNextHourMs(time) {
	        return (Math.floor(time / TimeUtils.oneHourMs) + 1) * TimeUtils.oneHourMs;
	    }
	    static getDayStartTime(time) {
	        var date = new Date(time);
	        date.setHours(0, 0, 0, 0);
	        var crossDayTimePoint = date.getTime() + TimeUtils.crossDayMs;
	        if (time < crossDayTimePoint) {
	            return crossDayTimePoint - TimeUtils.oneDayMs;
	        }
	        return crossDayTimePoint;
	    }
	    static recoverValue(value, lastTime, nowTime, duration, maxValue) {
	        return Math.min(maxValue, Math.floor(value + (nowTime - lastTime) / (duration * TimeUtils.oneSecondMs)));
	    }
	}
	TimeUtils.oneSecondMs = 1000;
	TimeUtils.oneMinuteMs = 60 * TimeUtils.oneSecondMs;
	TimeUtils.oneHourMs = 60 * TimeUtils.oneMinuteMs;
	TimeUtils.oneDayMs = 24 * TimeUtils.oneHourMs;
	TimeUtils.oneMinuteS = 60;
	TimeUtils.crossDayMs = 5 * TimeUtils.oneHourMs;

	class PerformConfig extends StructConfig {
	    set img(value) {
	        this._img = value;
	    }
	    get img() {
	        return PathManager.getDynamicPath(this._img);
	    }
	}
	class PerformTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.perform, this);
	    }
	    static get ins() {
	        return PerformTable._ins = PerformTable._ins || new PerformTable();
	    }
	    get recordCls() {
	        return PerformConfig;
	    }
	}

	class InteractConfig extends StructConfig {
	    set img(value) {
	        this._img = value;
	    }
	    get img() {
	        return PathManager.getDynamicPath(this._img);
	    }
	}
	class InteractTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.interact, this);
	    }
	    static get ins() {
	        return InteractTable._ins = InteractTable._ins || new InteractTable();
	    }
	    get recordCls() {
	        return InteractConfig;
	    }
	}

	class MathUtils {
	    static distance(startX, startY, endX, endY) {
	        var disX = endX - startX;
	        var disY = endY - startY;
	        var dis = Math.sqrt(Math.pow(disX, 2) + Math.pow(disY, 2));
	        return dis;
	    }
	    static radian(point1, point2) {
	        return Math.atan2(point2.y - point1.y, point2.x - point1.x);
	    }
	    static radianToangle(radian) {
	        return radian / (Math.PI / 180);
	    }
	    static angleToRadian(angle) {
	        return angle * (Math.PI / 180);
	    }
	    static getPointLength(point) {
	        return MathUtils.distance(0, 0, point.x, point.y);
	    }
	    static fixAngle(angle) {
	        angle = angle % 360;
	        if (angle < 0) {
	            angle = 360 + angle;
	        }
	        return angle;
	    }
	}

	class SpineResVo {
	    constructor() {
	        this.status = 0;
	        this.path = "";
	        this.resList = [];
	    }
	}

	var Templet = Laya.Templet;
	var Event$9 = Laya.Event;
	var Browser$3 = Laya.Browser;
	class SpineControl {
	    static init() {
	        var checkSkeleton = function () {
	            var osTime = Browser$3.now();
	            var len = SpineControl.skeletonPool.length;
	            for (var i = len - 1; i >= 0; i--) {
	                var info = SpineControl.skeletonPool[i];
	                var time = info["time"];
	                var skeleton = info["skeleton"];
	                if (osTime - time >= SpineControl.SKELETON_INVALID_DURATION) {
	                    skeleton.destroy();
	                    SpineControl.skeletonPool.splice(i, 1);
	                }
	            }
	        };
	        Laya.timer.loop(60 * 1000, SpineControl, checkSkeleton);
	    }
	    static fetch(res) {
	        var path = res.path;
	        var resInfo = SpineControl.map[path];
	        if (resInfo == null) {
	            resInfo = new SpineResVo();
	            resInfo.path = path;
	            var templet = new Templet();
	            templet.on(Event$9.COMPLETE, SpineControl, SpineControl.onTempletLoadComplete, [resInfo]);
	            templet.on(Event$9.ERROR, SpineControl, SpineControl.onTempletLoadError, [resInfo]);
	            resInfo.templet = templet;
	            resInfo.status = SpineControl.IN_LOADING;
	            resInfo.resList.push(res);
	            SpineControl.map[path] = resInfo;
	            templet.loadAni(path);
	        }
	        else {
	            if (resInfo.status == SpineControl.IN_LOADING) {
	                if (resInfo.resList.indexOf(res) < 0) {
	                    resInfo.resList.push(res);
	                }
	            }
	            else if (resInfo.status == SpineControl.LOAD_COMPLETE) {
	                res.loadResComplete(resInfo);
	            }
	        }
	    }
	    static onTempletLoadComplete(resInfo) {
	        resInfo.templet.off(Event$9.COMPLETE, SpineControl, SpineControl.onTempletLoadComplete);
	        resInfo.templet.off(Event$9.ERROR, SpineControl, SpineControl.onTempletLoadError);
	        resInfo.status = SpineControl.LOAD_COMPLETE;
	        for (var i = 0; i < resInfo.resList.length; i++) {
	            var res = resInfo.resList[i];
	            if (res && !res.destroyed) {
	                res.loadResComplete(resInfo);
	            }
	        }
	        resInfo.resList.length = 0;
	    }
	    static onTempletLoadError(resInfo) {
	        resInfo.templet.off(Event$9.COMPLETE, SpineControl, SpineControl.onTempletLoadComplete);
	        resInfo.templet.off(Event$9.ERROR, SpineControl, SpineControl.onTempletLoadError);
	        resInfo.status = SpineControl.LOAD_ERROR;
	        for (var i = 0; i < resInfo.resList.length; i++) {
	            var res = resInfo.resList[i];
	            if (res && !res.destroyed) {
	                res.loadResError(resInfo);
	            }
	        }
	        resInfo.resList.length = 0;
	    }
	    static clearRes(res) {
	        for (var path in SpineControl.map) {
	            var resInfo = SpineControl.map[path];
	            var len = resInfo.resList.length;
	            for (var i = len - 1; i >= 0; i--) {
	                if (resInfo.resList[i] == res) {
	                    resInfo.resList.splice(i, 1);
	                }
	            }
	        }
	    }
	    static disposeAllRes() {
	        for (var path in SpineControl.map) {
	            var resInfo = SpineControl.map[path];
	            if (resInfo.templet) {
	                resInfo.templet.off(Event$9.COMPLETE, SpineControl, SpineControl.onTempletLoadComplete);
	                resInfo.templet.off(Event$9.ERROR, SpineControl, SpineControl.onTempletLoadError);
	                resInfo.templet.destroy();
	            }
	            resInfo.resList = null;
	            resInfo.templet = null;
	        }
	        SpineControl.map = {};
	        for (var i = 0; i < SpineControl.skeletonPool.length; i++) {
	            var info = SpineControl.skeletonPool[i];
	            var skeleton = info["skeleton"];
	            skeleton.destroy();
	        }
	        SpineControl.skeletonPool.length = 0;
	    }
	    static popSkeleton(templet) {
	        var len = SpineControl.skeletonPool.length;
	        for (var i = len - 1; i >= 0; i--) {
	            var info = SpineControl.skeletonPool[i];
	            var skeleton = info["skeleton"];
	            if (skeleton.templet == templet) {
	                SpineControl.skeletonPool.splice(i, 1);
	                return skeleton;
	            }
	        }
	        return templet.buildArmature();
	    }
	    static recoverSkeleton(skeleton) {
	        var info = {};
	        info["time"] = Browser$3.now();
	        info["skeleton"] = skeleton;
	        SpineControl.skeletonPool.push(info);
	    }
	}
	SpineControl.NOSTART_LOAD = 0;
	SpineControl.IN_LOADING = 1;
	SpineControl.LOAD_COMPLETE = 2;
	SpineControl.LOAD_ERROR = 3;
	SpineControl.SKELETON_INVALID_DURATION = 10 * 60;
	SpineControl.map = {};
	SpineControl.skeletonPool = [];

	class SpineEvent {
	}
	SpineEvent.PLAY_END = "PLAY_END";
	SpineEvent.LOAD_COMPLETE = "LOAD_COMPLETE";
	SpineEvent.LABEL = "LABEL";

	var SpineAction;
	(function (SpineAction) {
	    SpineAction["Idle"] = "idle";
	})(SpineAction || (SpineAction = {}));

	var Sprite$4 = Laya.Sprite;
	var Event$a = Laya.Event;
	class GameSpine extends Sprite$4 {
	    constructor() {
	        super();
	        this.on(Event$a.DISPLAY, this, this.onDisplay);
	        this.on(Event$a.UNDISPLAY, this, this.unDisplay);
	        this._resID = "";
	        this._skeleton = null;
	        this._templet = null;
	        this._action = "";
	        this._loop = true;
	        this._force = false;
	        this._start = 0;
	        this._end = 0;
	        this._playing = false;
	        this._freshSkin = true;
	        this._paused = false;
	        this._autoDestroy = false;
	        this._extraScale = 1;
	        this._playBackRate = 1;
	    }
	    onDisplay() {
	        this.updatePauseStatus();
	    }
	    unDisplay() {
	        this.updatePauseStatus();
	    }
	    set autoDestroy(value) {
	        this._autoDestroy = value;
	    }
	    init(resID, autoPlay = true) {
	        if (this._resID == resID)
	            return;
	        this.disposeSkeleton();
	        this._resID = resID;
	        if (autoPlay) {
	            this.play(SpineAction.Idle, true, true, 0, 0, true);
	        }
	        SpineControl.fetch(this);
	    }
	    get path() {
	        return PathManager.getSpinePath(this._resID);
	    }
	    set extraScale(value) {
	        this._extraScale = value * GameSpine.DEFAULT_SCALE;
	        if (this._skeleton) {
	            this._skeleton.scale(this._extraScale, this._extraScale);
	        }
	    }
	    get extraScale() {
	        return this._extraScale;
	    }
	    get resID() {
	        return this._resID;
	    }
	    stop() {
	        this._playing = false;
	        if (this._skeleton) {
	            this._skeleton.stop();
	        }
	    }
	    play(actionID, loop = true, force = false, start = 0, end = 0, freshSkin = true) {
	        if (!force) {
	            if (this._action == actionID) {
	                return;
	            }
	        }
	        this._playing = true;
	        this._action = actionID;
	        this._loop = loop;
	        this._force = force;
	        this._start = start;
	        this._end = end;
	        this._freshSkin = freshSkin;
	        if (this._skeleton) {
	            this._skeleton.play(this._action, this._loop, this._force, this._start, this._end, this._freshSkin);
	        }
	    }
	    set playBackRate(value) {
	        this._playBackRate = value;
	        if (this._skeleton) {
	            this._skeleton.playbackRate(this._playBackRate);
	        }
	    }
	    loadResComplete(resInfo) {
	        if (this.destroyed)
	            return;
	        if (resInfo.path.indexOf(this._resID) == -1) {
	            return;
	        }
	        this._templet = resInfo.templet;
	        this.initSkeleton();
	        if (this._skeleton != null) {
	            this._skeleton.playbackRate(this._playBackRate);
	            this._skeleton.scale(this._extraScale, this._extraScale);
	            if (this._playing) {
	                this._skeleton.play(this._action, this._loop, this._force, this._start, this._end, this._freshSkin);
	            }
	            this.updatePauseStatus();
	        }
	        this.event(SpineEvent.LOAD_COMPLETE);
	    }
	    loadResError(resInfo) {
	        Logger.log("动画加载失败,url=" + resInfo.path);
	    }
	    initSkeleton() {
	        this.disposeSkeleton();
	        this._skeleton = SpineControl.popSkeleton(this._templet);
	        this._skeleton.on(Event$a.STOPPED, this, this.onEndEvent);
	        this._skeleton.on(Event$a.LABEL, this, this.onLabelEvent);
	        this.addChildAt(this._skeleton, 0);
	    }
	    onEndEvent() {
	        if (this._autoDestroy) {
	            this.destroy();
	        }
	        this.event(SpineEvent.PLAY_END);
	    }
	    onLabelEvent(eventData) {
	        if (eventData.name.indexOf("play_") >= 0) {
	            var info = eventData.name.split("_");
	            var action = info[1];
	            var loop = 1;
	            if (info[2] != null) {
	                loop = info[2];
	            }
	            if (action) {
	                this.play(action, loop == 1);
	            }
	        }
	        this.event(SpineEvent.LABEL, eventData);
	    }
	    set paused(value) {
	        this._paused = value;
	        this.updatePauseStatus();
	    }
	    updatePauseStatus() {
	        if (this._skeleton != null && this._playing) {
	            var flag = this._paused || !this.displayedInStage;
	            if (flag) {
	                this._skeleton.paused();
	            }
	            else {
	                this._skeleton.resume();
	            }
	        }
	    }
	    get puased() {
	        return this._paused;
	    }
	    disposeSkeleton() {
	        if (this._skeleton) {
	            this._skeleton.removeSelf();
	            this._skeleton.off(Event$a.STOPPED, this, this.onEndEvent);
	            this._skeleton.off(Event$a.LABEL, this, this.onLabelEvent);
	            this._skeleton.stop();
	            SpineControl.recoverSkeleton(this._skeleton);
	            this._skeleton = null;
	        }
	    }
	}
	GameSpine.DEFAULT_SCALE = 1;

	class ItemConfig extends StructConfig {
	    get name() {
	        return LangUtils.getLang(this._name);
	    }
	    set name(value) {
	        this._name = value;
	    }
	    get info() {
	        return LangUtils.getLang(this._info);
	    }
	    set info(value) {
	        this._info = value;
	    }
	    get icon() {
	        return PathManager.getIconsPath("item001");
	    }
	    set icon(value) {
	        this._icon = value;
	    }
	}
	class ItemTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.item, this);
	    }
	    static get ins() {
	        return ItemTable._ins = ItemTable._ins || new ItemTable();
	    }
	    get recordCls() {
	        return ItemConfig;
	    }
	}

	class ItemUtils {
	    static getQualityBorder(quality) {
	        return PathManager.getDynamicPath("quality_" + quality);
	    }
	}

	class ItemVo {
	    constructor(itemid) {
	        this._itemId = itemid;
	        this._config = ItemTable.ins.getConfig(this._itemId);
	        this.num = 0;
	    }
	    get itemId() {
	        return this._itemId;
	    }
	    get config() {
	        return this._config;
	    }
	}

	class ItemEvent {
	}
	ItemEvent.ITEMS_UPDATE = "ITEMS_UPDATE";

	var EventDispatcher$2 = Laya.EventDispatcher;
	class ModelItem extends EventDispatcher$2 {
	    constructor() {
	        super();
	        this.items = {};
	    }
	    getItem(itemid) {
	        return this.items[itemid];
	    }
	    addItem(itemVo) {
	        this.items[itemVo.itemId] = itemVo;
	    }
	    delItem(itemid) {
	        delete this.items[itemid];
	    }
	    getOwnNum(itemid) {
	        var itemVo = this.getItem(itemid);
	        if (itemVo) {
	            return itemVo.num;
	        }
	        return 0;
	    }
	    getItemsByType(type) {
	        var list = [];
	        for (var key in this.items) {
	            var itemVo = this.items[key];
	            if (type == ItemType.All) {
	                list.push(itemVo);
	            }
	            else {
	                if (itemVo.config.type == type) {
	                    list.push(itemVo);
	                }
	            }
	        }
	        return list;
	    }
	    updateItem(itemid, num, sendEvent = true) {
	        if (num == 0) {
	            this.delItem(itemid);
	        }
	        else {
	            var itemVo = this.getItem(itemid);
	            if (itemVo) {
	                itemVo.num = num;
	            }
	            else {
	                itemVo = new ItemVo(itemid);
	                itemVo.num = num;
	                this.addItem(itemVo);
	            }
	        }
	        if (sendEvent) {
	            this.event(ItemEvent.ITEMS_UPDATE);
	        }
	    }
	    static get ins() {
	        return ModelItem._ins = ModelItem._ins || new ModelItem();
	    }
	}

	class MaterialVo {
	    constructor(id = "", num = 0, total = -1) {
	        this.id = id;
	        this.num = num;
	        this.total = total;
	    }
	    getType() {
	        return MaterialUtils.checkMaterialType(this.id);
	    }
	    getName() {
	        var config = this.getConfig();
	        if (config) {
	            return config.name;
	        }
	    }
	    getConfig() {
	        var type = this.getType();
	        var config;
	        switch (type) {
	            case MaterialType.Item:
	                config = ItemTable.ins.getConfig(this.id);
	                break;
	        }
	        return config;
	    }
	    getInfo() {
	        var config = this.getConfig();
	        if (config) {
	            return config.info;
	        }
	    }
	    getIcon() {
	        var config = this.getConfig();
	        if (config) {
	            return config.icon;
	        }
	    }
	}
	class MaterialUtils {
	    static transformMaterial(str) {
	        var list = [];
	        if (!str)
	            return list;
	        var arr = str.split(",");
	        for (var i = 0; i < arr.length; i++) {
	            var item = arr[i];
	            var temp = item.split("_");
	            var materialVo = new MaterialVo();
	            materialVo.id = temp[0];
	            materialVo.num = Number(temp[1]);
	            list.push(materialVo);
	        }
	        return list;
	    }
	    static checkEnough(list, gotoGet = true) {
	        for (var i = 0; i < list.length; i++) {
	            var materialVo = list[i];
	            if (MaterialUtils.checkMaterialType(materialVo.id) == MaterialType.Item) {
	                var enough = true;
	                if (materialVo.total >= 0) {
	                    if (materialVo.total < materialVo.num) {
	                        enough = false;
	                    }
	                }
	                else {
	                    var itemVo = ModelItem.ins.getItem(materialVo.id);
	                    if (!itemVo || itemVo.num < materialVo.num) {
	                        enough = false;
	                    }
	                }
	                if (!enough) {
	                    if (gotoGet) {
	                        MaterialUtils.gotoGetMaterial(materialVo);
	                    }
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    static checkMaterialType(id) {
	        if (GameUtils.checkValueInEnum(ItemID, id)) {
	            return MaterialType.Item;
	        }
	        else {
	            if (id.indexOf(MaterialType.Item) >= 0) {
	                return MaterialType.Item;
	            }
	            else {
	                return MaterialType.Unknown;
	            }
	        }
	    }
	    static gotoGetMaterial(materialVo) {
	        FloatMessage.showMessage(materialVo.getName() + "不足");
	    }
	    static findMaterial(id, list) {
	        for (var i = 0; i < list.length; i++) {
	            var materialVo = list[i];
	            if (materialVo.id == id) {
	                return materialVo;
	            }
	        }
	        return null;
	    }
	}

	var Event$b = Laya.Event;
	class GameIcon extends Container {
	    constructor() {
	        super();
	        this.view = new editor.share.GameIconUI();
	        this.addChild(this.view);
	        this._id = "";
	        this._num = 0;
	        this._showName = false;
	        this._canClick = true;
	        this._selected = false;
	    }
	    set selected(value) {
	        if (this._selected == value) {
	            return;
	        }
	        this._selected = value;
	        this.updateSelect();
	    }
	    updateSelect() {
	        this.view.imgSelected.visible = this._selected;
	    }
	    get selected() {
	        return this._selected;
	    }
	    onAdd() {
	        this.on(Event$b.CLICK, this, this.onClick);
	        this.updateSelect();
	    }
	    onRemove() {
	        this.off(Event$b.CLICK, this, this.onClick);
	    }
	    onClick() {
	        if (!this._canClick)
	            return;
	    }
	    setData(id, num = -1, showName = false, canClick = true) {
	        this.id = id;
	        this.num = num;
	        this.showName = showName;
	        this.canClick = canClick;
	    }
	    set num(value) {
	        this._num = value;
	        this.view.labelNum.visible = this._num < 0 ? false : true;
	        this.view.labelNum.text = this._num + "";
	    }
	    set showName(value) {
	        this._showName = value;
	        this.view.labelName.visible = this._showName;
	    }
	    set id(value) {
	        this._id = value;
	        var idType = MaterialUtils.checkMaterialType(this._id);
	        var func = this["update_" + idType];
	        if (func) {
	            func.apply(this);
	        }
	    }
	    update_item() {
	        var itemConfig = ItemTable.ins.getConfig(this._id);
	        if (itemConfig) {
	            this.view.imgIcon.skin = itemConfig.icon;
	            this.view.imgQuality.skin = ItemUtils.getQualityBorder(itemConfig.quality);
	            this.view.labelName.text = itemConfig.name;
	        }
	    }
	    set canClick(value) {
	        this._canClick = value;
	    }
	    set dataSource(value) {
	        super.dataSource = value;
	        if (value && value instanceof MaterialVo) {
	            this.visible = true;
	            this.setData(value.id, value.num);
	        }
	        else {
	            this.visible = false;
	        }
	    }
	}

	class RandomUtils {
	    static randInt(min, max) {
	        var random = Math.random() - 0.001;
	        var rand = min + Math.floor(random * (max - min + 1));
	        return rand;
	    }
	    static randFloat(min, max) {
	        return min + Math.random() * (max - min);
	    }
	    static randArrayElements(arr, num, repeat = true) {
	        var cache = {};
	        var list = [];
	        if (arr.length < num) {
	            return arr;
	        }
	        while (list.length < num) {
	            var index = RandomUtils.randInt(0, arr.length - 1);
	            if (cache[index] || repeat) {
	                list.push(arr[index]);
	                cache[index] = true;
	            }
	        }
	        return list;
	    }
	}

	var Tween$2 = Laya.Tween;
	var Point$3 = Laya.Point;
	var Ease$2 = Laya.Ease;
	var Handler$3 = Laya.Handler;
	var Image$2 = Laya.Image;
	class EffectUtils {
	    static playSpine(id, parent = null, x = 0, y = 0, scale = 1) {
	        if (!parent) {
	            parent = LayerManager.ins.effectLayer;
	        }
	        var spine = new GameSpine();
	        spine.autoDestroy = true;
	        spine.init(id);
	        parent.addChild(spine);
	        spine.x = x;
	        spine.y = y;
	        spine.scale(scale, scale);
	    }
	    static playAni(id, parent = null, x = 0, y = 0, scale = 1) {
	        if (!parent) {
	            parent = LayerManager.ins.effectLayer;
	        }
	        var ani = new GameAni();
	        ani.autoDestroy = true;
	        ani.init(id);
	        parent.addChild(ani);
	        ani.x = x;
	        ani.y = y;
	        ani.scale(scale, scale);
	    }
	    static itemParticlesFly(itemid, startX, startY, endX, endY) {
	    }
	    static imgParticlesFly(skin, startX, startY, endX, endY, scale = 1, num = 20, parent = null) {
	        if (!parent) {
	            parent = LayerManager.ins.effectLayer;
	        }
	        for (var i = 0; i < num; i++) {
	            var image = new Image$2();
	            image.skin = skin;
	            image.x = RandomUtils.randInt(-100, 100) + startX;
	            image.y = RandomUtils.randInt(-100, 100) + startY;
	            parent.addChild(image);
	            EffectUtils.spriteFly(image, endX, endY);
	        }
	    }
	    static rewardFly(list, x, y, scale = 1) {
	        for (var i = 0; i < list.length; i++) {
	            var target;
	            var materialVo = list[i];
	            var icon = new GameIcon();
	            icon.setData(materialVo.id, materialVo.num);
	            icon.anchorX = 0.5;
	            icon.anchorY = 0.5;
	            LayerManager.ins.effectLayer.addChild(icon);
	            if (!target) {
	                target = new Point$3(0, 0);
	            }
	            icon.x = RandomUtils.randInt(-100, 100) + x;
	            icon.y = y;
	            EffectUtils.spriteFly(icon, target.x, target.y);
	        }
	    }
	    static spriteFly(sprite, endX, endY, speed = 1000) {
	        var distance = MathUtils.distance(sprite.x, sprite.y, endX, endY);
	        var time = distance / speed * TimeUtils.oneSecondMs;
	        var complete = function () {
	            sprite.destroy();
	        };
	        Tween$2.to(sprite, { x: endX, y: endY }, time, Ease$2.sineIn, Handler$3.create(EffectUtils, complete));
	        Tween$2.to(sprite, { scaleX: 0.3, scaleY: 0.3 }, time * 0.7, Ease$2.sineIn, null, time * 0.3);
	        Tween$2.to(sprite, { alpha: 0.2 }, time * 0.5, Ease$2.linearOut, null, time * 0.5);
	    }
	    static showItemAdd(itemid, num, parent, x, y) {
	    }
	    static showValueAdd(icon, value, parent, x, y) {
	        var materialAdd = new editor.miscell.MaterialAddUI();
	        materialAdd.imgIcon.skin = icon;
	        materialAdd.labValue.text = value;
	        materialAdd.anchorX = materialAdd.anchorY = 0.5;
	        materialAdd.x = x;
	        materialAdd.y = y;
	        parent.addChild(materialAdd);
	        var onComplete = function () {
	            materialAdd.destroy();
	        };
	        Tween$2.to(materialAdd, { y: materialAdd.y - 100, alpha: 0 }, 2000, Ease$2.linearNone, Handler$3.create(EffectUtils, onComplete));
	    }
	}

	class AnimationKey {
	}
	AnimationKey.texiao_11043 = "texiao_11043";
	AnimationKey.texiao_11035 = "texiao_11035";
	AnimationKey.texiao_11036 = "texiao_11036";
	AnimationKey.aixin = "fx_aixin";
	AnimationKey.jidan = "fx_jidan";
	AnimationKey.test = "texiao_10000";

	var Sprite$5 = Laya.Sprite;
	class GameScene extends Sprite$5 {
	    constructor() {
	        super();
	    }
	    enter(params = null, complete = null) {
	        this.params = params;
	        this.complete = complete;
	        this.onEnter();
	    }
	    onEnter() {
	    }
	    onExit() {
	    }
	    tick(time) {
	    }
	    onStageResize() {
	    }
	    exit() {
	        this.onExit();
	        this.removeSelf();
	        this.destroy();
	    }
	    get type() {
	        return SceneType.None;
	    }
	}

	var EventDispatcher$3 = Laya.EventDispatcher;
	class ModelMap extends EventDispatcher$3 {
	    constructor() {
	        super();
	        this.entitys = {};
	        this.players = {};
	    }
	    addEntity(entityVo) {
	        this.entitys[entityVo.guid] = entityVo;
	    }
	    getEntity(guid) {
	        return this.entitys[guid];
	    }
	    delEntity(guid) {
	        delete this.entitys[guid];
	    }
	    addPlayer(playerVo) {
	        this.players[playerVo.game_uid] = playerVo;
	    }
	    getPlayer(uid) {
	        return this.players[uid];
	    }
	    delPlayer(uid) {
	        delete this.players[uid];
	    }
	    getPlayerList() {
	        var list = [];
	        for (var key in this.players) {
	            list.push(this.players[key]);
	        }
	        return list;
	    }
	    getEntityList() {
	        var list = [];
	        for (var key in this.entitys) {
	            list.push(this.entitys[key]);
	        }
	        return list;
	    }
	    static get ins() {
	        return ModelMap._ins = ModelMap._ins || new ModelMap();
	    }
	}

	class MapEvent {
	}
	MapEvent.ADD_PLAYER = "ADD_PLAYER";
	MapEvent.UPDATE_LOCATION = "UPDATE_LOCATION";
	MapEvent.BEHAVIOR = "BEHAVIOR";
	MapEvent.INTERACT = "INTERACT";
	MapEvent.REMOVE_PLAYER = "REMOVE_PLAYER";
	MapEvent.ADD_ENTITY = "ADD_ENTITY";
	MapEvent.REMOVE_ENTITY = "REMOVE_ENTITY";
	MapEvent.USER_INFO_CHANGED = "USER_INFO_CHANGED";
	MapEvent.USER_LEAVE_ROOM = "USER_LEAVE_ROOM";

	class MapCamera {
	    constructor(mapScene) {
	        this._x = 0;
	        this._y = 0;
	        this.mapScene = mapScene;
	    }
	    get x() {
	        return this._x;
	    }
	    get y() {
	        return this._y;
	    }
	    tick() {
	        var cameraX = this.mapScene.mainPlayer.virtualX - this.mapScene.map.viewPortWidth / 2;
	        var cameraY = this.mapScene.mainPlayer.virtualY - this.mapScene.map.viewPortHeight / 2;
	        cameraX = Math.max(0, Math.min(cameraX, this.mapScene.map.width - this.mapScene.map.viewPortWidth));
	        cameraY = Math.max(0, Math.min(cameraY, this.mapScene.map.height - this.mapScene.map.viewPortHeight));
	        this._x = cameraX;
	        this._y = cameraY;
	    }
	}

	class KeyEvent {
	}
	KeyEvent.KEY_DOWN = "KEY_DOWN";
	KeyEvent.KEY_UP = "KEY_UP";
	KeyEvent.KEY_ACTION = "KEY_ACTION";

	class AStar {
	    constructor(p_mapTileModel, allowDiagonal = true, containStart = false, p_maxTry = 5000) {
	        this.m_mapTileModel = p_mapTileModel;
	        this.m_maxTry = p_maxTry;
	        this.m_allowDiagonal = allowDiagonal;
	        this.m_containStart = containStart;
	    }
	    get maxTry() {
	        return this.m_maxTry;
	    }
	    set maxTry(p_value) {
	        this.m_maxTry = p_value;
	    }
	    find(p_startX, p_startY, p_endX, p_endY) {
	        this.initLists();
	        this.m_openCount = 0;
	        this.m_openId = -1;
	        this.openNote(p_startX, p_startY, 0, 0, 0);
	        var currTry = 0;
	        var currId;
	        var currNoteX;
	        var currNoteY;
	        var aroundNotes;
	        var checkingId;
	        var cost;
	        var score;
	        while (this.m_openCount > 0) {
	            if (++currTry > this.m_maxTry) {
	                this.destroyLists();
	                return null;
	            }
	            currId = this.m_openList[0];
	            this.closeNote(currId);
	            currNoteX = this.m_xList[currId];
	            currNoteY = this.m_yList[currId];
	            if (currNoteX == p_endX && currNoteY == p_endY) {
	                return this.getPath(p_startX, p_startY, currId);
	            }
	            aroundNotes = this.getArounds(currNoteX, currNoteY);
	            var len = aroundNotes.length;
	            for (var i = 0; i < len; i++) {
	                var note = aroundNotes[i];
	                cost = this.m_movementCostList[currId] + ((note[0] == currNoteX || note[1] == currNoteY) ? AStar.COST_STRAIGHT : AStar.COST_DIAGONAL);
	                score = cost + (Math.abs(p_endX - note[0]) + Math.abs(p_endY - note[1])) * AStar.COST_STRAIGHT;
	                if (this.isOpen(note[0], note[1])) {
	                    checkingId = this.m_noteMap[note[1]][note[0]][AStar.NOTE_ID];
	                    if (cost < this.m_movementCostList[checkingId]) {
	                        this.m_movementCostList[checkingId] = cost;
	                        this.m_pathScoreList[checkingId] = score;
	                        this.m_fatherList[checkingId] = currId;
	                        this.aheadNote(this.getIndex(checkingId));
	                    }
	                }
	                else {
	                    this.openNote(note[0], note[1], score, cost, currId);
	                }
	            }
	        }
	        this.destroyLists();
	        return null;
	    }
	    openNote(p_x, p_y, p_score, p_cost, p_fatherId) {
	        this.m_openCount++;
	        this.m_openId++;
	        if (this.m_noteMap[p_y] == null) {
	            this.m_noteMap[p_y] = [];
	        }
	        this.m_noteMap[p_y][p_x] = [];
	        this.m_noteMap[p_y][p_x][AStar.NOTE_OPEN] = true;
	        this.m_noteMap[p_y][p_x][AStar.NOTE_ID] = this.m_openId;
	        this.m_xList.push(p_x);
	        this.m_yList.push(p_y);
	        this.m_pathScoreList.push(p_score);
	        this.m_movementCostList.push(p_cost);
	        this.m_fatherList.push(p_fatherId);
	        this.m_openList.push(this.m_openId);
	        this.aheadNote(this.m_openCount);
	    }
	    closeNote(p_id) {
	        this.m_openCount--;
	        var noteX = this.m_xList[p_id];
	        var noteY = this.m_yList[p_id];
	        this.m_noteMap[noteY][noteX][AStar.NOTE_OPEN] = false;
	        this.m_noteMap[noteY][noteX][AStar.NOTE_CLOSED] = true;
	        if (this.m_openCount <= 0) {
	            this.m_openCount = 0;
	            this.m_openList = [];
	            return;
	        }
	        this.m_openList[0] = this.m_openList.pop();
	        this.backNote();
	    }
	    aheadNote(p_index) {
	        var father;
	        var change;
	        while (p_index > 1) {
	            father = Math.floor(p_index / 2);
	            if (this.getScore(p_index) < this.getScore(father)) {
	                change = this.m_openList[p_index - 1];
	                this.m_openList[p_index - 1] = this.m_openList[father - 1];
	                this.m_openList[father - 1] = change;
	                p_index = father;
	            }
	            else {
	                break;
	            }
	        }
	    }
	    backNote() {
	        var checkIndex = 1;
	        var tmp;
	        var change;
	        while (true) {
	            tmp = checkIndex;
	            if (2 * tmp <= this.m_openCount) {
	                if (this.getScore(checkIndex) > this.getScore(2 * tmp)) {
	                    checkIndex = 2 * tmp;
	                }
	                if (2 * tmp + 1 <= this.m_openCount) {
	                    if (this.getScore(checkIndex) > this.getScore(2 * tmp + 1)) {
	                        checkIndex = 2 * tmp + 1;
	                    }
	                }
	            }
	            if (tmp == checkIndex) {
	                break;
	            }
	            else {
	                change = this.m_openList[tmp - 1];
	                this.m_openList[tmp - 1] = this.m_openList[checkIndex - 1];
	                this.m_openList[checkIndex - 1] = change;
	            }
	        }
	    }
	    isOpen(p_x, p_y) {
	        if (this.m_noteMap[p_y] == null)
	            return false;
	        if (this.m_noteMap[p_y][p_x] == null)
	            return false;
	        return this.m_noteMap[p_y][p_x][AStar.NOTE_OPEN];
	    }
	    isClosed(p_x, p_y) {
	        if (this.m_noteMap[p_y] == null)
	            return false;
	        if (this.m_noteMap[p_y][p_x] == null)
	            return false;
	        return this.m_noteMap[p_y][p_x][AStar.NOTE_CLOSED];
	    }
	    getArounds(p_x, p_y) {
	        var arr = [];
	        var checkX;
	        var checkY;
	        var canDiagonal;
	        checkX = p_x + 1;
	        checkY = p_y;
	        var canRight = this.m_mapTileModel.canPass(checkX, checkY);
	        if (canRight && !this.isClosed(checkX, checkY)) {
	            arr.push([checkX, checkY]);
	        }
	        checkX = p_x;
	        checkY = p_y + 1;
	        var canDown = this.m_mapTileModel.canPass(checkX, checkY);
	        if (canDown && !this.isClosed(checkX, checkY)) {
	            arr.push([checkX, checkY]);
	        }
	        checkX = p_x - 1;
	        checkY = p_y;
	        var canLeft = this.m_mapTileModel.canPass(checkX, checkY);
	        if (canLeft && !this.isClosed(checkX, checkY)) {
	            arr.push([checkX, checkY]);
	        }
	        checkX = p_x;
	        checkY = p_y - 1;
	        var canUp = this.m_mapTileModel.canPass(checkX, checkY);
	        if (canUp && !this.isClosed(checkX, checkY)) {
	            arr.push([checkX, checkY]);
	        }
	        if (this.m_allowDiagonal) {
	            checkX = p_x + 1;
	            checkY = p_y + 1;
	            canDiagonal = this.m_mapTileModel.canPass(checkX, checkY);
	            if (canDiagonal && !this.isClosed(checkX, checkY)) {
	                arr.push([checkX, checkY]);
	            }
	            checkX = p_x - 1;
	            checkY = p_y + 1;
	            canDiagonal = this.m_mapTileModel.canPass(checkX, checkY);
	            if (canDiagonal && !this.isClosed(checkX, checkY)) {
	                arr.push([checkX, checkY]);
	            }
	            checkX = p_x - 1;
	            checkY = p_y - 1;
	            canDiagonal = this.m_mapTileModel.canPass(checkX, checkY);
	            if (canDiagonal && !this.isClosed(checkX, checkY)) {
	                arr.push([checkX, checkY]);
	            }
	            checkX = p_x + 1;
	            checkY = p_y - 1;
	            canDiagonal = this.m_mapTileModel.canPass(checkX, checkY);
	            if (canDiagonal && !this.isClosed(checkX, checkY)) {
	                arr.push([checkX, checkY]);
	            }
	        }
	        return arr;
	    }
	    getPath(p_startX, p_startY, p_id) {
	        var arr = [];
	        var noteX = this.m_xList[p_id];
	        var noteY = this.m_yList[p_id];
	        while (noteX != p_startX || noteY != p_startY) {
	            arr.unshift([noteX, noteY]);
	            p_id = this.m_fatherList[p_id];
	            noteX = this.m_xList[p_id];
	            noteY = this.m_yList[p_id];
	        }
	        if (this.m_containStart) {
	            arr.unshift([p_startX, p_startY]);
	        }
	        this.destroyLists();
	        return arr;
	    }
	    getIndex(p_id) {
	        var len = this.m_openList.length;
	        for (var i = 0; i < len; i++) {
	            var id = this.m_openList[i];
	            if (id == p_id) {
	                return (i + 1);
	            }
	        }
	        return -1;
	    }
	    getScore(p_index) {
	        return this.m_pathScoreList[this.m_openList[p_index - 1]];
	    }
	    initLists() {
	        this.m_openList = [];
	        this.m_xList = [];
	        this.m_yList = [];
	        this.m_pathScoreList = [];
	        this.m_movementCostList = [];
	        this.m_fatherList = [];
	        this.m_noteMap = [];
	    }
	    destroyLists() {
	        this.m_openList = null;
	        this.m_xList = null;
	        this.m_yList = null;
	        this.m_pathScoreList = null;
	        this.m_movementCostList = null;
	        this.m_fatherList = null;
	        this.m_noteMap = null;
	    }
	}
	AStar.COST_STRAIGHT = 10;
	AStar.COST_DIAGONAL = 14;
	AStar.NOTE_ID = 0;
	AStar.NOTE_OPEN = 1;
	AStar.NOTE_CLOSED = 2;

	var ColorFilter = Laya.ColorFilter;
	class FilterUtils {
	    static setBright(target, value) {
	        FilterUtils.setColorFilter(target, value, value, value);
	    }
	    static setGray(target, gray) {
	        if (gray) {
	            var matrix = [
	                0.33, 0.33, 0.33, 0, 0,
	                0.33, 0.33, 0.33, 0, 0,
	                0.33, 0.33, 0.33, 0, 0,
	                0, 0, 0, 1, 0
	            ];
	            var filter = new ColorFilter(matrix);
	            target.filters = [filter];
	        }
	        else {
	            FilterUtils.clearFilters(target);
	        }
	    }
	    static setColorFilter(target, r, g, b) {
	        var matrix = [
	            r, 0, 0, 0, 0,
	            0, g, 0, 0, 0,
	            0, 0, b, 0, 0,
	            0, 0, 0, 1, 0,
	        ];
	        var filter = new ColorFilter(matrix);
	        target.filters = [filter];
	    }
	    static clearFilters(target) {
	        target.filters = null;
	    }
	}

	class EntityUnit extends MapUnit {
	    constructor(mapScene) {
	        super(mapScene);
	        this.MAPMAXZORDER = 3000;
	        this.avatar = new GameAni();
	        this.addChild(this.avatar);
	    }
	    init(entityVo) {
	        this._entityVo = entityVo;
	        this.avatar.once(AniEvent.LOAD_COMPLETE, this, this.onLoadComplete);
	        this.avatar.init(this._entityVo.entityConfig.res);
	        this.setVirtualPos(this._entityVo.x, this._entityVo.y);
	    }
	    onLoadComplete() {
	        if (this.entityVo.entityConfig["rect"] == null) {
	            this.entityVo.entityConfig["rect"] = this.avatar.getSelfBounds().clone();
	        }
	    }
	    setHitArea(clear) {
	        if (clear) {
	            this.hitArea = null;
	        }
	        else {
	            this.hitArea = this.entityVo.entityConfig["rect"].clone();
	        }
	    }
	    tick(time) {
	        super.tick(time);
	        if (EntityManager.ins.cacheEntityUnit != this) {
	            this.zOrder = this._virtualY;
	        }
	        else {
	            this.zOrder = this.MAPMAXZORDER;
	        }
	    }
	    get entityVo() {
	        return this._entityVo;
	    }
	    onClick() {
	        if (EntityManager.ins.status == EntityBuildStatus.Clear) {
	            if (EntityManager.ins.cacheEntityUnit) {
	                GameHandler.ins.send_removeEntity(EntityManager.ins.cacheEntityUnit.entityVo.guid);
	                EntityManager.ins.cacheEntityUnit = null;
	            }
	        }
	    }
	    onMouseOver(e) {
	        if (EntityManager.ins.status == EntityBuildStatus.Clear) {
	            e.stopPropagation();
	            FilterUtils.setColorFilter(this, 2, 1, 1);
	            EntityManager.ins.cacheEntityUnit = this;
	            this.zOrder = this.MAPMAXZORDER;
	        }
	    }
	    onMouseOut(e) {
	        if (EntityManager.ins.status == EntityBuildStatus.Clear) {
	            if (EntityManager.ins.cacheEntityUnit == this) {
	                FilterUtils.setColorFilter(this, 1, 1, 1);
	                EntityManager.ins.cacheEntityUnit = null;
	                this.zOrder = this._virtualY;
	            }
	        }
	    }
	}

	var Ease$3 = Laya.Ease;
	var Handler$4 = Laya.Handler;
	var Tween$3 = Laya.Tween;
	var PlayerMessageUI = editor.miscell.PlayerMessageUI;
	class PlayerMsgVo {
	    constructor() {
	        this.msg = "";
	        this.liveTime = 0;
	        this.playerVo = null;
	        this.time = Laya.Browser.now();
	    }
	}
	class PlayerMessage {
	    static clearAll() {
	        if (PlayerMessage.messageUI) {
	            PlayerMessage.messageUI.removeSelf();
	        }
	        PlayerMessage.list.length = 0;
	        PlayerMessage.playing = false;
	    }
	    static findSameMsg(msg) {
	        for (var i = 0; i < PlayerMessage.list.length; i++) {
	            var playerMsgVo = PlayerMessage.list[i];
	            if (playerMsgVo.msg == msg) {
	                return true;
	            }
	        }
	        return false;
	    }
	    static floatNext() {
	        if (PlayerMessage.list.length == 0) {
	            PlayerMessage.clearAll();
	            return;
	        }
	        PlayerMessage.playing = true;
	        var playerMsgVo = PlayerMessage.list.shift();
	        var now = Laya.Browser.now();
	        if (now - playerMsgVo.time > 10000) {
	            PlayerMessage.floatNext();
	            return;
	        }
	        if (!PlayerMessage.messageUI) {
	            PlayerMessage.messageUI = new PlayerMessageUI();
	        }
	        if (!PlayerMessage.messageUI.parent) {
	            LayerManager.ins.topUILayer.addChild(PlayerMessage.messageUI);
	        }
	        PlayerMessage.messageUI.imgIcon.skin = playerMsgVo.playerVo.roleConfig.icon;
	        PlayerMessage.messageUI.labMsg.text = playerMsgVo.playerVo.nickname + playerMsgVo.msg;
	        PlayerMessage.messageUI.width = PlayerMessage.messageUI.imgBg.width = PlayerMessage.messageUI.labMsg.textField.textWidth + 62;
	        PlayerMessage.messageUI.x = Laya.stage.width / 2;
	        PlayerMessage.messageUI.y = 100;
	        PlayerMessage.messageUI.alpha = 0;
	        var showComplete = function () {
	            Tween$3.to(PlayerMessage.messageUI, { alpha: 0, y: PlayerMessage.messageUI.y - 50 }, 200, Ease$3.sineOut, Handler$4.create(PlayerMessage, hideComplete), playerMsgVo.liveTime);
	        };
	        var hideComplete = function () {
	            PlayerMessage.floatNext();
	        };
	        Tween$3.to(PlayerMessage.messageUI, { alpha: 1, y: PlayerMessage.messageUI.y - 50 }, 200, Ease$3.sineOut, Handler$4.create(PlayerMessage, showComplete));
	    }
	    static showMessage(playerVo, msg, liveTime = 1500) {
	        if (GameUtils.stringIsEmpty(msg)) {
	            return;
	        }
	        var playerMsgVo = new PlayerMsgVo();
	        playerMsgVo.playerVo = playerVo;
	        playerMsgVo.msg = msg;
	        playerMsgVo.liveTime = liveTime;
	        playerMsgVo.time = Laya.Browser.now();
	        PlayerMessage.list.push(playerMsgVo);
	        if (!PlayerMessage.playing) {
	            PlayerMessage.floatNext();
	        }
	    }
	}
	PlayerMessage.list = [];
	PlayerMessage.playing = false;

	class EffectUnit extends MapUnit {
	    constructor(mapScene) {
	        super(mapScene);
	        EffectUnit.curuid++;
	        this.uid = EffectUnit.curuid;
	        this.avatar = new GameAni();
	        this.avatar.on(AniEvent.PLAY_END, this, this.onAniPlayEnd);
	        this.addChild(this.avatar);
	    }
	    init(resId) {
	        this.avatar.init(resId, false);
	        if (resId == AnimationKey.aixin) {
	            this.avatar.interval = Math.floor(Config.animationInterval * 0.5);
	        }
	        else {
	            this.avatar.interval = Config.animationInterval;
	        }
	        this.avatar.play(AniAction.Idle, false, true);
	    }
	    onAniPlayEnd() {
	        this.mapScene.removeEffect(this);
	    }
	}
	EffectUnit.curuid = 0;

	class PlayerEvent {
	}
	PlayerEvent.PLAYER_MOVE = "PLAYER_MOVE";

	var TiledMap = Laya.TiledMap;
	var Rectangle$1 = Laya.Rectangle;
	var Handler$5 = Laya.Handler;
	var Point$4 = Laya.Point;
	var Event$c = Laya.Event;
	var LayerName;
	(function (LayerName) {
	    LayerName["Floor"] = "floor";
	    LayerName["Block"] = "block";
	    LayerName["Entity"] = "entity";
	    LayerName["Player"] = "player";
	    LayerName["Mask"] = "mask";
	})(LayerName || (LayerName = {}));
	var BlockType;
	(function (BlockType) {
	    BlockType[BlockType["None"] = 0] = "None";
	    BlockType[BlockType["Block"] = 1] = "Block";
	    BlockType[BlockType["Pass"] = 2] = "Pass";
	})(BlockType || (BlockType = {}));
	class MapScene extends GameScene {
	    constructor() {
	        super();
	        this.MAPSCALE = 0.75;
	        this._camera = new MapCamera(this);
	        this.passList = [];
	        this._map = new TiledMap();
	        this.playerDic = {};
	        this._aStar = new AStar(this);
	        this.cacheInteractUid = "";
	        this.entityDic = {};
	        this.effectDic = {};
	    }
	    get map() {
	        return this._map;
	    }
	    get camera() {
	        return this._camera;
	    }
	    get aStar() {
	        return this._aStar;
	    }
	    get mainPlayer() {
	        return this._mainPlayer;
	    }
	    onEnter() {
	        Logger.log("onEnter: " + ModelUser.ins.mapConfig.path);
	        this.initMap(ModelUser.ins.mapConfig.path);
	    }
	    initComplete() {
	        ModelMap.ins.on(MapEvent.ADD_PLAYER, this, this.addPlayer);
	        GameManager.ins.on(KeyEvent.KEY_DOWN, this, this.onKeyDown);
	        GameManager.ins.on(KeyEvent.KEY_UP, this, this.onKeyUp);
	        GameManager.ins.on(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	        GameManager.ins.on(PlayerEvent.PLAYER_MOVE, this, this.onPlayerMove);
	        ModelMap.ins.on(MapEvent.UPDATE_LOCATION, this, this.onUpdateLocation);
	        ModelMap.ins.on(MapEvent.BEHAVIOR, this, this.onBehavior);
	        ModelMap.ins.on(MapEvent.INTERACT, this, this.onInteract);
	        ModelMap.ins.on(MapEvent.REMOVE_PLAYER, this, this.onRemovePlayer);
	        ModelMap.ins.on(MapEvent.ADD_ENTITY, this, this.addEntity);
	        ModelMap.ins.on(MapEvent.REMOVE_ENTITY, this, this.onRemoveEntity);
	        ModelMap.ins.on(MapEvent.USER_INFO_CHANGED, this, this.onUserInfoChanged);
	        ModelMap.ins.on(MapEvent.USER_LEAVE_ROOM, this, this.onUserLeaveRoom);
	    }
	    onUserLeaveRoomLocked() {
	        const roomId = this.mainPlayer.playerVo.roomId;
	        const audioRoomId = this.mainPlayer.playerVo.audioRoomId;
	        let count = 0;
	        if (roomId != "") {
	            for (const key in this.playerDic) {
	                const player = this.playerDic[key];
	                if (player.playerVo.roomId == roomId) {
	                    count++;
	                }
	            }
	        }
	        else {
	            for (const key in this.playerDic) {
	                const player = this.playerDic[key];
	                if (player.playerVo.audioRoomId == audioRoomId) {
	                    count++;
	                }
	            }
	        }
	        Logger.log("zhgli onUserLeaveRoom1: " + count);
	        if (count == 1) {
	            this.mainPlayer.leaveSubRoom();
	        }
	    }
	    onUserLeaveRoom(data) {
	        Logger.log("zhgli onUserLeaveRoom: " + data);
	        Laya.timer.once(1000, this, this.onUserLeaveRoomLocked);
	    }
	    onUserInfoChanged(player) {
	        Logger.log("zhgli onUserInfoChanged");
	        if (player && this.playerDic) {
	            Logger.log("zhgli onUserInfoChanged: " + player.nickname + " " + player.audioRoomId + " " + player.rtcState + " " + player.roomId);
	            this.playerDic[player.game_uid].playerVo = player;
	        }
	    }
	    onExit() {
	        ModelMap.ins.offAll();
	        GameManager.ins.offAll();
	        this.floorLayer.offAll();
	        this._map.destroy();
	        this.floorLayer = null;
	        this.playerLayer = null;
	        this.blockLayer = null;
	        this.params = null;
	    }
	    onRemoveEntity(data) {
	        var guid = data["guid"];
	        var entityUnit = this.getEntity(guid);
	        if (!entityUnit) {
	            return;
	        }
	        entityUnit.destroy();
	        delete this.entityDic[guid];
	    }
	    onRemovePlayer(data) {
	        var game_uid = data["game_uid"];
	        var playerUnit = this.getPlayer(game_uid);
	        if (!playerUnit) {
	            return;
	        }
	        if (playerUnit == this.curCanInteractPlayer) {
	            this.curCanInteractPlayer = null;
	        }
	        if (this.cacheInteractUid == game_uid) {
	            TipUIManager.ins.closeTipById(TipUIKey.InteractTip);
	            this.cacheInteractUid = "";
	        }
	        PlayerMessage.showMessage(playerUnit.playerVo, "离开了房间");
	        playerUnit.destroy();
	        delete this.playerDic[game_uid];
	    }
	    onInteract(data) {
	        var game_uid = data["game_uid"];
	        var playerUnit = this.getPlayer(game_uid);
	        if (!playerUnit) {
	            return;
	        }
	        var target_uid = data["target_uid"];
	        var interact_id = data["interact_id"];
	        var params = data["params"];
	        playerUnit.doInteract(interact_id, target_uid, params);
	    }
	    onBehavior(data) {
	        var game_uid = data["game_uid"];
	        var playerUnit = this.getPlayer(game_uid);
	        if (!playerUnit) {
	            return;
	        }
	        var behavior_id = data["behavior_id"];
	        var params = data["params"];
	        playerUnit.doBehavior(behavior_id, params);
	    }
	    onUpdateLocation(data) {
	        var game_uid = data["game_uid"];
	        var playerUnit = this.getPlayer(game_uid);
	        if (!playerUnit) {
	            return;
	        }
	        var x = data["x"];
	        var y = data["y"];
	        var direction = data["direction"];
	        var time = data["time"];
	        playerUnit.updateLocation(x, y, direction, time);
	    }
	    onKeyDown(keyCode) {
	        Logger.log("onKeyDown: " + keyCode);
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        var direction = RoleDir.None;
	        switch (keyCode) {
	            case Laya.Keyboard.W:
	            case Laya.Keyboard.UP:
	                direction = RoleDir.Up;
	                break;
	            case Laya.Keyboard.D:
	            case Laya.Keyboard.RIGHT:
	                direction = RoleDir.Right;
	                break;
	            case Laya.Keyboard.S:
	            case Laya.Keyboard.DOWN:
	                direction = RoleDir.Down;
	                break;
	            case Laya.Keyboard.A:
	            case Laya.Keyboard.LEFT:
	                direction = RoleDir.Left;
	                break;
	        }
	        if (direction == RoleDir.None) {
	            return;
	        }
	        this.mainPlayer.startMove(this.mainPlayer.virtualX, this.mainPlayer.virtualY, direction);
	        TipUIManager.ins.closeTipById(TipUIKey.PerformTip);
	    }
	    onKeyUp(keyCode) {
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        var direction = RoleDir.None;
	        switch (keyCode) {
	            case Laya.Keyboard.W:
	            case Laya.Keyboard.UP:
	                direction = RoleDir.Up;
	                break;
	            case Laya.Keyboard.D:
	            case Laya.Keyboard.RIGHT:
	                direction = RoleDir.Right;
	                break;
	            case Laya.Keyboard.S:
	            case Laya.Keyboard.DOWN:
	                direction = RoleDir.Down;
	                break;
	            case Laya.Keyboard.A:
	            case Laya.Keyboard.LEFT:
	                direction = RoleDir.Left;
	                break;
	        }
	        if (direction == RoleDir.None) {
	            return;
	        }
	        this.mainPlayer.stopMove(direction);
	    }
	    onKeyAction(keyCode) {
	        if (EntityManager.ins.status != EntityBuildStatus.None) {
	            return;
	        }
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        switch (keyCode) {
	            case Laya.Keyboard.Q:
	                this.mainPlayer.onClick();
	                break;
	            case Laya.Keyboard.E:
	                if (this.curCanInteractPlayer) {
	                    this.curCanInteractPlayer.onClick();
	                }
	                else {
	                    FloatMessage.showMessage("附近没有可互动的目标");
	                    return;
	                }
	                break;
	        }
	    }
	    onPlayerMove(player) {
	        if (player == this.mainPlayer || player == this.curCanInteractPlayer) {
	            var nearstPlayer = this.getNearestIntractPlayer();
	            if (nearstPlayer != this.curCanInteractPlayer) {
	                if (this.curCanInteractPlayer) {
	                    this.curCanInteractPlayer.hideIntractTip();
	                    if (player.playerVo.rtcState == RtcState.Connected || player.playerVo.rtcState == RtcState.Connecting)
	                        Laya.timer.once(5000, this.mainPlayer, this.mainPlayer.disconnectVoice, new Array(nearstPlayer));
	                }
	                this.curCanInteractPlayer = nearstPlayer;
	                if (nearstPlayer != null) {
	                    nearstPlayer.showIntractTip();
	                    Laya.timer.once(2000, this.mainPlayer, this.mainPlayer.createOrJoinVoice, new Array(nearstPlayer));
	                }
	            }
	        }
	        else {
	            var myTile = this.mainPlayer.getStandTile();
	            var pTile = player.getStandTile();
	            var disp = myTile.distance(pTile.x, pTile.y);
	            if (disp <= PlayerUnit.INTRACT_DISTANCE) {
	                if (this.curCanInteractPlayer) {
	                    var cTile = this.curCanInteractPlayer.getStandTile();
	                    var disc = myTile.distance(cTile.x, cTile.y);
	                    if (disp < disc) {
	                        this.curCanInteractPlayer.hideIntractTip();
	                        this.curCanInteractPlayer = player;
	                        player.showIntractTip();
	                    }
	                }
	                else {
	                    player.showIntractTip();
	                    this.curCanInteractPlayer = player;
	                }
	            }
	        }
	    }
	    getNearestIntractPlayer() {
	        var arr = [];
	        for (var key in this.playerDic) {
	            if (this.playerDic[key] != this.mainPlayer) {
	                arr.push(this.playerDic[key]);
	            }
	        }
	        var myTile = this.mainPlayer.getStandTile();
	        arr.sort(function (a, b) {
	            var atile = a.getStandTile();
	            var disa = myTile.distance(atile.x, atile.y);
	            var btile = b.getStandTile();
	            var disb = myTile.distance(btile.x, btile.y);
	            return disa - disb;
	        });
	        var target = arr[0];
	        if (target) {
	            var ttile = target.getStandTile();
	            var dist = myTile.distance(ttile.x, ttile.y);
	            if (dist > PlayerUnit.INTRACT_DISTANCE) {
	                return null;
	            }
	            else {
	                return target;
	            }
	        }
	        else {
	            return null;
	        }
	    }
	    setAllEntitysHitArea(clear) {
	        for (var key in this.entityDic) {
	            this.entityDic[key].setHitArea(clear);
	        }
	    }
	    setAllPlayersHitArea(clear) {
	        for (var key in this.playerDic) {
	            this.playerDic[key].setHitArea(clear);
	        }
	    }
	    getEntity(guid) {
	        return this.entityDic[guid];
	    }
	    addEntity(data) {
	        var entityUnit = this.getEntity(data.guid);
	        if (entityUnit) {
	            return;
	        }
	        entityUnit = new EntityUnit(this);
	        this.entityDic[data.guid] = entityUnit;
	        entityUnit.init(data);
	        if (data.entityConfig.isFloor) {
	            this.entityLayer.addChild(entityUnit);
	        }
	        else {
	            this.playerLayer.addChild(entityUnit);
	        }
	        return entityUnit;
	    }
	    getPlayerList() {
	        return this.playerDic;
	    }
	    getPlayer(uid) {
	        return this.playerDic[uid];
	    }
	    addPlayer(data, showMsg = true) {
	        var playerUnit = this.getPlayer(data.game_uid);
	        if (playerUnit) {
	            return;
	        }
	        if (showMsg) {
	            PlayerMessage.showMessage(data, "进入了房间");
	        }
	        if (this.mainPlayer != null) {
	            GameHandler.ins.send_userInfoChanged(this.mainPlayer.playerVo);
	        }
	        playerUnit = new PlayerUnit(this);
	        this.playerDic[data.game_uid] = playerUnit;
	        if (data.x == null || data.y == null) {
	            const tile = this.randPassTile();
	            if (tile) {
	                data.x = tile[0];
	                data.y = tile[1];
	            }
	        }
	        playerUnit.init(data);
	        this.playerLayer.addChild(playerUnit);
	        return playerUnit;
	    }
	    playEffect(name, vx, vy, zorder) {
	        var effect = new EffectUnit(this);
	        effect.init(name);
	        effect.setVirtualPos(vx, vy);
	        effect.zOrder = zorder;
	        this.effectDic[effect.uid] = effect;
	        this.playerLayer.addChild(effect);
	    }
	    removeEffect(effect) {
	        delete this.effectDic[effect.uid];
	        effect.destroy();
	    }
	    initMap(mapPath) {
	        var viewRect = new Rectangle$1(0, 0, Laya.stage.width, Laya.stage.height);
	        var size = new Point$4(256, 256);
	        var padding = new Rectangle$1(100, 100, 100, 100);
	        this._map.createMap(mapPath, viewRect, Handler$5.create(this, this.onLoaded), padding, size);
	    }
	    onLoaded() {
	        this.addChild(this._map.mapSprite());
	        this.floorLayer = this._map.getLayerByName(LayerName.Floor);
	        this.blockLayer = this._map.getLayerByName(LayerName.Block);
	        this.entityLayer = this._map.getLayerByName(LayerName.Entity);
	        this.playerLayer = this._map.getLayerByName(LayerName.Player);
	        this.maskLayer = this._map.getLayerByName(LayerName.Mask);
	        this.maskLayer.alpha = 0.5;
	        this.maskDataDic = this.maskLayer["_dataDic"];
	        this.blockLayer.visible = false;
	        this.floorLayer.hitArea = new Rectangle$1(0, 0, Laya.stage.width / this.MAPSCALE, Laya.stage.height / this.MAPSCALE);
	        this.floorLayer.on(Event$c.CLICK, this, this.onFloorLayerClick);
	        this.generatePassList();
	        this.addSelfToMap();
	        this.addAllPlayerToMap();
	        this.addAllEntityToMap();
	        this.initComplete();
	        this._map.setViewPortPivotByScale(0, 0);
	        this._map.scale = this.MAPSCALE;
	        this.onStageResize();
	        if (this.complete) {
	            GameUtils.runCallBack(this.complete);
	            this.complete = null;
	        }
	    }
	    addAllPlayerToMap() {
	        var list = ModelMap.ins.getPlayerList();
	        for (var i = 0; i < list.length; i++) {
	            var playerVo = list[i];
	            this.addPlayer(playerVo, false);
	        }
	    }
	    addAllEntityToMap() {
	        var list = ModelMap.ins.getEntityList();
	        for (var i = 0; i < list.length; i++) {
	            var entityVo = list[i];
	            this.addEntity(entityVo);
	        }
	    }
	    tick(time) {
	        if (!this._mainPlayer)
	            return;
	        this._camera.tick();
	        if (GlobalVars.isTest) {
	            const targetTile = this.randPassTile();
	            if (targetTile && this.mainPlayer.status == PlayerStatus.Idle) {
	                this.mainPlayer.startMove(targetTile[0], targetTile[1], RoleDir.None);
	            }
	        }
	        for (var key in this.playerDic) {
	            this.playerDic[key].tick(time);
	        }
	        for (var key in this.entityDic) {
	            this.entityDic[key].tick(time);
	        }
	        for (var key in this.effectDic) {
	            this.effectDic[key].tick(time);
	        }
	        this.checkMask();
	        this.lockViewPort();
	    }
	    checkIn(point, vertexs, baseX, baseY) {
	        var x = point.x, y = point.y;
	        var inside = false;
	        for (var i = 0, j = vertexs.length - 1; i < vertexs.length; j = i++) {
	            var xi = vertexs[i].x + baseX, yi = vertexs[i].y + baseY;
	            var xj = vertexs[j].x + baseX, yj = vertexs[j].y + baseY;
	            var intersect = ((yi > y) != (yj > y))
	                && (x < ((xj - xi) * (y - yi) / (yj - yi) + xi));
	            if (intersect)
	                inside = !inside;
	        }
	        return inside;
	    }
	    ;
	    findPolygonLeft(vertexs) {
	        let xArray;
	        xArray = [];
	        for (let i = 0; i < vertexs.length; i++) {
	            xArray.push(vertexs[i].x);
	        }
	        return Math.abs(Math.min(...xArray));
	    }
	    findPolygonTop(vertexs) {
	        let xArray;
	        xArray = [];
	        for (let i = 0; i < vertexs.length; i++) {
	            xArray.push(vertexs[i].y);
	        }
	        return Math.abs(Math.min(...xArray));
	    }
	    findPolygonWidth(vertexs) {
	        let xArray;
	        xArray = [];
	        for (let i = 0; i < vertexs.length; i++) {
	            xArray.push(vertexs[i].x);
	        }
	        return Math.abs(Math.max(...xArray));
	    }
	    findPolygonHeight(vertexs) {
	        let xArray;
	        xArray = [];
	        for (let i = 0; i < vertexs.length; i++) {
	            xArray.push(vertexs[i].y);
	        }
	        return Math.abs(Math.max(...xArray));
	    }
	    checkMask() {
	        var spData;
	        var polygonData;
	        for (var key in this.maskDataDic) {
	            var polygon = this.maskDataDic[key].polygon;
	            if (polygon != null) {
	                let points;
	                points = [];
	                for (let i = 0; i < polygon.length; i++) {
	                    points.push(polygon[i].x, polygon[i].y);
	                }
	                if (this.checkIn(new Point$4(this.mainPlayer.virtualX, this.mainPlayer.virtualY), polygon, this.maskDataDic[key].x, this.maskDataDic[key].y)) {
	                    polygonData = polygon;
	                    this.maskLayer.graphics.clear();
	                    let startX = Math.max(0, this.maskDataDic[key].x - this._camera.x);
	                    let startY = Math.max(0, this.maskDataDic[key].y - this._camera.y);
	                    let endX = Math.min(Laya.stage.width / this.MAPSCALE, this.maskDataDic[key].x + this.findPolygonWidth(polygon) - this._camera.x);
	                    let endY = Math.min(Laya.stage.height / this.MAPSCALE, this.maskDataDic[key].y + this.findPolygonHeight(polygon) - this._camera.y);
	                    this.maskLayer.graphics.drawPoly(startX, startY, points, "#ab3eee", "#ffffff", 2);
	                    this.maskLayer.graphics.alpha(0.3);
	                    this.maskLayer.graphics.drawRect(0, 0, startX - this.findPolygonLeft(polygon), Laya.stage.height / this.MAPSCALE, "0x000000");
	                    this.maskLayer.graphics.drawRect(endX, 0, Laya.stage.width / this.MAPSCALE - endX, Laya.stage.height / this.MAPSCALE, "0x000000");
	                    this.maskLayer.graphics.drawRect(startX - this.findPolygonLeft(polygon), 0 - this.findPolygonTop(polygon), endX - startX + this.findPolygonLeft(polygon), startY, "0x000000");
	                    this.maskLayer.graphics.drawRect(startX - this.findPolygonLeft(polygon), endY, endX - startX + this.findPolygonLeft(polygon), Laya.stage.height / this.MAPSCALE - endY, "0x000000");
	                }
	            }
	            else {
	                var rect = new Rectangle$1(this.maskDataDic[key].x, this.maskDataDic[key].y, this.maskDataDic[key].width, this.maskDataDic[key].height);
	                if (rect.contains(this.mainPlayer.virtualX, this.mainPlayer.virtualY)) {
	                    spData = this.maskDataDic[key];
	                }
	            }
	        }
	        if (!this.mainPlayer || !this.mainPlayer.playerVo) {
	            return;
	        }
	        if (spData) {
	            if (this.mainPlayer.playerVo.roomId == "") {
	                this.mainPlayer.playerVo.roomId = spData["name"];
	                GameHandler.ins.send_userInfoChanged(this.mainPlayer.playerVo);
	                this.mainPlayer.createOrJoinVoice(null);
	            }
	            var startX = Math.max(0, spData["x"] - this._camera.x);
	            var startY = Math.max(0, spData["y"] - this._camera.y);
	            var endX = Math.min(Laya.stage.width / this.MAPSCALE, spData["x"] + spData["width"] - this._camera.x);
	            var endY = Math.min(Laya.stage.height / this.MAPSCALE, spData["y"] + spData["height"] - this._camera.y);
	            this.maskLayer.graphics.clear();
	            this.maskLayer.graphics.alpha(0.3);
	            this.maskLayer.graphics.drawRect(0, 0, startX, Laya.stage.height / this.MAPSCALE, "0x000000");
	            this.maskLayer.graphics.drawRect(endX, 0, Laya.stage.width / this.MAPSCALE - endX, Laya.stage.height / this.MAPSCALE, "0x000000");
	            this.maskLayer.graphics.drawRect(startX, 0, endX - startX, startY, "0x000000");
	            this.maskLayer.graphics.drawRect(startX, endY, endX - startX, Laya.stage.height / this.MAPSCALE - endY, "0x000000");
	        }
	        else {
	            if (polygonData == null) {
	                this.maskLayer.graphics.clear();
	                if (this.mainPlayer.playerVo.roomId != "") {
	                    this.mainPlayer.playerVo.roomId = "";
	                    GameHandler.ins.send_userInfoChanged(this.mainPlayer.playerVo);
	                    this.mainPlayer.disconnectVoice(null);
	                }
	            }
	        }
	    }
	    checkSameRoomPlayer(roomId) {
	        const result = [];
	        for (const key in this.playerDic) {
	            const player = this.playerDic[key];
	            if (player.getRoomId().equal(roomId)) {
	                result.push(player);
	            }
	        }
	        return result;
	    }
	    lockViewPort() {
	        this._map.moveViewPort(this._camera.x, this._camera.y);
	    }
	    addSelfToMap() {
	        Logger.log("addSelfToMap-----------------------------");
	        var tile = this.randPassTile();
	        var data = {};
	        data["nickname"] = ModelUser.ins.nickname;
	        data["role_id"] = ModelUser.ins.role_id;
	        data["game_uid"] = ModelUser.ins.game_uid;
	        data["x"] = tile[0];
	        data["y"] = tile[1];
	        Logger.log("userInit: " + ModelUser.ins.x + " " + ModelUser.ins.y);
	        if (ModelUser.ins.x != null && ModelUser.ins.y != null && ModelUser.ins.x != 0 && ModelUser.ins.y != 0) {
	            data["x"] = ModelUser.ins.x;
	            data["y"] = ModelUser.ins.y;
	        }
	        data["direction"] = RoleDir.Down;
	        if (ModelUser.ins.direction != null) {
	            data["direction"] = ModelUser.ins.direction;
	        }
	        data["color"] = ModelUser.ins.color;
	        var playerVo = ProtocolUtils.createPlayerVo(data);
	        this._mainPlayer = this.addPlayer(playerVo, false);
	        GameHandler.ins.send_addUser(data);
	    }
	    isPlayerTile(tileX, tileY) {
	        for (const key in this.playerDic) {
	            if (this.playerDic[key] != this.mainPlayer) {
	                const player = this.playerDic[key];
	                const distance = player.getStandTile().distance(tileX, tileY);
	                if (distance < 2) {
	                    return true;
	                }
	            }
	        }
	    }
	    isBlock(tileX, tileY) {
	        var tileData = this.blockLayer.getTileData(tileX, tileY);
	        return tileData == BlockType.None || tileData == BlockType.Block;
	    }
	    checkBlockInArea(rect) {
	        var starttile = this.getPosTile(rect.x, rect.y);
	        var endtile = this.getPosTile(rect.x + rect.width, rect.y + rect.height);
	        for (var i = starttile.x; i <= endtile.x; i++) {
	            for (var j = starttile.y; j <= endtile.y; j++) {
	                if (this.isBlock(i, j)) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	    checkCanPutEntity(mapPos, config) {
	        var rect;
	        var x;
	        var y;
	        var w;
	        var h;
	        w = config["rect"].width;
	        x = mapPos.x - w * 0.5;
	        if (config.isFloor) {
	            h = config["rect"].height;
	            y = mapPos.y - h * 0.5;
	        }
	        else {
	            h = config.vGridNum * this._map.tileHeight;
	            y = mapPos.y - h;
	        }
	        rect = new Rectangle$1(x, y, w, h);
	        return this.checkBlockInArea(rect);
	    }
	    generatePassList() {
	        this.passList.length = 0;
	        for (let col = 0; col < this._map.numColumnsTile; col++) {
	            for (var row = 0; row < this._map.numRowsTile; row++) {
	                if (!this.isBlock(col, row)) {
	                    this.passList.push([col, row]);
	                }
	            }
	        }
	    }
	    randPassTile() {
	        return this.passList[RandomUtils.randInt(0, this.passList.length - 1)];
	    }
	    getTilePos(tileX, tileY) {
	        var pos = new Point$4();
	        pos.x = this._map.tileWidth * tileX + this._map.tileWidth / 2;
	        pos.y = this._map.tileHeight * tileY + this._map.tileHeight / 2;
	        return pos;
	    }
	    getPosTile(x, y) {
	        var tile = new Point$4();
	        tile.x = Math.floor(x / this.map.tileWidth);
	        tile.y = Math.floor(y / this.map.tileHeight);
	        return tile;
	    }
	    get type() {
	        return SceneType.Map;
	    }
	    onStageResize() {
	        if (!this.mainPlayer) {
	            return;
	        }
	        this._map.changeViewPort(this._map.viewPortX, this._map.viewPortY, Laya.stage.width, Laya.stage.height);
	        this.floorLayer.hitArea = new Rectangle$1(0, 0, Laya.stage.width / this.MAPSCALE, Laya.stage.height / this.MAPSCALE);
	    }
	    canPass(checkX, checkY) {
	        return !this.isBlock(checkX, checkY);
	    }
	    onFloorLayerClick() {
	        if (EntityManager.ins.status != EntityBuildStatus.None) {
	            return;
	        }
	        var tile = this.getPosTile(this.floorLayer.mouseX + this.camera.x, this.floorLayer.mouseY + this.camera.y);
	        if (this.isBlock(tile.x, tile.y)) {
	            FloatMessage.showMessage("您点击的地方不能通行");
	            return;
	        }
	        var myTile = this.mainPlayer.getStandTile();
	        if (myTile.x == tile.x && myTile.y == tile.y) {
	            return;
	        }
	        this.mainPlayer.startMove(tile.x, tile.y, RoleDir.None);
	        TipUIManager.ins.closeTipById(TipUIKey.PerformTip);
	        PanelManager.ins.mainUIPanel.hideBuild(true);
	    }
	    mapToScreenCoord(x, y) {
	        return new Point$4(x / this.MAPSCALE - this.camera.x, y / this.MAPSCALE - this.camera.y);
	    }
	    screenToMapCoord(x, y) {
	        return new Point$4(x / this.MAPSCALE + this.camera.x, y / this.MAPSCALE + this.camera.y);
	    }
	    getEntityByTile(x, y) {
	        for (var key in this.entityDic) {
	            var entityUnit = this.entityDic[key];
	            var tile = entityUnit.getStandTile();
	            if (x == tile.x && y == tile.y) {
	                return entityUnit;
	            }
	        }
	        return null;
	    }
	}

	var Sprite$6 = Laya.Sprite;
	var Handler$6 = Laya.Handler;
	var Tween$4 = Laya.Tween;
	var Ease$4 = Laya.Ease;
	var SceneType;
	(function (SceneType) {
	    SceneType[SceneType["None"] = 0] = "None";
	    SceneType[SceneType["Map"] = 1] = "Map";
	})(SceneType || (SceneType = {}));
	class SceneManager {
	    constructor() {
	        this.scenes = {};
	    }
	    enter(type, params = null, complete = null) {
	        if (this._currentScene) {
	            if (this._currentScene.type == type) {
	                return;
	            }
	            else {
	                this._currentScene.exit();
	            }
	        }
	        this._currentScene = this.scenes[type];
	        if (!this._currentScene) {
	            this._currentScene = this.createScene(type);
	        }
	        LayerManager.ins.sceneLayer.addChild(this._currentScene);
	        this._currentScene.enter(params, complete);
	    }
	    tick(time) {
	        if (this._currentScene) {
	            this._currentScene.tick(time);
	        }
	    }
	    createScene(type) {
	        var scene;
	        switch (type) {
	            case SceneType.Map:
	                scene = new MapScene();
	                break;
	        }
	        return scene;
	    }
	    onStageResize() {
	        if (this.blackLayer) {
	            this.blackLayer.graphics.clear();
	            this.blackLayer.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000000");
	            this.blackLayer.size(Laya.stage.width + 1, Laya.stage.height);
	        }
	        if (this._currentScene) {
	            this._currentScene.onStageResize();
	        }
	    }
	    get currentScene() {
	        return this._currentScene;
	    }
	    fadeBlackLayer(fadeIn = true, complete = null) {
	        if (!this.blackLayer) {
	            this.blackLayer = new Sprite$6();
	            this.blackLayer.zOrder = GameZOrder.FadeBlack;
	            this.blackLayer.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000000");
	            this.blackLayer.size(Laya.stage.width + 1, Laya.stage.height);
	            this.blackLayer.mouseEnabled = true;
	            Laya.stage.addChild(this.blackLayer);
	            this.blackLayer.visible = false;
	        }
	        if (fadeIn) {
	            this.blackLayer.visible = true;
	            this.blackLayer.alpha = 0;
	            Tween$4.to(this.blackLayer, { alpha: 1 }, 300, Ease$4.linearNone, Handler$6.create(this, function () {
	                if (complete) {
	                    GameUtils.runCallBack(complete);
	                }
	            }));
	        }
	        else {
	            Tween$4.to(this.blackLayer, { alpha: 0 }, 300, Ease$4.linearNone, Handler$6.create(this, function () {
	                this.blackLayer.visible = false;
	                if (complete) {
	                    GameUtils.runCallBack(complete);
	                }
	            }));
	        }
	    }
	    static get ins() {
	        return SceneManager._ins = SceneManager._ins || new SceneManager();
	    }
	}
	SceneManager._ins = null;

	var Event$d = Laya.Event;
	var Mouse = Laya.Mouse;
	var Image$3 = Laya.Image;
	class StageManager {
	    static init() {
	        Laya.stage.on(Event$d.CLICK, StageManager, StageManager.stageClickHandler);
	        Laya.stage.on(Event$d.MOUSE_DOWN, StageManager, StageManager.stageDownHandler);
	        Laya.stage.on(Event$d.MOUSE_UP, StageManager, StageManager.stageUpHandler);
	        Laya.stage.on(Event$d.RESIZE, StageManager, StageManager.onStageResize);
	        Laya.stage.on(Event$d.MOUSE_MOVE, StageManager, StageManager.stageMoveHandler);
	    }
	    static stageClickHandler(event) {
	    }
	    static stageDownHandler(event) {
	        StageManager.mouseAlreadyMoved = false;
	        EffectUtils.playAni(AnimationKey.texiao_11043, null, Laya.stage.mouseX, Laya.stage.mouseY);
	    }
	    static stageUpHandler(event) {
	    }
	    static stageMoveHandler(event) {
	        StageManager.mouseAlreadyMoved = true;
	        if (StageManager.cursor) {
	            StageManager.cursor.pos(Laya.stage.mouseX, Laya.stage.mouseY);
	        }
	        EntityManager.ins.onMouseMove();
	    }
	    static changeCursor(skin, anchorX = 0.5, anchorY = 0.5) {
	        if (!StageManager.cursor) {
	            StageManager.cursor = new Image$3();
	            StageManager.cursor.zOrder = GameZOrder.MouseCursor;
	            StageManager.cursor.skin = skin;
	            StageManager.cursor.anchorX = anchorX;
	            StageManager.cursor.anchorY = anchorY;
	            Laya.stage.addChild(StageManager.cursor);
	        }
	        Mouse.hide();
	        StageManager.cursor.pos(Laya.stage.mouseX, Laya.stage.mouseY);
	    }
	    static restoreCursor() {
	        if (StageManager.cursor) {
	            StageManager.cursor.destroy();
	            StageManager.cursor = null;
	        }
	        Mouse.show();
	    }
	    static onStageResize() {
	        LayerManager.ins.onStageResize();
	        SceneManager.ins.onStageResize();
	        PanelManager.ins.onStageResize();
	        EntityManager.ins.onStageResize();
	    }
	}
	StageManager.mouseAlreadyMoved = false;

	var Sprite$7 = Laya.Sprite;
	var Event$e = Laya.Event;
	var EntityBuildStatus;
	(function (EntityBuildStatus) {
	    EntityBuildStatus[EntityBuildStatus["None"] = 0] = "None";
	    EntityBuildStatus[EntityBuildStatus["Build"] = 1] = "Build";
	    EntityBuildStatus[EntityBuildStatus["Clear"] = 2] = "Clear";
	})(EntityBuildStatus || (EntityBuildStatus = {}));
	class EntityManager {
	    constructor() {
	        this.status = EntityBuildStatus.None;
	        this.buildAreaW = 0;
	        this.layer = new Sprite$7();
	        this.layer.size(Laya.stage.width, Laya.stage.height);
	        this.layer.mouseEnabled = true;
	        this.layer.zOrder = -1;
	        this.layer.visible = false;
	        this.layer.on(Event$e.CLICK, this, this.layerClick);
	        LayerManager.ins.mainUILayer.addChild(this.layer);
	        this.cacheEntityUnit = null;
	    }
	    layerClick() {
	        var mapScene = SceneManager.ins.currentScene;
	        if (this.status == EntityBuildStatus.Build) {
	            var mapPos = this.getMouseMapPos();
	            if (mapScene.checkCanPutEntity(mapPos, this.config) == false) {
	                FloatMessage.showMessage("此处无法摆放");
	            }
	            else {
	                GameHandler.ins.send_buildEntity(this.config.id, Math.round(mapPos.x), Math.round(mapPos.y));
	            }
	        }
	    }
	    setBuildAreaW(w) {
	        this.buildAreaW = w;
	        this.layer.size(Laya.stage.width - this.buildAreaW, Laya.stage.height);
	    }
	    onStageResize() {
	        this.layer.size(Laya.stage.width - this.buildAreaW, Laya.stage.height);
	    }
	    onMouseMove() {
	        var mapScene = SceneManager.ins.currentScene;
	        if (mapScene == null) {
	            return;
	        }
	        if (this.status == EntityBuildStatus.Build) {
	            if (this.checkMouseInBuildArea()) {
	                this.proxy.visible = false;
	                StageManager.restoreCursor();
	            }
	            else {
	                StageManager.changeCursor("");
	                this.proxy.visible = true;
	                this.proxy.pos(Laya.stage.mouseX, Laya.stage.mouseY);
	                var mapPos = this.getMouseMapPos();
	                if (mapScene.checkCanPutEntity(mapPos, this.config) == false) {
	                    FilterUtils.setColorFilter(this.proxy, 2, 1, 1);
	                }
	                else {
	                    FilterUtils.setColorFilter(this.proxy, 1, 1, 1);
	                }
	            }
	        }
	        else if (this.status == EntityBuildStatus.Clear) {
	            if (this.checkMouseInBuildArea()) {
	                StageManager.restoreCursor();
	            }
	            else {
	                StageManager.changeCursor(PathManager.getCommonPath("eraser"));
	            }
	        }
	    }
	    checkMouseInBuildArea() {
	        return Laya.stage.mouseX > Laya.stage.width - this.buildAreaW;
	    }
	    getMouseTile() {
	        var mapScene = SceneManager.ins.currentScene;
	        var mapCoord = mapScene.screenToMapCoord(Laya.stage.mouseX, Laya.stage.mouseY);
	        return mapScene.getPosTile(mapCoord.x, mapCoord.y);
	    }
	    getMouseMapPos() {
	        var mapScene = SceneManager.ins.currentScene;
	        var mapCoord = mapScene.screenToMapCoord(Laya.stage.mouseX, Laya.stage.mouseY);
	        return mapCoord;
	    }
	    toBuild(config) {
	        this.cancelBuild();
	        this.cancelClear();
	        this.config = config;
	        this.lockScreen();
	        if (!this.proxy) {
	            this.proxy = new GameAni();
	            this.proxy.once(AniEvent.LOAD_COMPLETE, this, this.onLoadComplete);
	            this.proxy.zOrder = GameZOrder.MouseCursor;
	            this.proxy.init(config.res);
	            this.proxy.pos(Laya.stage.mouseX, Laya.stage.mouseY);
	            this.proxy.scale(0.75, 0.75);
	            Laya.stage.addChild(this.proxy);
	        }
	        StageManager.changeCursor("");
	        this.status = EntityBuildStatus.Build;
	    }
	    onLoadComplete() {
	        if (this.config["rect"] == null) {
	            var rect = this.proxy.getSelfBounds().clone();
	            this.config["rect"] = rect;
	        }
	    }
	    toClear() {
	        this.cancelBuild();
	        this.cancelClear();
	        StageManager.changeCursor(PathManager.getCommonPath("eraser"));
	        this.status = EntityBuildStatus.Clear;
	        var mapScene = SceneManager.ins.currentScene;
	        mapScene.setAllEntitysHitArea(false);
	        mapScene.setAllPlayersHitArea(true);
	    }
	    lockScreen() {
	        this.layer.visible = true;
	    }
	    unlockScreen() {
	        this.layer.visible = false;
	    }
	    cancelBuild() {
	        if (this.status != EntityBuildStatus.Build) {
	            return;
	        }
	        if (this.proxy) {
	            this.proxy.destroy();
	            this.proxy = null;
	        }
	        this.cacheEntityUnit = null;
	        this.config = null;
	        StageManager.restoreCursor();
	        this.unlockScreen();
	        this.status = EntityBuildStatus.None;
	    }
	    cancelClear() {
	        if (this.status != EntityBuildStatus.Clear) {
	            return;
	        }
	        this.cacheEntityUnit = null;
	        this.config = null;
	        StageManager.restoreCursor();
	        this.unlockScreen();
	        var mapScene = SceneManager.ins.currentScene;
	        mapScene.setAllEntitysHitArea(true);
	        mapScene.setAllPlayersHitArea(false);
	        this.status = EntityBuildStatus.None;
	    }
	    static get ins() {
	        return EntityManager._ins = EntityManager._ins || new EntityManager();
	    }
	}
	EntityManager._ins = null;

	var Point$5 = Laya.Point;
	var Rectangle$2 = Laya.Rectangle;
	var PlayerStatus;
	(function (PlayerStatus) {
	    PlayerStatus[PlayerStatus["Idle"] = 0] = "Idle";
	    PlayerStatus[PlayerStatus["UpdateLocation"] = 1] = "UpdateLocation";
	    PlayerStatus[PlayerStatus["KeyWalk"] = 2] = "KeyWalk";
	    PlayerStatus[PlayerStatus["MouseWalk"] = 3] = "MouseWalk";
	})(PlayerStatus || (PlayerStatus = {}));
	var VoiceAction;
	(function (VoiceAction) {
	    VoiceAction[VoiceAction["Create"] = 0] = "Create";
	    VoiceAction[VoiceAction["Join"] = 1] = "Join";
	})(VoiceAction || (VoiceAction = {}));
	var RtcState;
	(function (RtcState) {
	    RtcState[RtcState["Idle"] = 1] = "Idle";
	    RtcState[RtcState["Connecting"] = 2] = "Connecting";
	    RtcState[RtcState["Connected"] = 3] = "Connected";
	    RtcState[RtcState["Error"] = 0] = "Error";
	    RtcState[RtcState["Disconnected"] = 4] = "Disconnected";
	})(RtcState || (RtcState = {}));
	class PlayerUnit extends MapUnit {
	    constructor(mapScene) {
	        super(mapScene);
	        this.hitArea = new Rectangle$2(-PlayerUnit.ROLE_WIDTH / 2, -PlayerUnit.ROLE_HEIGHT, PlayerUnit.ROLE_WIDTH, PlayerUnit.ROLE_HEIGHT);
	        this.avatar = new GameAni();
	        this.avatar.on(AniEvent.PLAY_END, this, this.onAniPlayEnd);
	        this.addChild(this.avatar);
	        this.head = new editor.map.PlayerHeadUI();
	        this.addChild(this.head);
	        this.head.x = -this.head.width / 2;
	        this.head.y = -PlayerUnit.ROLE_HEIGHT - this.head.height;
	        this.status = PlayerStatus.Idle;
	        this.pathList = [];
	        this.updateLocationList = [];
	        this.targetCoord = null;
	        this.lastStandTile = null;
	    }
	    onAniPlayEnd() {
	        switch (this.avatar.action) {
	            case AniAction.Beckon:
	            case AniAction.Applaud:
	            case AniAction.Ease:
	            case AniAction.Cheer:
	            case AniAction.Celebrate:
	            case AniAction.Embrace:
	                this.doAction(AniAction.Idle, this.avatar.currentDir);
	                break;
	        }
	    }
	    getWalkDistance(time, radian) {
	        var second = time / TimeUtils.oneSecondMs;
	        var distanceX = Math.cos(radian) * PlayerUnit.WARLK_SPEED * second;
	        var distanceY = Math.sin(radian) * PlayerUnit.WARLK_SPEED * second;
	        return new Point$5(distanceX, distanceY);
	    }
	    getKeyWalkDistance(time) {
	        var angle = 0;
	        switch (this.walkDir) {
	            case RoleDir.Up:
	                angle = 270;
	                break;
	            case RoleDir.Right:
	                angle = 0;
	                break;
	            case RoleDir.Down:
	                angle = 90;
	                break;
	            case RoleDir.Left:
	                angle = 180;
	                break;
	        }
	        var radian = MathUtils.angleToRadian(angle);
	        return this.getWalkDistance(time, radian);
	    }
	    getMouseWalkDistance(time) {
	        var coord = this.targetCoord;
	        var radian = MathUtils.radian(new Point$5(this._virtualX, this._virtualY), coord);
	        return this.getWalkDistance(time, radian);
	    }
	    tick(time) {
	        super.tick(time);
	        if (this.status == PlayerStatus.KeyWalk) {
	            const walkDistance = this.getKeyWalkDistance(time);
	            var nextX = this._virtualX + walkDistance.x;
	            var nextY = this._virtualY + walkDistance.y;
	            var tile = this.mapScene.getPosTile(nextX, nextY);
	            var isBlock = this.mapScene.isBlock(tile.x, tile.y) || this.mapScene.isPlayerTile(tile.x, tile.y);
	            if (this.walkDir == RoleDir.Up) {
	                isBlock = this.mapScene.isBlock(tile.x, tile.y - 1) || this.mapScene.isPlayerTile(tile.x, tile.y);
	            }
	            if (!isBlock) {
	                this._virtualX = nextX;
	                this._virtualY = nextY;
	            }
	        }
	        else if (this.status == PlayerStatus.MouseWalk) {
	            if (this.targetCoord) {
	                const walkDistance = this.getMouseWalkDistance(time);
	                var leaveDistance = MathUtils.distance(this._virtualX, this._virtualY, this.targetCoord.x, this.targetCoord.y);
	                if (MathUtils.getPointLength(walkDistance) >= leaveDistance) {
	                    this._virtualX = this.targetCoord.x;
	                    this._virtualY = this.targetCoord.y;
	                    this.moveToNextTile();
	                }
	                else {
	                    this._virtualX = this._virtualX + walkDistance.x;
	                    this._virtualY = this._virtualY + walkDistance.y;
	                }
	            }
	        }
	        else if (this.status == PlayerStatus.UpdateLocation) {
	            if (this.targetCoord) {
	                Logger.log("onMessage targetCoord: " + this.targetCoord);
	                const walkDistance = this.getMouseWalkDistance(time);
	                var leaveDistance = MathUtils.distance(this._virtualX, this._virtualY, this.targetCoord.x, this.targetCoord.y);
	                if (MathUtils.getPointLength(walkDistance) >= leaveDistance) {
	                    this._virtualX = this.targetCoord.x;
	                    this._virtualY = this.targetCoord.y;
	                    this.excuteNextLocation();
	                }
	                else {
	                    this._virtualX = this._virtualX + walkDistance.x;
	                    this._virtualY = this._virtualY + walkDistance.y;
	                }
	            }
	            else {
	                Logger.log("onMessage excuteNextLocation");
	                this.excuteNextLocation();
	            }
	        }
	        var standTile = this.getStandTile();
	        if (!this.lastStandTile) {
	            this.lastStandTile = standTile;
	        }
	        else {
	            if (this.lastStandTile.x != standTile.x || this.lastStandTile.y != standTile.y) {
	                if (this.playerVo.game_uid == ModelUser.ins.game_uid && this.status == PlayerStatus.KeyWalk) {
	                    this.broadcastLocation();
	                }
	                GameManager.ins.event(PlayerEvent.PLAYER_MOVE, this);
	                this.lastStandTile = standTile;
	            }
	        }
	        this.zOrder = this._virtualY;
	    }
	    getDirByRadian(radian) {
	        var dir = 0;
	        var angle = MathUtils.fixAngle(MathUtils.radianToangle(radian));
	        if (angle > 225 && angle <= 315) {
	            dir = RoleDir.Up;
	        }
	        else if (angle > 315 || angle <= 45) {
	            dir = RoleDir.Right;
	        }
	        else if (angle > 45 && angle <= 135) {
	            dir = RoleDir.Down;
	        }
	        else if (angle > 135 && angle <= 225) {
	            dir = RoleDir.Left;
	        }
	        return dir;
	    }
	    init(playerVo) {
	        this.playerVo = playerVo;
	        this.head.labName.color = this.playerVo.color;
	        this.head.labName.text = this.playerVo.nickname;
	        this.head.namebg.width = this.head.labName.width + 50;
	        this.head.boxBehavior.visible = false;
	        this.avatar.init(this.playerVo.roleConfig.model, true, PlayerUnit.AVATAR_DIR_NUM);
	        this.setTilePos(this.playerVo.x, this.playerVo.y);
	        this.doAction(AniAction.Idle, this.avatar.currentDir, true, true);
	    }
	    doAction(action, dir, loop = true, force = false) {
	        this.avatar.play(action, loop, force, 0, dir);
	    }
	    updateLocation(x, y, direction, time) {
	        var data = {};
	        data["x"] = x;
	        data["y"] = y;
	        data["direction"] = direction;
	        data["time"] = time;
	        this.updateLocationList.push(data);
	        this.status = PlayerStatus.UpdateLocation;
	    }
	    startMove(x, y, direction) {
	        if (direction == RoleDir.None) {
	            var standTile = this.getStandTile();
	            var path = this.mapScene.aStar.find(standTile.x, standTile.y, x, y);
	            if (path && path.length > 0) {
	                this.status = PlayerStatus.MouseWalk;
	                this.pathList = path;
	                this.moveToNextTile();
	                this.broadcastFinalLocation(x, y);
	            }
	        }
	        else {
	            this.status = PlayerStatus.KeyWalk;
	            this.walkDir = direction;
	            var oldDir = this.avatar.currentDir;
	            this.doAction(AniAction.Walk, direction);
	            if (oldDir != direction) {
	                this.broadcastLocation();
	            }
	        }
	    }
	    moveToNextTile() {
	        if (this.pathList.length > 0) {
	            var tile = this.pathList.shift();
	            this.targetCoord = this.mapScene.getTilePos(tile[0], tile[1]);
	            var dir = this.getFaceToDir(this.targetCoord.x, this.targetCoord.y);
	            this.doAction(AniAction.Walk, dir);
	        }
	        else {
	            this.stopMove(RoleDir.None);
	        }
	    }
	    excuteNextLocation() {
	        if (this.updateLocationList.length > 0) {
	            Logger.log("onMessage updateLocationList size: " + this.updateLocationList.length);
	            var data = this.updateLocationList.shift();
	            var time = data["time"];
	            var now = Laya.Browser.now();
	            var dir = data["direction"];
	            Logger.log("onMessage dir: " + dir);
	            if (now - time > 5000) {
	                Logger.log("onMessage > 50000");
	                if (this.updateLocationList.length == 0) {
	                    var lastCoord = this.mapScene.getTilePos(data["x"], data["y"]);
	                    this._virtualX = lastCoord.x;
	                    this._virtualY = lastCoord.y;
	                    this.stopMove(dir);
	                }
	                else {
	                    this.lastLocation = data;
	                    this.excuteNextLocation();
	                }
	            }
	            else {
	                Logger.log("onMessage: " + this.lastLocation);
	                if (this.lastLocation) {
	                    var lastCoord = this.mapScene.getTilePos(this.lastLocation["x"], this.lastLocation["y"]);
	                    this._virtualX = lastCoord.x;
	                    this._virtualY = lastCoord.y;
	                    this.lastLocation = null;
	                }
	                this.targetCoord = this.mapScene.getTilePos(data["x"], data["y"]);
	                this.doAction(AniAction.Walk, dir);
	            }
	        }
	        else {
	            this.stopMove(RoleDir.None);
	        }
	    }
	    broadcastFinalLocation(targetX, targetY) {
	        var dir = this.avatar.currentDir;
	        GameHandler.ins.send_updateLocation(targetX, targetY, dir);
	    }
	    broadcastLocation() {
	        var standTile = this.getStandTile();
	        var dir = this.avatar.currentDir;
	        GameHandler.ins.send_updateLocation(standTile.x, standTile.y, dir);
	    }
	    stopMove(direction) {
	        if (this.status == PlayerStatus.KeyWalk && this.walkDir != direction) {
	            return;
	        }
	        this.pathList.length = 0;
	        this.targetCoord = null;
	        this.walkDir = RoleDir.None;
	        this.status = PlayerStatus.Idle;
	        this.doAction(AniAction.Idle, this.avatar.currentDir);
	    }
	    hideFace() {
	        this.head.boxBehavior.visible = false;
	    }
	    showFace(faceId) {
	        var faceConfig = FaceTable.ins.getConfig(faceId);
	        if (faceConfig) {
	            Laya.timer.clear(this, this.hideFace);
	            this.head.boxBehavior.visible = true;
	            this.head.imgSp.visible = true;
	            this.head.labelSp.visible = false;
	            this.head.imgFace.skin = faceConfig.img;
	            Laya.timer.once(1 * TimeUtils.oneSecondMs, this, this.hideFace);
	        }
	    }
	    setHitArea(clear) {
	        if (clear) {
	            this.hitArea = null;
	        }
	        else {
	            this.hitArea = new Rectangle$2(-PlayerUnit.ROLE_WIDTH / 2, -PlayerUnit.ROLE_HEIGHT, PlayerUnit.ROLE_WIDTH, PlayerUnit.ROLE_HEIGHT);
	        }
	    }
	    showHeadText(text) {
	        this.head.boxBehavior.visible = true;
	        this.head.imgSp.visible = false;
	        this.head.labelSp.visible = true;
	        this.head.labelText.text = text;
	        this.head.labelBg.width = this.head.labelText.textField.textWidth + 20;
	        this.head.labelBg.height = this.head.labelText.textField.height + 20;
	        this.head.bgsanjiao.y = this.head.labelBg.height * 0.48;
	        Laya.timer.clear(this, this.hideFace);
	        Laya.timer.once(2 * TimeUtils.oneSecondMs, this, this.hideFace);
	    }
	    perform(performId) {
	        var performConfig = PerformTable.ins.getConfig(performId);
	        if (performConfig) {
	            this.doAction(performConfig.params, this.avatar.currentDir, false);
	        }
	    }
	    doBehavior(behavior_id, params) {
	        if (behavior_id == BehaviorType.SendFace) {
	            this.showFace(parseInt(params));
	        }
	        else if (behavior_id == BehaviorType.ClearFace) {
	            this.hideFace();
	        }
	        else if (behavior_id == BehaviorType.Perform) {
	            this.perform(parseInt(params));
	        }
	    }
	    doInteract(interact_id, target_uid, params) {
	        var config = InteractTable.ins.getConfig(interact_id);
	        if (config) {
	            if (config.type == InteractType.SendMsg) {
	                this.showHeadText(params);
	            }
	            else if (config.type == InteractType.DoAction) {
	                var targetPlayer = this.mapScene.getPlayer(target_uid);
	                if (targetPlayer) {
	                    var dir = this.getFaceToDir(targetPlayer.virtualX, targetPlayer.virtualY);
	                    if (config.params == AniAction.Throw) {
	                        this.doAction(AniAction.Embrace, dir, false);
	                    }
	                    else {
	                        this.doAction(config.params, dir, false);
	                    }
	                    if (targetPlayer) {
	                        targetPlayer.beInteract(this, interact_id, params);
	                    }
	                    if (config.params == AniAction.Embrace) {
	                        var midPos = new Point$5((this.virtualX + targetPlayer.virtualX) * 0.5, (this.virtualY + targetPlayer.virtualY) * 0.5);
	                        this.mapScene.playEffect(AnimationKey.aixin, midPos.x, midPos.y, 0);
	                    }
	                    if (config.params == AniAction.Throw) {
	                        this.mapScene.playEffect(AnimationKey.jidan, targetPlayer.virtualX, targetPlayer.virtualY - PlayerUnit.ROLE_HEIGHT * 0.5, 3000);
	                    }
	                }
	            }
	        }
	    }
	    beInteract(orignal, interact_id, params) {
	        if (this.status != PlayerStatus.Idle)
	            return;
	        var config = InteractTable.ins.getConfig(interact_id);
	        if (config) {
	            if (config.params == AniAction.Throw) {
	                return;
	            }
	            var dir = this.getFaceToDir(orignal.virtualX, orignal.virtualY);
	            this.doAction(config.params, dir, false);
	        }
	    }
	    onClick() {
	        if (EntityManager.ins.status != EntityBuildStatus.None) {
	            return;
	        }
	        if (this.status != PlayerStatus.Idle) {
	            FloatMessage.showMessage("空闲状态下才能操作");
	            return;
	        }
	        if (this.playerVo.game_uid == ModelUser.ins.game_uid) {
	            var handleRefer = new Point$5(0.5, 1);
	            var handleTipUI = new Point$5(0.5, 0);
	            var locationVo = new LocationVo(this.avatar, handleRefer, handleTipUI);
	            TipUIManager.ins.showTipUI(TipUIKey.PerformTip, null, locationVo);
	        }
	        else {
	            var myStandTile = this.mapScene.mainPlayer.getStandTile();
	            var targetStandTile = this.getStandTile();
	            if (myStandTile.distance(targetStandTile.x, targetStandTile.y) > PlayerUnit.INTRACT_DISTANCE) {
	                FloatMessage.showMessage("距离过远无法互动");
	                return;
	            }
	            var handleRefer = new Point$5(0.5, 1);
	            var handleTipUI = new Point$5(0.5, 0);
	            var locationVo = new LocationVo(this.avatar, handleRefer, handleTipUI);
	            TipUIManager.ins.showTipUI(TipUIKey.InteractTip, this, locationVo);
	            this.mapScene.cacheInteractUid = this.playerVo.game_uid;
	        }
	    }
	    checkIntractDis() {
	        var myStandTile = this.mapScene.mainPlayer.getStandTile();
	        var targetStandTile = this.getStandTile();
	        if (myStandTile.distance(targetStandTile.x, targetStandTile.y) > PlayerUnit.INTRACT_DISTANCE) {
	            return false;
	        }
	        else {
	            return true;
	        }
	    }
	    static generateVoiceRoomId(player, nearestPlayer) {
	        if (player.playerVo.roomId != "") {
	            return player.playerVo.roomId.trim() + "-" + "subAudioRoom";
	        }
	        else {
	            return player.playerVo.game_uid + "-" + nearestPlayer.playerVo.game_uid + "-" + "subAudioRoom";
	        }
	    }
	    isNearestPlayer(targetPlayer) {
	        const myTile = this.getStandTile();
	        const targetTile = targetPlayer.getStandTile();
	        if (myTile.distance(targetTile.x, targetTile.y) < PlayerUnit.INTRACT_DISTANCE) {
	            return true;
	        }
	        return false;
	    }
	    joinSubRoom(nearestPlayer) {
	        this.playerVo.rtcState = RtcState.Connecting;
	        this.playerVo.audioRoomId = PlayerUnit.generateVoiceRoomId(this, nearestPlayer);
	        GameHandler.ins.send_joinSubRoom(this.playerVo.audioRoomId, this.playerVo.game_uid, nearestPlayer.playerVo.game_uid);
	        GameHandler.ins.send_userInfoChanged(this.playerVo);
	    }
	    createSubRoom(nearestPlayer, voiceAction) {
	        this.playerVo.rtcState = RtcState.Connecting;
	        this.playerVo.audioRoomId = PlayerUnit.generateVoiceRoomId(this, nearestPlayer);
	        if (voiceAction == VoiceAction.Create) {
	            GameHandler.ins.send_joinSubRoom(this.playerVo.audioRoomId, this.playerVo.game_uid, nearestPlayer.playerVo.game_uid);
	        }
	        else if (voiceAction == VoiceAction.Join) {
	            GameHandler.ins.send_joinSubRoom(this.playerVo.audioRoomId, this.playerVo.game_uid, null);
	        }
	        GameHandler.ins.send_userInfoChanged(this.playerVo);
	    }
	    leaveSubRoom() {
	        return;
	        FloatMessage.showMessage("断开语音连接");
	        const audioRoomID = this.playerVo.audioRoomId;
	        this.playerVo.rtcState = RtcState.Idle;
	        this.playerVo.audioRoomId = "";
	        this.playerVo.roomId = "";
	        GameHandler.ins.send_userInfoChanged(this.playerVo);
	        GameHandler.ins.send_leaveSubRoom(audioRoomID, this.playerVo.game_uid);
	    }
	    disconnectVoice(originPlayer) {
	        return;
	        if (this.playerVo.roomId != "") {
	            return;
	        }
	        if (this.playerVo.rtcState != RtcState.Connected) {
	            return;
	        }
	        if (this.playerVo.audioRoomId != "" && this.playerVo.roomId != "" && this.playerVo.audioRoomId.includes(this.playerVo.roomId)) {
	            FloatMessage.showMessage("在同一房间，不断开语音");
	            return;
	        }
	        if (originPlayer == null) {
	            this.leaveSubRoom();
	        }
	        else {
	            FloatMessage.showMessage("还在附近，不断开");
	        }
	    }
	    createOrJoinVoice(nearestPlayer) {
	        return;
	        Logger.log("zhgli createOrJoinVoice: " + nearestPlayer + " " + this.playerVo.roomId);
	        if (nearestPlayer == null && this.playerVo.roomId != "") {
	            if (this.playerVo.rtcState != RtcState.Idle) {
	                return;
	            }
	            let playerCountInSpecialRoom = 0;
	            let nearestPlayerInRoom;
	            for (const key in this.mapScene.getPlayerList()) {
	                const player = this.mapScene.getPlayerList()[key];
	                if (player != null && player.playerVo.roomId == this.playerVo.roomId) {
	                    playerCountInSpecialRoom++;
	                    if (player.playerVo.game_uid != this.playerVo.game_uid) {
	                        nearestPlayerInRoom = player;
	                    }
	                }
	            }
	            if (playerCountInSpecialRoom == 1) ;
	            else if (playerCountInSpecialRoom == 2) {
	                this.createSubRoom(nearestPlayerInRoom, VoiceAction.Create);
	            }
	            else if (playerCountInSpecialRoom > 2) {
	                this.joinSubRoom(nearestPlayer);
	            }
	            return;
	        }
	        if (this.playerVo.roomId != "") {
	            return;
	        }
	        Logger.log("zhgli nearestPlayer: " + nearestPlayer.playerVo.nickname + " " + nearestPlayer.playerVo.rtcState + " " + this.playerVo.rtcState);
	        if (!this.isNearestPlayer(nearestPlayer)) {
	            return;
	        }
	        switch (nearestPlayer.playerVo.rtcState) {
	            case RtcState.Idle:
	                this.createSubRoom(nearestPlayer, VoiceAction.Create);
	                break;
	            case RtcState.Connecting:
	                break;
	            case RtcState.Connected:
	                this.createSubRoom(nearestPlayer, VoiceAction.Join);
	                break;
	        }
	    }
	    showIntractTip() {
	        if (GlobalVars.isWebGame) {
	            FilterUtils.setColorFilter(this.avatar, 2, 1, 1);
	            this.head.tipBox.visible = true;
	            this.clearTimer(this, this.hideIntractTip);
	            this.timerOnce(2000, this, this.hideIntractTip);
	        }
	    }
	    hideIntractTip() {
	        FilterUtils.setColorFilter(this.avatar, 1, 1, 1);
	        this.head.tipBox.visible = false;
	    }
	    getFaceToDir(x, y) {
	        var stand = new Point$5(this._virtualX, this._virtualY);
	        var target = new Point$5(x, y);
	        var radian = MathUtils.radian(stand, target);
	        return this.getDirByRadian(radian);
	    }
	    destroy(destroyChild = true) {
	        this.avatar.off(AniEvent.PLAY_END, this, this.onAniPlayEnd);
	        Laya.timer.clear(this, this.hideFace);
	        this.clearTimer(this, this.hideIntractTip);
	        this.head.destroy();
	        this.avatar.destroy();
	        this.playerVo = null;
	        super.destroy(destroyChild);
	    }
	}
	PlayerUnit.ROLE_WIDTH = 55;
	PlayerUnit.ROLE_HEIGHT = 80;
	PlayerUnit.AVATAR_DIR_NUM = 4;
	PlayerUnit.WARLK_SPEED = 400;
	PlayerUnit.INTRACT_DISTANCE = 4;

	class PlayerVo {
	    constructor() {
	        this.nickname = "";
	        this.role_id = 0;
	        this.game_uid = "";
	        this.x = 0;
	        this.y = 0;
	        this.direction = 0;
	        this.color = "#FFFFFF";
	        this.roomId = "";
	        this.rtcState = RtcState.Idle;
	        this.audioRoomId = "";
	    }
	    get roleConfig() {
	        return RoleTable.ins.getConfig(this.role_id);
	    }
	}

	class EntityConfig extends StructConfig {
	}
	class EntityTable extends SheetConfig {
	    constructor() {
	        super();
	        ConfigManager.analyzeConfig(ConfigKey.entity, this);
	    }
	    static get ins() {
	        return EntityTable._ins = EntityTable._ins || new EntityTable();
	    }
	    get recordCls() {
	        return EntityConfig;
	    }
	}

	class EntityVo {
	    constructor() {
	        this.guid = 0;
	        this.builder_uid = "";
	        this.entity_id = 0;
	        this.x = 0;
	        this.y = 0;
	    }
	    get entityConfig() {
	        return EntityTable.ins.getConfig(this.entity_id);
	    }
	}

	class ProtocolUtils {
	    static createPlayerVo(data) {
	        var playerVo = new PlayerVo();
	        playerVo.nickname = data["nickname"];
	        playerVo.role_id = data["role_id"];
	        playerVo.game_uid = data["game_uid"];
	        playerVo.x = data["x"];
	        playerVo.y = data["y"];
	        playerVo.direction = data["direction"];
	        playerVo.rtcState = data["rtcState"];
	        if (playerVo.rtcState == null) {
	            playerVo.rtcState = RtcState.Idle;
	        }
	        playerVo.audioRoomId = data["audioRoomId"];
	        if (playerVo.audioRoomId == null) {
	            playerVo.audioRoomId = "";
	        }
	        playerVo.roomId = data["roomId"];
	        if (playerVo.roomId == null) {
	            playerVo.roomId = "";
	        }
	        if (data["color"] != null) {
	            playerVo.color = data["color"];
	        }
	        return playerVo;
	    }
	    static createEntityVo(data) {
	        var entityVo = new EntityVo();
	        entityVo.guid = data["guid"];
	        entityVo.builder_uid = data["builder_uid"];
	        entityVo.entity_id = data["entity_id"];
	        entityVo.x = data["x"];
	        entityVo.y = data["y"];
	        return entityVo;
	    }
	}

	class InitEvent {
	}
	InitEvent.INIT_ROOM = "INIT_ROOM";

	var Handler$7 = Laya.Handler;
	var Browser$4 = Laya.Browser;
	var ProtocolAction;
	(function (ProtocolAction) {
	    ProtocolAction["initRoom"] = "initRoom";
	    ProtocolAction["addUser"] = "addUser";
	    ProtocolAction["removeUser"] = "removeUser";
	    ProtocolAction["keyAction"] = "keyAction";
	    ProtocolAction["keyDown"] = "keyDown";
	    ProtocolAction["keyUp"] = "keyUp";
	    ProtocolAction["updateLocation"] = "updateLocation";
	    ProtocolAction["interact"] = "interact";
	    ProtocolAction["behavior"] = "behavior";
	    ProtocolAction["buildEntity"] = "buildEntity";
	    ProtocolAction["addEntity"] = "addEntity";
	    ProtocolAction["removeEntity"] = "removeEntity";
	    ProtocolAction["joinSubRoom"] = "joinSubRoom";
	    ProtocolAction["leaveSubRoom"] = "leaveSubRoom";
	    ProtocolAction["userInfoChanged"] = "userInfoChanged";
	})(ProtocolAction || (ProtocolAction = {}));
	class GameHandler {
	    init() {
	        GameProtocol.ins.registerHandler(ProtocolAction.initRoom, new Handler$7(this, this.respond_initRoom));
	        GameProtocol.ins.registerHandler(ProtocolAction.addUser, new Handler$7(this, this.respond_addUser));
	        GameProtocol.ins.registerHandler(ProtocolAction.removeUser, new Handler$7(this, this.respond_removeUser));
	        GameProtocol.ins.registerHandler(ProtocolAction.keyAction, new Handler$7(this, this.respond_keyAction));
	        GameProtocol.ins.registerHandler(ProtocolAction.keyDown, new Handler$7(this, this.respond_keyDown));
	        GameProtocol.ins.registerHandler(ProtocolAction.keyUp, new Handler$7(this, this.respond_keyUp));
	        GameProtocol.ins.registerHandler(ProtocolAction.updateLocation, new Handler$7(this, this.respond_updateLocation));
	        GameProtocol.ins.registerHandler(ProtocolAction.behavior, new Handler$7(this, this.respond_behavior));
	        GameProtocol.ins.registerHandler(ProtocolAction.interact, new Handler$7(this, this.respond_interact));
	        GameProtocol.ins.registerHandler(ProtocolAction.addEntity, new Handler$7(this, this.respond_addEntity));
	        GameProtocol.ins.registerHandler(ProtocolAction.removeEntity, new Handler$7(this, this.respond_removeEntity));
	        GameProtocol.ins.registerHandler(ProtocolAction.joinSubRoom, new Handler$7(this, this.respond_joinSubRoom));
	        GameProtocol.ins.registerHandler(ProtocolAction.leaveSubRoom, new Handler$7(this, this.respond_leaveSubRoom));
	        GameProtocol.ins.registerHandler(ProtocolAction.userInfoChanged, new Handler$7(this, this.respond_userInfoChanged));
	    }
	    send_userInfoChanged(data) {
	        GameProtocol.ins.sendMessage(ProtocolAction.userInfoChanged, data);
	        ModelMap.ins.event(MapEvent.USER_INFO_CHANGED, data);
	    }
	    respond_userInfoChanged(data) {
	        const playerVo = ProtocolUtils.createPlayerVo(data);
	        Logger.log("zhgli respond_userInfoChanged: " + playerVo.nickname + " audioRoomId: " + playerVo.audioRoomId + " rtcState: " + playerVo.rtcState + " roomId: " + playerVo.roomId);
	        ModelMap.ins.event(MapEvent.USER_INFO_CHANGED, playerVo);
	    }
	    send_joinSubRoom(sub_roomid, master_uid, slave_id) {
	        var data = {};
	        data["sub_roomid"] = sub_roomid;
	        data["game_uid"] = master_uid;
	        data["target_id"] = slave_id;
	        GameProtocol.ins.sendMessage(ProtocolAction.joinSubRoom, data);
	    }
	    respond_joinSubRoom(data) {
	        if (data == null) {
	            return;
	        }
	        Logger.log("zhgli respond_joinSubRoom: " + data["rtcState"]);
	        const game_uid = data["game_uid"];
	        const target_id = data["target_id"];
	        const sub_roomid = data["sub_roomid"];
	        const rtcState = data["rtcState"];
	        Logger.log("zhgli target_id: " + target_id);
	        Logger.log("zhgli sub_roomid: " + sub_roomid);
	        Logger.log("zhgli rtcState: " + rtcState);
	        if (target_id == null) {
	            return;
	        }
	        if (target_id == ModelUser.ins.game_uid) {
	            const player = ModelMap.ins.getPlayer(ModelUser.ins.game_uid);
	            player.rtcState = rtcState;
	            player.audioRoomId = sub_roomid;
	            this.send_userInfoChanged(player);
	            if (player.rtcState == RtcState.Idle) {
	                Logger.log("zhgli " + ModelUser.ins.nickname + " joinsubRoom");
	                this.send_joinSubRoom(sub_roomid, ModelUser.ins.game_uid, "");
	            }
	        }
	        else if (game_uid == ModelUser.ins.game_uid) {
	            Logger.log("zhgli " + ModelUser.ins.nickname + " create room success, broadcast rtcState: " + rtcState);
	            const player = ModelMap.ins.getPlayer(ModelUser.ins.game_uid);
	            player.rtcState = rtcState;
	            player.audioRoomId = sub_roomid;
	            this.send_userInfoChanged(player);
	        }
	    }
	    send_leaveSubRoom(sub_roomid, game_uid) {
	        if (sub_roomid == null || game_uid == null) {
	            Logger.log("zhgli send_leaveSubRoom: " + sub_roomid + " " + game_uid);
	            return;
	        }
	        var data = {};
	        data["game_uid"] = game_uid;
	        data["sub_roomid"] = sub_roomid;
	        GameProtocol.ins.sendMessage(ProtocolAction.leaveSubRoom, data);
	    }
	    respond_leaveSubRoom(data) {
	        Logger.log("respond_leaveSubRoom");
	        ModelMap.ins.event(MapEvent.USER_LEAVE_ROOM, data);
	    }
	    send_behavior(behavior_id, params) {
	        var data = {};
	        data["game_uid"] = ModelUser.ins.game_uid;
	        data["behavior_id"] = behavior_id;
	        data["params"] = params;
	        GameProtocol.ins.sendMessage(ProtocolAction.behavior, data);
	    }
	    respond_behavior(data) {
	        ModelMap.ins.event(MapEvent.BEHAVIOR, data);
	    }
	    send_interact(interact_id, target_uid, params = "") {
	        var data = {};
	        data["game_uid"] = ModelUser.ins.game_uid;
	        data["interact_id"] = interact_id;
	        data["target_uid"] = target_uid;
	        data["params"] = params;
	        GameProtocol.ins.sendMessage(ProtocolAction.interact, data);
	    }
	    respond_interact(data) {
	        ModelMap.ins.event(MapEvent.INTERACT, data);
	    }
	    send_addUser(data) {
	        GameProtocol.ins.sendMessage(ProtocolAction.addUser, data);
	    }
	    respond_addUser(data) {
	        var playerVo = ProtocolUtils.createPlayerVo(data);
	        ModelMap.ins.addPlayer(playerVo);
	        ModelMap.ins.event(MapEvent.ADD_PLAYER, playerVo);
	    }
	    send_updateLocation(x, y, direction) {
	        var data = {};
	        data["game_uid"] = ModelUser.ins.game_uid;
	        data["nickname"] = ModelUser.ins.nickname;
	        data["role_id"] = ModelUser.ins.role_id;
	        data["x"] = x;
	        data["y"] = y;
	        data["direction"] = direction;
	        GameProtocol.ins.sendMessage(ProtocolAction.updateLocation, data);
	    }
	    respond_updateLocation(data) {
	        var game_uid = data["game_uid"];
	        var playerVo = ModelMap.ins.getPlayer(game_uid);
	        if (playerVo) {
	            playerVo.x = data["x"];
	            playerVo.y = data["y"];
	            playerVo.direction = data["playerVo"];
	        }
	        if (game_uid == ModelUser.ins.game_uid) {
	            return;
	        }
	        if (data["time"] == null) {
	            data["time"] = Browser$4.now();
	        }
	        ModelMap.ins.event(MapEvent.UPDATE_LOCATION, data);
	    }
	    send_buildEntity(entity_id, x, y) {
	        var data = {};
	        data["game_uid"] = ModelUser.ins.game_uid;
	        data["entity_id"] = entity_id;
	        data["x"] = x;
	        data["y"] = y;
	        GameProtocol.ins.sendMessage(ProtocolAction.buildEntity, data);
	    }
	    respond_addEntity(data) {
	        var entityVo = ProtocolUtils.createEntityVo(data);
	        ModelMap.ins.addEntity(entityVo);
	        ModelMap.ins.event(MapEvent.ADD_ENTITY, entityVo);
	    }
	    send_removeEntity(guid) {
	        var data = {};
	        data["game_uid"] = ModelUser.ins.game_uid;
	        data["guid"] = guid;
	        GameProtocol.ins.sendMessage(ProtocolAction.removeEntity, data);
	    }
	    respond_removeEntity(data) {
	        var guid = data["guid"];
	        ModelMap.ins.delEntity(guid);
	        ModelMap.ins.event(MapEvent.REMOVE_ENTITY, data);
	    }
	    send_initRoom() {
	        GameProtocol.ins.sendMessage(ProtocolAction.initRoom, {});
	    }
	    respond_initRoom(data) {
	        ModelUser.ins.roomid = data["roomid"];
	        ModelUser.ins.mapid = data["mapid"];
	        ModelUser.ins.game_uid = data["game_uid"];
	        ModelUser.ins.nickname = data["nickname"];
	        ModelUser.ins.role_id = data["role_id"];
	        ModelUser.ins.oprate_entity = data["oprate_entity"];
	        ModelUser.ins.x = data["x"];
	        ModelUser.ins.y = data["y"];
	        ModelUser.ins.direction = data["direction"];
	        ModelUser.ins.back_img = data["back_img"];
	        if (data["color"] != null) {
	            ModelUser.ins.color = data["color"];
	        }
	        var users = data["users"];
	        if (users) {
	            for (var i = 0; i < users.length; i++) {
	                var userData = users[i];
	                var playerVo = ProtocolUtils.createPlayerVo(userData);
	                ModelMap.ins.addPlayer(playerVo);
	            }
	        }
	        var entitys = data["entitys"];
	        if (entitys) {
	            for (var i = 0; i < entitys.length; i++) {
	                var entityData = entitys[i];
	                var entityVo = ProtocolUtils.createEntityVo(entityData);
	                ModelMap.ins.addEntity(entityVo);
	            }
	        }
	        GameManager.ins.event(InitEvent.INIT_ROOM);
	    }
	    respond_removeUser(data) {
	        var game_uid = data["game_uid"];
	        var playerVo = ModelMap.ins.getPlayer(game_uid);
	        ModelMap.ins.delPlayer(game_uid);
	        ModelMap.ins.event(MapEvent.REMOVE_PLAYER, data);
	    }
	    respond_keyAction(data) {
	        GameManager.ins.event(KeyEvent.KEY_ACTION, data["keyCode"]);
	    }
	    respond_keyDown(data) {
	        GameManager.ins.event(KeyEvent.KEY_DOWN, data["keyCode"]);
	    }
	    respond_keyUp(data) {
	        GameManager.ins.event(KeyEvent.KEY_UP, data["keyCode"]);
	    }
	    static get ins() {
	        return GameHandler._ins = GameHandler._ins || new GameHandler();
	    }
	}
	GameHandler._ins = null;

	var Handler$8 = Laya.Handler;
	var Event$f = Laya.Event;
	var Tween$5 = Laya.Tween;
	var Ease$5 = Laya.Ease;
	class SendTip extends TipUIBase {
	    constructor() {
	        super();
	        this.dataList = [];
	    }
	    onCreate() {
	        this.view.list.renderHandler = new Handler$8(this, this.renderItem);
	    }
	    onAdd() {
	        this.updateUI();
	    }
	    onItemClick(cell, index) {
	    }
	    onItemMouseOver(cell, index) {
	        cell.imgOver.visible = true;
	    }
	    onItemMouseOut(cell, index) {
	        cell.imgOver.visible = false;
	    }
	    renderItem(cell, index) {
	        cell.off(Event$f.CLICK, this, this.onItemClick);
	        cell.off(Event$f.MOUSE_OVER, this, this.onItemMouseOver);
	        cell.off(Event$f.MOUSE_OUT, this, this.onItemMouseOut);
	        var config = this.dataList[index];
	        if (config) {
	            this.updateItem(cell, index);
	            cell.on(Event$f.CLICK, this, this.onItemClick, [cell, index]);
	            cell.on(Event$f.MOUSE_OVER, this, this.onItemMouseOver, [cell, index]);
	            cell.on(Event$f.MOUSE_OUT, this, this.onItemMouseOut, [cell, index]);
	            cell.imgOver.visible = false;
	            cell.visible = true;
	        }
	        else {
	            cell.visible = false;
	        }
	    }
	    genrateDataList() {
	        return [];
	    }
	    updateUI() {
	        this.dataList = this.genrateDataList();
	        this.view.list.array = this.dataList;
	    }
	    updateItem(cell, index) {
	    }
	    onAdded() {
	        this.view.scale(0.1, 0.1);
	        this.view.alpha = 0;
	        Tween$5.to(this.view, { scaleX: 1, scaleY: 1, alpha: 1 }, 300, Ease$5.sineOut);
	    }
	    onMaskClick() {
	        if (this.view.hitTestPoint(Laya.stage.mouseX, Laya.stage.mouseY)) {
	            return;
	        }
	        this.tweenCloseSelf();
	    }
	    tweenCloseSelf() {
	        Tween$5.to(this.view, { scaleX: 0.1, scaleY: 0.1, alpha: 0 }, 300, Ease$5.sineOut, Handler$8.create(this, function () {
	            this.view.scale(1, 1);
	            this.view.alpha = 1;
	            this.closeSelf();
	        }));
	    }
	}

	var Event$g = Laya.Event;
	class SendFaceTip extends SendTip {
	    constructor() {
	        super(...arguments);
	        this.viewClass = editor.main.SendFaceTipUI;
	    }
	    onItemClick(cell, index) {
	        var config = this.dataList[index];
	        this.sendFace(config);
	        this.tweenCloseSelf();
	    }
	    updateItem(cell, index) {
	        var config = this.dataList[index];
	        cell.img.skin = config.img;
	        cell.labNumber.text = config.id + "";
	    }
	    genrateDataList() {
	        return FaceUtils.getFaceConfigList();
	    }
	    onAdd() {
	        super.onAdd();
	        this.view.btnClear.on(Event$g.CLICK, this, this.clearClick);
	        GameManager.ins.on(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	    }
	    onRemove() {
	        this.view.btnClear.off(Event$g.CLICK, this, this.clearClick);
	        GameManager.ins.off(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	    }
	    sendFace(config) {
	        GameHandler.ins.send_behavior(BehaviorType.SendFace, config.id + "");
	    }
	    onKeyAction(keyCode) {
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        if (keyCode == Laya.Keyboard.ESCAPE) {
	            this.closeSelf();
	            return;
	        }
	        var dic = FaceTable.ins.getDic();
	        for (var key in dic) {
	            var config = dic[key];
	            if (GameUtils.checkKeyCodeMatch(keyCode, config.keyCodes)) {
	                this.sendFace(config);
	                this.closeSelf();
	                break;
	            }
	        }
	    }
	    clearClick() {
	        GameHandler.ins.send_behavior(BehaviorType.ClearFace, "");
	        this.tweenCloseSelf();
	    }
	}

	class InteractUtils {
	    static getInteractConfigList() {
	        var list = [];
	        var dic = InteractTable.ins.getDic();
	        for (var key in dic) {
	            list.push(dic[key]);
	        }
	        return list;
	    }
	}

	class InteractTip extends SendTip {
	    constructor() {
	        super(...arguments);
	        this.viewClass = editor.map.InteractTipUI;
	    }
	    onAdd() {
	        this.playerUnit = this.params;
	        super.onAdd();
	        GameManager.ins.on(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	        GameManager.ins.on(PlayerEvent.PLAYER_MOVE, this, this.onPlayerMove);
	    }
	    onRemove() {
	        GameManager.ins.off(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	        GameManager.ins.off(PlayerEvent.PLAYER_MOVE, this, this.onPlayerMove);
	    }
	    onPlayerMove(player) {
	        var tgameuid = player.playerVo.game_uid;
	        if (tgameuid == ModelUser.ins.game_uid || tgameuid == this.playerUnit.playerVo.game_uid) {
	            if (this.playerUnit.checkIntractDis() == false) {
	                this.closeSelf();
	                var mapScene = SceneManager.ins.currentScene;
	                mapScene.cacheInteractUid = "";
	            }
	        }
	    }
	    onKeyAction(keyCode) {
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        if (keyCode == Laya.Keyboard.ESCAPE) {
	            this.closeSelf();
	            return;
	        }
	        var dic = InteractTable.ins.getDic();
	        for (var key in dic) {
	            var config = dic[key];
	            if (GameUtils.checkKeyCodeMatch(keyCode, config.keyCodes)) {
	                this.sendInteract(config);
	                this.closeSelf();
	                break;
	            }
	        }
	    }
	    sendInteract(config) {
	        if (config.id == InteractType.SendMsg) {
	            TipUIManager.ins.showTipUI(TipUIKey.HeadTextInputTip, this.playerUnit);
	        }
	        else {
	            GameHandler.ins.send_interact(config.id, this.playerUnit.playerVo.game_uid, "");
	        }
	    }
	    onItemClick(cell, index) {
	        var config = this.dataList[index];
	        this.sendInteract(config);
	        this.tweenCloseSelf();
	    }
	    updateItem(cell, index) {
	        var config = this.dataList[index];
	        cell.img.skin = config.img;
	        cell.labNumber.text = config.id + "";
	    }
	    genrateDataList() {
	        return InteractUtils.getInteractConfigList();
	    }
	}

	class PerformUtils {
	    static getPerformConfigList() {
	        var list = [];
	        var dic = PerformTable.ins.getDic();
	        for (var key in dic) {
	            list.push(dic[key]);
	        }
	        return list;
	    }
	}

	class PerformTip extends SendTip {
	    constructor() {
	        super(...arguments);
	        this.viewClass = editor.map.PerformTipUI;
	    }
	    onAdd() {
	        super.onAdd();
	        GameManager.ins.on(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	    }
	    onRemove() {
	        GameManager.ins.off(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	    }
	    onKeyAction(keyCode) {
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        if (keyCode == Laya.Keyboard.ESCAPE) {
	            this.closeSelf();
	            return;
	        }
	        var dic = PerformTable.ins.getDic();
	        for (var key in dic) {
	            var config = dic[key];
	            if (GameUtils.checkKeyCodeMatch(keyCode, config.keyCodes)) {
	                this.sendPerform(config);
	                this.closeSelf();
	                break;
	            }
	        }
	    }
	    sendPerform(config) {
	        GameHandler.ins.send_behavior(BehaviorType.Perform, config.id + "");
	    }
	    onItemClick(cell, index) {
	        var config = this.dataList[index];
	        this.sendPerform(config);
	        this.tweenCloseSelf();
	    }
	    updateItem(cell, index) {
	        var config = this.dataList[index];
	        cell.img.skin = config.img;
	        cell.labNumber.text = config.id + "";
	    }
	    genrateDataList() {
	        return PerformUtils.getPerformConfigList();
	    }
	}

	var Event$h = Laya.Event;
	var Keyboard = Laya.Keyboard;
	class HeadTextInputTip extends TipUIBase {
	    constructor() {
	        super(...arguments);
	        this.viewClass = editor.map.HeadTextInputUI;
	    }
	    onAdd() {
	        this.playerUnit = this.params;
	        super.onAdd();
	        GameManager.ins.on(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	        this.view.closeBtn.on(Event$h.CLICK, this, this.closeSelf);
	        this.view.mainText.text = "";
	        this.view.mainText.maxChars = 20;
	        GameManager.ins.isTextInput = true;
	        this.timerOnce(200, this, this.setMainTextFocus);
	    }
	    setMainTextFocus() {
	        this.view.mainText.focus = true;
	    }
	    onRemove() {
	        GameManager.ins.off(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	        this.view.closeBtn.off(Event$h.CLICK, this, this.closeSelf);
	        this.view.mainText.focus = false;
	        GameManager.ins.isTextInput = false;
	    }
	    onKeyAction(keyCode) {
	        if (keyCode == Laya.Keyboard.ESCAPE) {
	            this.closeSelf();
	            return;
	        }
	        if (keyCode == Keyboard.ENTER) {
	            var text = GameUtils.replaceFilterWords(this.view.mainText.text);
	            if (text != "") {
	                GameHandler.ins.send_interact(InteractType.SendMsg, this.playerUnit.playerVo.game_uid, text);
	            }
	            this.closeSelf();
	        }
	    }
	}

	var EventDispatcher$4 = Laya.EventDispatcher;
	class TipUIManager extends EventDispatcher$4 {
	    constructor() {
	        super();
	        this.tipUIs = {};
	        this.CLASS_HASH = {};
	    }
	    init() {
	        this.CLASS_HASH[TipUIKey.HelpTip] = HelpTip;
	        this.CLASS_HASH[TipUIKey.SendFaceTip] = SendFaceTip;
	        this.CLASS_HASH[TipUIKey.PerformTip] = PerformTip;
	        this.CLASS_HASH[TipUIKey.InteractTip] = InteractTip;
	        this.CLASS_HASH[TipUIKey.HeadTextInputTip] = HeadTextInputTip;
	    }
	    closeAllTipUI() {
	        for (var key in this.tipUIs) {
	            var tipUI = this.tipUIs[key];
	            if (tipUI.opened) {
	                this.closeTipUI(tipUI);
	            }
	        }
	    }
	    closeTipUI(tipUI) {
	        tipUI.removeSelf();
	    }
	    closeTipById(id) {
	        var tipUI = this.tipUIs[id];
	        if (tipUI && tipUI.opened) {
	            this.closeTipUI(tipUI);
	        }
	    }
	    showTipUI(id, params = null, locationVo = null) {
	        this.closeAllTipUI();
	        var tipUI = this.tipUIs[id];
	        if (!tipUI) {
	            this.tipUIs[id] = tipUI = this.createTipUI(id);
	        }
	        tipUI.locationVo = locationVo;
	        tipUI.init(params);
	        LayerManager.ins.topUILayer.addChild(tipUI);
	        return tipUI;
	    }
	    showHelp(title, content) {
	        this.showTipUI(TipUIKey.HelpTip, new HelpVo(title, content));
	    }
	    createTipUI(id) {
	        var cls = this.CLASS_HASH[id];
	        if (cls) {
	            return new cls();
	        }
	        else {
	            ErrorUtils.throwError("不存在提示类:" + id);
	        }
	    }
	    static get ins() {
	        return TipUIManager._ins = TipUIManager._ins || new TipUIManager();
	    }
	}
	TipUIManager._ins = null;

	class EntityUtils {
	    static getEntityConfigList() {
	        var list = [];
	        var dic = EntityTable.ins.getDic();
	        for (var key in dic) {
	            list.push(dic[key]);
	        }
	        return list;
	    }
	}

	var Event$i = Laya.Event;
	var Tween$6 = Laya.Tween;
	var Ease$6 = Laya.Ease;
	var Point$6 = Laya.Point;
	var Handler$9 = Laya.Handler;
	class MainUIPanel extends UIBase {
	    constructor() {
	        super();
	        this.viewClass = editor.main.MainPanelUI;
	        this.dataList = [];
	    }
	    onCreate() {
	        this.view.listBuild.renderHandler = new Handler$9(this, this.renderItem);
	        this.view.listBuild.vScrollBarSkin = "";
	        EntityManager.ins.buildAreaW = this.view.boxBuild.width;
	    }
	    onItemClick(cell, index) {
	        EntityManager.ins.toBuild(this.dataList[index]);
	    }
	    onItemMouseOver(cell, index) {
	        cell.imgOver.visible = true;
	    }
	    onItemMouseOut(cell, index) {
	        cell.imgOver.visible = false;
	    }
	    renderItem(cell, index) {
	        cell.off(Event$i.CLICK, this, this.onItemClick);
	        cell.off(Event$i.MOUSE_OVER, this, this.onItemMouseOver);
	        cell.off(Event$i.MOUSE_OUT, this, this.onItemMouseOut);
	        var config = this.dataList[index];
	        if (config) {
	            var ani = cell.spAni.getChildByName("ani");
	            if (!ani) {
	                ani = new GameAni();
	                ani.name = "ani";
	                cell.spAni.addChild(ani);
	            }
	            ani.init(config.res);
	            var maxGrid = Math.max(config.hGridNum, config.vGridNum);
	            var scale = 1 / maxGrid;
	            ani.scale(scale, scale);
	            cell.on(Event$i.CLICK, this, this.onItemClick, [cell, index]);
	            cell.on(Event$i.MOUSE_OVER, this, this.onItemMouseOver, [cell, index]);
	            cell.on(Event$i.MOUSE_OUT, this, this.onItemMouseOut, [cell, index]);
	            cell.imgOver.visible = false;
	            cell.visible = true;
	        }
	        else {
	            cell.visible = false;
	        }
	    }
	    layoutUI() {
	        this.width = Laya.stage.width / this.scaleX;
	        this.height = Laya.stage.height / this.scaleY;
	        this.view.width = this.width;
	        this.view.height = this.height;
	    }
	    onAdd() {
	        this.view.btnShowBuild.on(Event$i.CLICK, this, this.showBuild);
	        this.view.btnCloseBuild.on(Event$i.CLICK, this, this.hideBuild);
	        this.view.btnFace.on(Event$i.CLICK, this, this.faceClick);
	        this.view.btnBuild.on(Event$i.CLICK, this, this.buildClick);
	        this.view.btnDel.on(Event$i.CLICK, this, this.delClick);
	        GameManager.ins.on(KeyEvent.KEY_ACTION, this, this.onKeyAction);
	        this.updateUI();
	        this.hideBuild(false);
	    }
	    onKeyAction(keyCode) {
	        if (EntityManager.ins.status != EntityBuildStatus.None) {
	            return;
	        }
	        if (GameManager.ins.isTextInput == true) {
	            return;
	        }
	        switch (keyCode) {
	            case Laya.Keyboard.Z:
	                this.faceClick();
	                break;
	        }
	    }
	    updateUI() {
	        this.view.imgRole.skin = ModelUser.ins.roleConfig.icon;
	        this.view.labName.color = ModelUser.ins.color;
	        this.view.labName.text = ModelUser.ins.nickname;
	        if (ModelUser.ins.oprate_entity) {
	            this.dataList = EntityUtils.getEntityConfigList();
	            this.view.listBuild.array = this.dataList;
	        }
	        this.view.btnShowBuild.visible = ModelUser.ins.oprate_entity;
	    }
	    onRemove() {
	        this.view.btnShowBuild.off(Event$i.CLICK, this, this.showBuild);
	        this.view.btnCloseBuild.off(Event$i.CLICK, this, this.hideBuild);
	        this.view.btnFace.off(Event$i.CLICK, this, this.faceClick);
	        this.view.btnBuild.off(Event$i.CLICK, this, this.buildClick);
	        this.view.btnDel.off(Event$i.CLICK, this, this.delClick);
	    }
	    delClick() {
	        EntityManager.ins.cancelBuild();
	        EntityManager.ins.toClear();
	    }
	    buildClick() {
	        EntityManager.ins.cancelClear();
	    }
	    faceClick() {
	        var handleRefer = new Point$6(0.5, -1);
	        var handleTipUI = new Point$6(0.53, 1);
	        var locationVo = new LocationVo(this.view.btnFace, handleRefer, handleTipUI);
	        TipUIManager.ins.showTipUI(TipUIKey.SendFaceTip, null, locationVo);
	    }
	    showBuild(tween) {
	        var duration = 0;
	        if (tween) {
	            duration = 300;
	        }
	        Tween$6.to(this.view.boxBuild, { x: -this.view.boxBuild.width }, duration, Ease$6.sineOut);
	    }
	    hideBuild(tween) {
	        EntityManager.ins.cancelBuild();
	        EntityManager.ins.cancelClear();
	        var duration = 0;
	        if (tween) {
	            duration = 300;
	        }
	        Tween$6.to(this.view.boxBuild, { x: 0 }, duration, Ease$6.sineOut);
	    }
	    onCreated() {
	        this.mouseThrough = true;
	        for (var i = 0; i < this.numChildren; i++) {
	            this.getChildAt(i).mouseThrough = true;
	        }
	    }
	}

	var EventDispatcher$5 = Laya.EventDispatcher;
	class PanelManager extends EventDispatcher$5 {
	    constructor() {
	        super();
	        this.CLASS_HASH = {};
	        this.panels = {};
	    }
	    init() {
	        this.CLASS_HASH[PanelKey.GMPanel] = GMPanel;
	        this.CLASS_HASH[PanelKey.AlertPanel] = AlertPanel;
	    }
	    openPanel(id, params = null, force = false) {
	        Logger.log("openPanel:" + id);
	        var panel = this.panels[id];
	        if (!panel) {
	            this.panels[id] = panel = this.createPanel(id);
	        }
	        if (!force && panel.opened) {
	            return;
	        }
	        panel.id = id;
	        panel.init(params);
	        LayerManager.ins.popupPanelLayer.addChild(panel);
	        this.event(PanelEvent.OPEN_PANEL, panel.id);
	        return panel;
	    }
	    createPanel(id) {
	        var cls = this.CLASS_HASH[id];
	        if (cls) {
	            return new cls();
	        }
	        else {
	            ErrorUtils.throwError("不存在窗体类:" + id);
	        }
	    }
	    closeAllPanel() {
	        for (var key in this.panels) {
	            var panel = this.panels[key];
	            if (panel.opened) {
	                this.closePanel(panel);
	            }
	        }
	    }
	    closeAllPopupPanel() {
	        var num = LayerManager.ins.popupPanelLayer.numChildren;
	        for (var i = num - 1; i >= 0; i--) {
	            var panel = LayerManager.ins.popupPanelLayer.getChildAt(i);
	            if (panel) {
	                this.closePanel(panel);
	            }
	        }
	    }
	    closePanel(panel) {
	        panel.removeSelf();
	        this.event(PanelEvent.CLOSE_PANEL, panel.id);
	    }
	    closePanelByID(key) {
	        var panel = this.panels[key];
	        if (panel) {
	            this.closePanel(panel);
	        }
	    }
	    onStageResize() {
	        for (var key in this.panels) {
	            var panel = this.panels[key];
	            if (panel.opened) {
	                panel.onStageResize();
	            }
	        }
	        if (this._mainUIPanel) {
	            this._mainUIPanel.onStageResize();
	        }
	    }
	    addMainUIPanel() {
	        this._mainUIPanel = new MainUIPanel();
	        this._mainUIPanel.init();
	        LayerManager.ins.mainUILayer.addChild(this._mainUIPanel);
	    }
	    get mainUIPanel() {
	        return this._mainUIPanel;
	    }
	    static get ins() {
	        return PanelManager._ins = PanelManager._ins || new PanelManager();
	    }
	}
	PanelManager._ins = null;

	var Sprite$8 = Laya.Sprite;
	var Event$j = Laya.Event;
	var Handler$a = Laya.Handler;
	var InitLoadingUI = editor.loading.InitLoadingUI;
	class InitLoading extends Sprite$8 {
	    constructor() {
	        super();
	        this.list = [];
	        this.isLoading = false;
	        this.mouseEnabled = true;
	        this.view = new InitLoadingUI();
	        this.addChild(this.view);
	        this.zOrder = GameZOrder.Loading;
	    }
	    show() {
	        if (this.parent != null)
	            return;
	        Laya.stage.addChild(this);
	        this.view.background.width = Laya.stage.width;
	        this.view.background.height = Laya.stage.height;
	        this.view.labName.text = ModelUser.ins.nickname;
	        this.view.imgRole.skin = PathManager.getIconsPath("role_icon_" + ModelUser.ins.role_id);
	        Laya.stage.on(Event$j.RESIZE, this, this.onStageResize);
	        this.onStageResize();
	        this.resLoadProgress(0);
	    }
	    hide() {
	        if (this.parent == null)
	            return;
	        Laya.stage.off(Event$j.RESIZE, this, this.onStageResize);
	        Laya.loader.off(Event$j.ERROR, this, this.resLoadError);
	        this.removeSelf();
	    }
	    load(urls, loadComplete) {
	        if (this.isLoading) {
	            this.list.push({ urls: urls, loadComplete: loadComplete });
	            return;
	        }
	        this.isLoading = true;
	        this.loadComplete = loadComplete;
	        if (urls.length == 0) {
	            this.resLoadComplete();
	        }
	        else {
	            this.resLoadProgress(0);
	            Laya.loader.on(Event$j.ERROR, this, this.resLoadError);
	            Laya.loader.load(urls, Handler$a.create(this, this.resLoadComplete), Handler$a.create(this, this.resLoadProgress, null, false));
	        }
	    }
	    loadNext() {
	        if (this.list.length > 0) {
	            var queueInfo = this.list.shift();
	            var urls = queueInfo["urls"];
	            var loadComplete = queueInfo["loadComplete"];
	            this.load(urls, loadComplete);
	        }
	    }
	    resLoadError() {
	        Laya.loader.off(Event$j.ERROR, this, this.resLoadError);
	    }
	    resLoadComplete() {
	        Laya.loader.off(Event$j.ERROR, this, this.resLoadError);
	        if (this.loadComplete) {
	            GameUtils.runCallBack(this.loadComplete);
	            this.loadComplete = null;
	        }
	        this.isLoading = false;
	        this.loadNext();
	    }
	    resLoadProgress(progress) {
	        this.view.progressBar.value = progress;
	        this.view.labProgress.text = GameUtils.formatPercent(progress);
	    }
	    onStageResize() {
	        this.size(Laya.stage.width, Laya.stage.height);
	        this.graphics.clear();
	        this.graphics.drawRect(0, 0, this.width, this.height, "#000000");
	        this.pos(0, 0);
	        this.view.size(this.width, this.height);
	        this.view.background.width = this.width;
	        this.view.background.height = this.height;
	        this.view.background.loadImage(ModelUser.ins.back_img, Handler$a.create(this, function () {
	        }, null, true));
	    }
	    static get ins() {
	        return InitLoading._ins = InitLoading._ins || new InitLoading();
	    }
	}

	var EventDispatcher$6 = Laya.EventDispatcher;
	var Handler$b = Laya.Handler;
	class GameManager extends EventDispatcher$6 {
	    constructor() {
	        super();
	        this.buttonClickType = "";
	        this.clipboardData = "";
	        this.isTextInput = false;
	    }
	    startTick() {
	        Laya.timer.frameLoop(1, this, this.tick);
	    }
	    tick() {
	        var nowTimer = Date.now();
	        if (this.lastTickTimer == 0) {
	            this.lastTickTimer = nowTimer;
	        }
	        var time = nowTimer - this.lastTickTimer;
	        SceneManager.ins.tick(time);
	        this.lastTickTimer = nowTimer;
	    }
	    enterWorld() {
	        var fadeComplete = function () {
	            InitLoading.ins.hide();
	            SceneManager.ins.fadeBlackLayer(false);
	        };
	        var enterComplete = function () {
	            SceneManager.ins.fadeBlackLayer(true, Handler$b.create(this, fadeComplete));
	        };
	        SceneManager.ins.enter(SceneType.Map, null, Handler$b.create(this, enterComplete));
	    }
	    readyEnterGame() {
	        this.startTick();
	        PanelManager.ins.closeAllPanel();
	        PanelManager.ins.addMainUIPanel();
	        this.enterWorld();
	    }
	    ;
	    static get ins() {
	        return GameManager._ins = GameManager._ins || new GameManager();
	    }
	}

	var Event$k = Laya.Event;
	var Keyboard$1 = Laya.Keyboard;
	var Browser$5 = Laya.Browser;
	class TestManager {
	    constructor() {
	        this.keyMap = {};
	    }
	    init() {
	        if (!GlobalVars.isTest) {
	            return;
	        }
	        Laya.stage.on(Event$k.KEY_DOWN, this, this.keyDown);
	        Laya.stage.on(Event$k.KEY_UP, this, this.keyUp);
	        this.keyMap = {};
	        this.addKey(Keyboard$1.NUMPAD_2, this.test_B);
	    }
	    test_A() {
	        StageManager.changeCursor("icon/role_icon_2.png");
	    }
	    test_B() {
	        var uid = Browser$5.now();
	        var mapScene = SceneManager.ins.currentScene;
	        var tile = mapScene.randPassTile();
	        var data = {};
	        data["nickname"] = "用户" + uid;
	        data["role_id"] = RandomUtils.randInt(1, 10);
	        data["game_uid"] = uid + "";
	        data["x"] = tile[0];
	        data["y"] = tile[1];
	        data["direction"] = RoleDir.Down;
	        GameHandler.ins.send_addUser(data);
	    }
	    test_S() {
	    }
	    addKey(keyCode, callback) {
	        this.keyMap[keyCode] = callback;
	    }
	    keyPress(event) {
	        var func = this.keyMap[event.keyCode];
	        if (func) {
	            func.apply(this);
	        }
	        var data = {};
	        data["keyCode"] = event.keyCode;
	        GameProtocol.ins.sendMessage(ProtocolAction.keyAction, data);
	    }
	    keyDown(event) {
	        var data = {};
	        data["keyCode"] = event.keyCode;
	        GameProtocol.ins.sendMessage(ProtocolAction.keyDown, data);
	    }
	    keyUp(event) {
	        var data = {};
	        data["keyCode"] = event.keyCode;
	        GameProtocol.ins.sendMessage(ProtocolAction.keyUp, data);
	        this.keyPress(event);
	    }
	    showGM() {
	        var game_uid = "";
	        var players = ModelMap.ins["players"];
	        for (var key in players) {
	            if (key != ModelUser.ins.game_uid) {
	                game_uid = key;
	                break;
	            }
	        }
	        if (!game_uid)
	            return;
	        var data = {};
	        data["game_uid"] = game_uid;
	        GameProtocol.ins.sendMessage(ProtocolAction.removeUser, data);
	    }
	    static get ins() {
	        return TestManager._ins = TestManager._ins || new TestManager();
	    }
	}
	TestManager._ins = null;

	class GameConfig {
	    constructor() { }
	    static init() {
	        var reg = Laya.ClassUtils.regClass;
	        reg("views/com/GameIcon.ts", GameIcon);
	    }
	}
	GameConfig.width = 640;
	GameConfig.height = 960;
	GameConfig.scaleMode = "showall";
	GameConfig.screenMode = "none";
	GameConfig.alignV = "middle";
	GameConfig.alignH = "center";
	GameConfig.startScene = "alert/AlertPanel.scene";
	GameConfig.sceneRoot = "";
	GameConfig.debug = false;
	GameConfig.stat = false;
	GameConfig.physicsDebug = false;
	GameConfig.exportSceneToJson = true;
	GameConfig.init();

	var SoundManager = Laya.SoundManager;
	class AudioManager {
	    static playMusic(name, rep = true) {
	        var url = PathManager.getMusicPath(name);
	        return SoundManager.playMusic(url, rep ? 0 : 1);
	    }
	    static playSound(name, rep = false, complete = null) {
	        var url = PathManager.getSoundPath(name);
	        return SoundManager.playSound(url, rep ? 0 : 1, complete);
	    }
	    static set volume(value) {
	        SoundManager.setMusicVolume(value);
	        SoundManager.setSoundVolume(value);
	    }
	    static get volume() {
	        return SoundManager.soundVolume;
	    }
	    static stopAll() {
	        SoundManager.stopAll();
	    }
	    static stopSound(channel = null) {
	        if (channel) {
	            channel.stop();
	        }
	        else {
	            SoundManager.stopAllSound();
	        }
	    }
	    static set soundMuted(value) {
	        SoundManager.soundMuted = value;
	    }
	    static get soundMuted() {
	        return SoundManager.soundMuted;
	    }
	    static set musicMuted(value) {
	        SoundManager.musicMuted = value;
	        if (!SoundManager.musicMuted) {
	            AudioManager.resumeMusic();
	        }
	    }
	    static get musicMuted() {
	        return SoundManager.musicMuted;
	    }
	    static stopAllSound() {
	        SoundManager.stopAllSound();
	    }
	    static get currentMusicUrl() {
	        return SoundManager["_bgMusic"];
	    }
	    static stopMusic() {
	        SoundManager.stopMusic();
	    }
	    static pauseAll() {
	        SoundManager.soundMuted = true;
	        SoundManager.musicMuted = true;
	    }
	    static resumeAll() {
	        SoundManager.soundMuted = false;
	        SoundManager.musicMuted = false;
	    }
	    static resumeMusic() {
	        if (SoundManager["_bgMusic"]) {
	            SoundManager.playMusic(SoundManager["_bgMusic"]);
	        }
	    }
	}

	var LocalStorage = Laya.LocalStorage;
	class LocalVo {
	    constructor() {
	        this.musicMuted = true;
	        this.soundMuted = true;
	    }
	}
	class ModelLocal {
	    constructor() {
	        this._localVo = new LocalVo();
	    }
	    get localVo() {
	        return this._localVo;
	    }
	    save() {
	        LocalStorage.setJSON(ModelLocal.LOCAL_KEY, this._localVo);
	    }
	    init() {
	        var localData = LocalStorage.getJSON(ModelLocal.LOCAL_KEY);
	        if (localData) {
	            ObjectUtils.cover(this._localVo, localData, true);
	        }
	        AudioManager.soundMuted = this._localVo.soundMuted;
	        AudioManager.musicMuted = this._localVo.musicMuted;
	    }
	    static get ins() {
	        return ModelLocal._ins = ModelLocal._ins || new ModelLocal();
	    }
	}
	ModelLocal.LOCAL_KEY = "local_data";

	var Loader$4 = Laya.Loader;
	var WebGL = Laya.WebGL;
	var Stage = Laya.Stage;
	var Handler$c = Laya.Handler;
	class GameMain {
	    constructor() {
	        this.gameInitCompleted = false;
	    }
	    start(launchConfig) {
	        launchConfig =
	            {
	                "sdkLogic": "PC",
	                "basePath": "",
	                "isWebGame": location.href.indexOf('is_mobile') === -1,
	                "isTest": location.href.indexOf('is_test') >= 0,
	                "showLog": true,
	            };
	        GlobalVars.syncParams(launchConfig);
	        if (GlobalVars.isWebGame) {
	            Laya.init(640, 960, WebGL);
	            Laya.stage.scaleMode = Stage.SCALE_FIXED_AUTO;
	            Laya.stage.screenMode = Stage.SCREEN_NONE;
	        }
	        else {
	            Laya.init(640, 960, WebGL);
	            Laya.stage.scaleMode = Stage.SCALE_FIXED_HEIGHT;
	            Laya.stage.screenMode = Stage.SCREEN_NONE;
	        }
	        Laya.stage.frameRate = Stage.FRAME_FAST;
	        Laya.stage.bgColor = "#000000";
	        Laya.stage.alignH = GameConfig.alignH;
	        Laya.stage.alignV = GameConfig.alignV;
	        if (GlobalVars.isTest) {
	            Laya.Stat.show();
	        }
	        this.launchGame();
	    }
	    loadInitRes() {
	        GameManager.ins.off(InitEvent.INIT_ROOM, this, this.loadInitRes);
	        InitLoading.ins.show();
	        var urls = [];
	        urls = urls.concat(ResPredef.getInitResList());
	        urls = urls.concat(FontManager.getFontUrls());
	        urls = urls.concat(this.getDataUrl());
	        InitLoading.ins.load(urls, Handler$c.create(this, this.loadComplete));
	    }
	    loadComplete() {
	        FontManager.init();
	        ConfigManager.init();
	        this.clearResCache();
	        this.enterGame();
	        this.gameInitCompleted = true;
	    }
	    getDataUrl() {
	        var list = [];
	        list.push({ url: "client.data", type: Loader$4.BUFFER, size: 100 });
	        return list;
	    }
	    launchGame() {
	        this.initParams();
	        this.gameInit();
	        GameManager.ins.on(InitEvent.INIT_ROOM, this, this.loadInitRes);
	        GameHandler.ins.send_initRoom();
	        GameBridge.setupBridge();
	    }
	    clearResCache() {
	        var urls = FontManager.getFontUrls();
	        for (var i = 0; i < urls.length; i++) {
	            Loader$4.clearRes(urls[i].url);
	        }
	        Loader$4.clearRes("client.data");
	    }
	    initParams() {
	        ModelLocal.ins.init();
	        PanelManager.ins.init();
	        TipUIManager.ins.init();
	        ErrorCatcher.init();
	        Loader$4.maxTimeOut = 500;
	        Config.animationInterval = 89;
	        UIConfig.popupBgAlpha = 0.75;
	    }
	    gameInit() {
	        LayerManager.ins.init();
	        StageManager.init();
	        TestManager.ins.init();
	        GameHandler.ins.init();
	        SdkManager.init();
	    }
	    enterGame() {
	        GameManager.ins.readyEnterGame();
	    }
	    needCheckBodyClick() {
	        if (!this.gameInitCompleted) {
	            return false;
	        }
	        return SdkManager.getNeedCheckBodyClick();
	    }
	    bodyClickCallBack() {
	        if (!this.gameInitCompleted) {
	            return;
	        }
	        var temp = GameManager.ins.buttonClickType;
	        GameManager.ins.buttonClickType = "";
	        if ((temp == null) || (temp == "")) {
	            return;
	        }
	        SdkManager.bodyClickCallBack(temp);
	    }
	}
	new GameMain().start(window["launchConfig"]);

	return GameMain;

}());
//# sourceMappingURL=GameMain.js.map
