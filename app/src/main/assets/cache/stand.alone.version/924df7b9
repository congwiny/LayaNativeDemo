/*
    着迷游戏接入sdk

*/
;(function(){
    var _global;
    var _message = {};
    var zm_self = {
        init: function() {
            var _this = this
            _this.initMessage()
            _this.initKeydown()
            _this.initKeyup()
        },
        initMessage: function() {
            var _this = this
            _this.removeEvent(window,'message',_this.messageAction)
            _this.Event(window,'message',_this.messageAction)
        },
        initKeydown: function() {
            var _this = this
            _this.removeEvent(document,'keydown', _this.keyDown)
            _this.Event(document,'keydown', _this.keyDown)

            _this.removeEvent(document,'keydown', _this.keyAction)
            _this.Event(document,'keydown', _this.keyAction)
        },
        initKeyup: function() {
            var _this = this
            _this.removeEvent(document,'keyup', _this.keyUp)
            _this.Event(document,'keyup', _this.keyUp)
        },
        messageAction: function (event) {
            var data = event.data
            var action = data.action
            _message[action] && _message[action](data)
        },
        keyAction: function (event) {
            var change_key = {
                "action": "keyAction",
                "data": {
                    "keyCode": event.keyCode,
                }
            }
            _message.keyAction && _message.keyAction(change_key)
        },
        keyDown: function (event) {
            var change_key = {
                "action": "keyDown",
                "data": {
                    "keyCode": event.keyCode,
                }
            }
            _message.keyDown && _message.keyDown(change_key)
        },
        keyUp: function (event) {
            var change_key = {
                "action": "keyUp",
                "data": {
                    "keyCode": event.keyCode,
                }
            }
            _message.keyUp && _message.keyUp(change_key)
        },
        Event: function (element, type, callback) {
            var ignore = ['DOMContentLoaded']
            let __type = ignore.includes(type) ? type : 'on' + type
            if(element.addEventListener){
                element.addEventListener(type, callback, false);
            } else if(element.attachEvent){
                element.attachEvent(__type, callback);
            } else {
                element[__type] = callback;
            }
        },
        removeEvent: function (element, type, callback) {
            const ignore = ['DOMContentLoaded']
            let __type = ignore.includes(type) ? type : 'on' + type
            if(element.removeEventListener){
                element.removeEventListener(type, callback);
            } else if(element.detachEvent){
                element.detachEvent(__type, callback);
            } else {
                element[__type] = null;
            }
        },
    }

    zm_self.init()

    var ZM = {
        onMessage: function(type,callback) {
            _message[type] = callback
        },
        sendMessage: function(data) {
            parent.postMessage(data,'*');
        }
    }

   
   
    _global = (function(){ return this || (0, eval)('this'); }());
    !('ZM' in _global) && (_global.ZM = ZM);

})();
